{
  "address": "0xD3DaE4556487a91A49E268F858a4B23B479DB85e",
  "abi": [
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "to",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        }
      ],
      "name": "DividendWithdrawn",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "from",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        }
      ],
      "name": "DividendsDistributed",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "previousOwner",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "newOwner",
          "type": "address"
        }
      ],
      "name": "OwnershipTransferred",
      "type": "event"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "account",
          "type": "address"
        }
      ],
      "name": "accumulativeDividendOf",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "account",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "tAmount",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "rAmount",
          "type": "uint256"
        }
      ],
      "name": "burnCallback",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "busd",
      "outputs": [
        {
          "internalType": "contract IERC20",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "account",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "tAmount",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "rAmount",
          "type": "uint256"
        }
      ],
      "name": "decreaseBalanceCallback",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "tAmount",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "rAmount",
          "type": "uint256"
        }
      ],
      "name": "decreaseTotalSupplyCallback",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        }
      ],
      "name": "distributeDividends",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "account",
          "type": "address"
        }
      ],
      "name": "dividendCorrectionOf",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "dividendPerShare",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "account",
          "type": "address"
        }
      ],
      "name": "excludeFromDividends",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "account",
          "type": "address"
        }
      ],
      "name": "includeInDividends",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "account",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "tAmount",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "rAmount",
          "type": "uint256"
        }
      ],
      "name": "increaseBalanceCallback",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "owner",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "account",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "tAmount",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "rAmount",
          "type": "uint256"
        }
      ],
      "name": "reflectCallback",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "tAmount",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "rAmount",
          "type": "uint256"
        }
      ],
      "name": "reflectCallback",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "renounceOwnership",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "recipient",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "tokenAddress",
          "type": "address"
        }
      ],
      "name": "retrieveTokens",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address payable",
          "name": "recipient",
          "type": "address"
        }
      ],
      "name": "retriveETH",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_busd",
          "type": "address"
        }
      ],
      "name": "setBUSD",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_token",
          "type": "address"
        }
      ],
      "name": "setToken",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "token",
      "outputs": [
        {
          "internalType": "contract ICarboToken",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "from",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "to",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "tFromAmount",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "rFromAmount",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "tToAmount",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "rToAmount",
          "type": "uint256"
        }
      ],
      "name": "transferCallback",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "newOwner",
          "type": "address"
        }
      ],
      "name": "transferOwnership",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "withdrawDividend",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "account",
          "type": "address"
        }
      ],
      "name": "withdrawableDividendOf",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "account",
          "type": "address"
        }
      ],
      "name": "withdrawnDividendOf",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    }
  ],
  "transactionHash": "0x9cb0987bd990d7300144c52ba53100527b61e10144fd76536fe65104410c2dcc",
  "receipt": {
    "to": null,
    "from": "0xc3a20F9D15cfD2224038EcCC8186C216366c4BFd",
    "contractAddress": "0xD3DaE4556487a91A49E268F858a4B23B479DB85e",
    "transactionIndex": 7,
    "gasUsed": "1593514",
    "logsBloom": "0x00000000000000000000000000000000000000000000000000800000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000200001000000000000000000000000000000000000020000000000000000000800000000000000000000000000000000400000000800000000000000000000000000080000000000000000000000000000000000000000000000000000000000000000000000000000000001000000000000000000000000000000000000000000000000000000000000000000000020200000000000000000000000000000000000000000000000000000000000400000",
    "blockHash": "0x726ba09072665555086087108a0314aa3bfdd8fcc0f38c320f97e8d7072da9bc",
    "transactionHash": "0x9cb0987bd990d7300144c52ba53100527b61e10144fd76536fe65104410c2dcc",
    "logs": [
      {
        "transactionIndex": 7,
        "blockNumber": 27428753,
        "transactionHash": "0x9cb0987bd990d7300144c52ba53100527b61e10144fd76536fe65104410c2dcc",
        "address": "0xD3DaE4556487a91A49E268F858a4B23B479DB85e",
        "topics": [
          "0x8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e0",
          "0x0000000000000000000000000000000000000000000000000000000000000000",
          "0x000000000000000000000000c3a20f9d15cfd2224038eccc8186c216366c4bfd"
        ],
        "data": "0x",
        "logIndex": 17,
        "blockHash": "0x726ba09072665555086087108a0314aa3bfdd8fcc0f38c320f97e8d7072da9bc"
      }
    ],
    "blockNumber": 27428753,
    "cumulativeGasUsed": "2886187",
    "status": 1,
    "byzantium": true
  },
  "args": [],
  "solcInputHash": "02e4a29bfd2480dae87c85e2856a38fe",
  "metadata": "{\"compiler\":{\"version\":\"0.8.10+commit.fc410830\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"DividendWithdrawn\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"DividendsDistributed\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"accumulativeDividendOf\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"tAmount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"rAmount\",\"type\":\"uint256\"}],\"name\":\"burnCallback\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"busd\",\"outputs\":[{\"internalType\":\"contract IERC20\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"tAmount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"rAmount\",\"type\":\"uint256\"}],\"name\":\"decreaseBalanceCallback\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"tAmount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"rAmount\",\"type\":\"uint256\"}],\"name\":\"decreaseTotalSupplyCallback\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"distributeDividends\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"dividendCorrectionOf\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"dividendPerShare\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"excludeFromDividends\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"includeInDividends\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"tAmount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"rAmount\",\"type\":\"uint256\"}],\"name\":\"increaseBalanceCallback\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"tAmount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"rAmount\",\"type\":\"uint256\"}],\"name\":\"reflectCallback\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"tAmount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"rAmount\",\"type\":\"uint256\"}],\"name\":\"reflectCallback\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"renounceOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"recipient\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"tokenAddress\",\"type\":\"address\"}],\"name\":\"retrieveTokens\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address payable\",\"name\":\"recipient\",\"type\":\"address\"}],\"name\":\"retriveETH\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_busd\",\"type\":\"address\"}],\"name\":\"setBUSD\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_token\",\"type\":\"address\"}],\"name\":\"setToken\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"token\",\"outputs\":[{\"internalType\":\"contract ICarboToken\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"tFromAmount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"rFromAmount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"tToAmount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"rToAmount\",\"type\":\"uint256\"}],\"name\":\"transferCallback\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"withdrawDividend\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"withdrawableDividendOf\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"withdrawnDividendOf\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"}],\"devdoc\":{\"kind\":\"dev\",\"methods\":{\"owner()\":{\"details\":\"Returns the address of the current owner.\"},\"renounceOwnership()\":{\"details\":\"Leaves the contract without owner. It will not be possible to call `onlyOwner` functions anymore. Can only be called by the current owner. NOTE: Renouncing ownership will leave the contract without an owner, thereby removing any functionality that is only available to the owner.\"},\"transferOwnership(address)\":{\"details\":\"Transfers ownership of the contract to a new account (`newOwner`). Can only be called by the current owner.\"}},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{},\"version\":1}},\"settings\":{\"compilationTarget\":{\"contracts/v1/DividendManager.sol\":\"DividendManager\"},\"evmVersion\":\"london\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":true,\"runs\":200},\"remappings\":[]},\"sources\":{\"@openzeppelin/contracts/access/Ownable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.7.0) (access/Ownable.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../utils/Context.sol\\\";\\n\\n/**\\n * @dev Contract module which provides a basic access control mechanism, where\\n * there is an account (an owner) that can be granted exclusive access to\\n * specific functions.\\n *\\n * By default, the owner account will be the one that deploys the contract. This\\n * can later be changed with {transferOwnership}.\\n *\\n * This module is used through inheritance. It will make available the modifier\\n * `onlyOwner`, which can be applied to your functions to restrict their use to\\n * the owner.\\n */\\nabstract contract Ownable is Context {\\n    address private _owner;\\n\\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\\n\\n    /**\\n     * @dev Initializes the contract setting the deployer as the initial owner.\\n     */\\n    constructor() {\\n        _transferOwnership(_msgSender());\\n    }\\n\\n    /**\\n     * @dev Throws if called by any account other than the owner.\\n     */\\n    modifier onlyOwner() {\\n        _checkOwner();\\n        _;\\n    }\\n\\n    /**\\n     * @dev Returns the address of the current owner.\\n     */\\n    function owner() public view virtual returns (address) {\\n        return _owner;\\n    }\\n\\n    /**\\n     * @dev Throws if the sender is not the owner.\\n     */\\n    function _checkOwner() internal view virtual {\\n        require(owner() == _msgSender(), \\\"Ownable: caller is not the owner\\\");\\n    }\\n\\n    /**\\n     * @dev Leaves the contract without owner. It will not be possible to call\\n     * `onlyOwner` functions anymore. Can only be called by the current owner.\\n     *\\n     * NOTE: Renouncing ownership will leave the contract without an owner,\\n     * thereby removing any functionality that is only available to the owner.\\n     */\\n    function renounceOwnership() public virtual onlyOwner {\\n        _transferOwnership(address(0));\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Can only be called by the current owner.\\n     */\\n    function transferOwnership(address newOwner) public virtual onlyOwner {\\n        require(newOwner != address(0), \\\"Ownable: new owner is the zero address\\\");\\n        _transferOwnership(newOwner);\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Internal function without access restriction.\\n     */\\n    function _transferOwnership(address newOwner) internal virtual {\\n        address oldOwner = _owner;\\n        _owner = newOwner;\\n        emit OwnershipTransferred(oldOwner, newOwner);\\n    }\\n}\\n\",\"keccak256\":\"0xa94b34880e3c1b0b931662cb1c09e5dfa6662f31cba80e07c5ee71cd135c9673\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC20/IERC20.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.6.0) (token/ERC20/IERC20.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC20 standard as defined in the EIP.\\n */\\ninterface IERC20 {\\n    /**\\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\\n     * another (`to`).\\n     *\\n     * Note that `value` may be zero.\\n     */\\n    event Transfer(address indexed from, address indexed to, uint256 value);\\n\\n    /**\\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\\n     * a call to {approve}. `value` is the new allowance.\\n     */\\n    event Approval(address indexed owner, address indexed spender, uint256 value);\\n\\n    /**\\n     * @dev Returns the amount of tokens in existence.\\n     */\\n    function totalSupply() external view returns (uint256);\\n\\n    /**\\n     * @dev Returns the amount of tokens owned by `account`.\\n     */\\n    function balanceOf(address account) external view returns (uint256);\\n\\n    /**\\n     * @dev Moves `amount` tokens from the caller's account to `to`.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transfer(address to, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Returns the remaining number of tokens that `spender` will be\\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\\n     * zero by default.\\n     *\\n     * This value changes when {approve} or {transferFrom} are called.\\n     */\\n    function allowance(address owner, address spender) external view returns (uint256);\\n\\n    /**\\n     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\\n     * that someone may use both the old and the new allowance by unfortunate\\n     * transaction ordering. One possible solution to mitigate this race\\n     * condition is to first reduce the spender's allowance to 0 and set the\\n     * desired value afterwards:\\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\\n     *\\n     * Emits an {Approval} event.\\n     */\\n    function approve(address spender, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Moves `amount` tokens from `from` to `to` using the\\n     * allowance mechanism. `amount` is then deducted from the caller's\\n     * allowance.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transferFrom(\\n        address from,\\n        address to,\\n        uint256 amount\\n    ) external returns (bool);\\n}\\n\",\"keccak256\":\"0x9750c6b834f7b43000631af5cc30001c5f547b3ceb3635488f140f60e897ea6b\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/Context.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/Context.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Provides information about the current execution context, including the\\n * sender of the transaction and its data. While these are generally available\\n * via msg.sender and msg.data, they should not be accessed in such a direct\\n * manner, since when dealing with meta-transactions the account sending and\\n * paying for execution may not be the actual sender (as far as an application\\n * is concerned).\\n *\\n * This contract is only required for intermediate, library-like contracts.\\n */\\nabstract contract Context {\\n    function _msgSender() internal view virtual returns (address) {\\n        return msg.sender;\\n    }\\n\\n    function _msgData() internal view virtual returns (bytes calldata) {\\n        return msg.data;\\n    }\\n}\\n\",\"keccak256\":\"0xe2e337e6dde9ef6b680e07338c493ebea1b5fd09b43424112868e9cc1706bca7\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/math/SafeMath.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.6.0) (utils/math/SafeMath.sol)\\n\\npragma solidity ^0.8.0;\\n\\n// CAUTION\\n// This version of SafeMath should only be used with Solidity 0.8 or later,\\n// because it relies on the compiler's built in overflow checks.\\n\\n/**\\n * @dev Wrappers over Solidity's arithmetic operations.\\n *\\n * NOTE: `SafeMath` is generally not needed starting with Solidity 0.8, since the compiler\\n * now has built in overflow checking.\\n */\\nlibrary SafeMath {\\n    /**\\n     * @dev Returns the addition of two unsigned integers, with an overflow flag.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function tryAdd(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        unchecked {\\n            uint256 c = a + b;\\n            if (c < a) return (false, 0);\\n            return (true, c);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the subtraction of two unsigned integers, with an overflow flag.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function trySub(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        unchecked {\\n            if (b > a) return (false, 0);\\n            return (true, a - b);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the multiplication of two unsigned integers, with an overflow flag.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function tryMul(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        unchecked {\\n            // Gas optimization: this is cheaper than requiring 'a' not being zero, but the\\n            // benefit is lost if 'b' is also tested.\\n            // See: https://github.com/OpenZeppelin/openzeppelin-contracts/pull/522\\n            if (a == 0) return (true, 0);\\n            uint256 c = a * b;\\n            if (c / a != b) return (false, 0);\\n            return (true, c);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the division of two unsigned integers, with a division by zero flag.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function tryDiv(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        unchecked {\\n            if (b == 0) return (false, 0);\\n            return (true, a / b);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the remainder of dividing two unsigned integers, with a division by zero flag.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function tryMod(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        unchecked {\\n            if (b == 0) return (false, 0);\\n            return (true, a % b);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the addition of two unsigned integers, reverting on\\n     * overflow.\\n     *\\n     * Counterpart to Solidity's `+` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - Addition cannot overflow.\\n     */\\n    function add(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return a + b;\\n    }\\n\\n    /**\\n     * @dev Returns the subtraction of two unsigned integers, reverting on\\n     * overflow (when the result is negative).\\n     *\\n     * Counterpart to Solidity's `-` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - Subtraction cannot overflow.\\n     */\\n    function sub(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return a - b;\\n    }\\n\\n    /**\\n     * @dev Returns the multiplication of two unsigned integers, reverting on\\n     * overflow.\\n     *\\n     * Counterpart to Solidity's `*` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - Multiplication cannot overflow.\\n     */\\n    function mul(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return a * b;\\n    }\\n\\n    /**\\n     * @dev Returns the integer division of two unsigned integers, reverting on\\n     * division by zero. The result is rounded towards zero.\\n     *\\n     * Counterpart to Solidity's `/` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - The divisor cannot be zero.\\n     */\\n    function div(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return a / b;\\n    }\\n\\n    /**\\n     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\\n     * reverting when dividing by zero.\\n     *\\n     * Counterpart to Solidity's `%` operator. This function uses a `revert`\\n     * opcode (which leaves remaining gas untouched) while Solidity uses an\\n     * invalid opcode to revert (consuming all remaining gas).\\n     *\\n     * Requirements:\\n     *\\n     * - The divisor cannot be zero.\\n     */\\n    function mod(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return a % b;\\n    }\\n\\n    /**\\n     * @dev Returns the subtraction of two unsigned integers, reverting with custom message on\\n     * overflow (when the result is negative).\\n     *\\n     * CAUTION: This function is deprecated because it requires allocating memory for the error\\n     * message unnecessarily. For custom revert reasons use {trySub}.\\n     *\\n     * Counterpart to Solidity's `-` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - Subtraction cannot overflow.\\n     */\\n    function sub(\\n        uint256 a,\\n        uint256 b,\\n        string memory errorMessage\\n    ) internal pure returns (uint256) {\\n        unchecked {\\n            require(b <= a, errorMessage);\\n            return a - b;\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the integer division of two unsigned integers, reverting with custom message on\\n     * division by zero. The result is rounded towards zero.\\n     *\\n     * Counterpart to Solidity's `/` operator. Note: this function uses a\\n     * `revert` opcode (which leaves remaining gas untouched) while Solidity\\n     * uses an invalid opcode to revert (consuming all remaining gas).\\n     *\\n     * Requirements:\\n     *\\n     * - The divisor cannot be zero.\\n     */\\n    function div(\\n        uint256 a,\\n        uint256 b,\\n        string memory errorMessage\\n    ) internal pure returns (uint256) {\\n        unchecked {\\n            require(b > 0, errorMessage);\\n            return a / b;\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\\n     * reverting with custom message when dividing by zero.\\n     *\\n     * CAUTION: This function is deprecated because it requires allocating memory for the error\\n     * message unnecessarily. For custom revert reasons use {tryMod}.\\n     *\\n     * Counterpart to Solidity's `%` operator. This function uses a `revert`\\n     * opcode (which leaves remaining gas untouched) while Solidity uses an\\n     * invalid opcode to revert (consuming all remaining gas).\\n     *\\n     * Requirements:\\n     *\\n     * - The divisor cannot be zero.\\n     */\\n    function mod(\\n        uint256 a,\\n        uint256 b,\\n        string memory errorMessage\\n    ) internal pure returns (uint256) {\\n        unchecked {\\n            require(b > 0, errorMessage);\\n            return a % b;\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x0f633a0223d9a1dcccfcf38a64c9de0874dfcbfac0c6941ccf074d63a2ce0e1e\",\"license\":\"MIT\"},\"contracts/v1/DividendManager.sol\":{\"content\":\"pragma solidity ^0.8.0;\\n\\nimport \\\"@openzeppelin/contracts/access/Ownable.sol\\\";\\nimport \\\"@openzeppelin/contracts/token/ERC20/IERC20.sol\\\";\\nimport \\\"@openzeppelin/contracts/utils/math/SafeMath.sol\\\";\\nimport \\\"./interfaces/ICallbackContract.sol\\\";\\nimport \\\"./interfaces/ICarboToken.sol\\\";\\nimport \\\"./lib/ABDKMathQuad.sol\\\";\\nimport \\\"./RecoverableFunds.sol\\\";\\n\\ncontract DividendManager is ICallbackContract, Ownable, RecoverableFunds {\\n    ICarboToken public token;\\n    IERC20 public busd;\\n\\n    uint256 internal _excludedSupply;\\n    bytes16 internal _dividendPerShare;\\n    mapping(address => bytes16) internal _dividendCorrections;\\n    mapping(address => uint256) internal _withdrawnDividends;\\n    mapping(address => bool) internal _excluded;\\n\\n    event DividendsDistributed(address indexed from, uint256 amount);\\n    event DividendWithdrawn(address indexed to, uint256 amount);\\n\\n    modifier onlyToken() {\\n        require(\\n            address(token) == _msgSender(),\\n            \\\"DividendManager: caller is not the token\\\"\\n        );\\n        _;\\n    }\\n\\n    function setToken(address _token) public onlyOwner {\\n        token = ICarboToken(_token);\\n    }\\n\\n    function setBUSD(address _busd) public onlyOwner {\\n        busd = IERC20(_busd);\\n    }\\n\\n    function dividendCorrectionOf(\\n        address account\\n    ) public view returns (uint256) {\\n        return ABDKMathQuad.toUInt(_dividendCorrections[account]);\\n    }\\n\\n    function dividendPerShare() public view returns (uint256) {\\n        return ABDKMathQuad.toUInt(_dividendPerShare);\\n    }\\n\\n    function distributeDividends(uint256 amount) public {\\n        uint256 correctedSupply = token.getRTotal() - _excludedSupply;\\n        require(\\n            correctedSupply > 0,\\n            \\\"DividendManager: totalSupply should be greater than 0\\\"\\n        );\\n        require(\\n            amount > 0,\\n            \\\"DividendManager: distributed amount should be greater than 0\\\"\\n        );\\n        busd.transferFrom(_msgSender(), address(this), amount);\\n        _dividendPerShare = ABDKMathQuad.add(\\n            _dividendPerShare,\\n            ABDKMathQuad.div(\\n                ABDKMathQuad.fromUInt(amount),\\n                ABDKMathQuad.fromUInt(correctedSupply)\\n            )\\n        );\\n        emit DividendsDistributed(msg.sender, amount);\\n    }\\n\\n    function withdrawDividend() public {\\n        _withdrawDividend(_msgSender());\\n    }\\n\\n    function withdrawableDividendOf(\\n        address account\\n    ) public view returns (uint256) {\\n        if (_excluded[account]) return 0;\\n        return accumulativeDividendOf(account) - _withdrawnDividends[account];\\n    }\\n\\n    function withdrawnDividendOf(\\n        address account\\n    ) public view returns (uint256) {\\n        return _withdrawnDividends[account];\\n    }\\n\\n    function accumulativeDividendOf(\\n        address account\\n    ) public view returns (uint256) {\\n        return\\n            ABDKMathQuad.toUInt(\\n                ABDKMathQuad.add(\\n                    ABDKMathQuad.mul(\\n                        _dividendPerShare,\\n                        ABDKMathQuad.fromUInt(token.getROwned(account))\\n                    ),\\n                    _dividendCorrections[account]\\n                )\\n            );\\n    }\\n\\n    function includeInDividends(address account) public onlyOwner {\\n        _dividendCorrections[account] = ABDKMathQuad.neg(\\n            ABDKMathQuad.mul(\\n                _dividendPerShare,\\n                ABDKMathQuad.fromUInt(token.getROwned(account))\\n            )\\n        );\\n        _excluded[account] = false;\\n        _excludedSupply = _excludedSupply - token.getROwned(account);\\n    }\\n\\n    function excludeFromDividends(address account) public onlyOwner {\\n        _withdrawDividend(account);\\n        _excluded[account] = true;\\n        _excludedSupply = _excludedSupply + token.getROwned(account);\\n    }\\n\\n    function reflectCallback(\\n        uint256 tAmount,\\n        uint256 rAmount\\n    ) external override onlyToken {}\\n\\n    function reflectCallback(\\n        address account,\\n        uint256 tAmount,\\n        uint256 rAmount\\n    ) external override onlyToken {}\\n\\n    function increaseBalanceCallback(\\n        address account,\\n        uint256 tAmount,\\n        uint256 rAmount\\n    ) external override onlyToken {\\n        if (_excluded[account]) {\\n            _excludedSupply = _excludedSupply + rAmount;\\n        } else {\\n            _decreaseDividendCorrection(\\n                account,\\n                _calculateDividendCorrection(ABDKMathQuad.fromUInt(rAmount))\\n            );\\n        }\\n    }\\n\\n    function decreaseBalanceCallback(\\n        address account,\\n        uint256 tAmount,\\n        uint256 rAmount\\n    ) external override onlyToken {\\n        if (_excluded[account]) {\\n            _excludedSupply = _excludedSupply - rAmount;\\n        } else {\\n            _increaseDividendCorrection(\\n                account,\\n                _calculateDividendCorrection(ABDKMathQuad.fromUInt(rAmount))\\n            );\\n        }\\n    }\\n\\n    function decreaseTotalSupplyCallback(\\n        uint256 tAmount,\\n        uint256 rAmount\\n    ) external override onlyToken {}\\n\\n    function transferCallback(\\n        address from,\\n        address to,\\n        uint256 tFromAmount,\\n        uint256 rFromAmount,\\n        uint256 tToAmount,\\n        uint256 rToAmount\\n    ) external override onlyToken {}\\n\\n    function burnCallback(\\n        address account,\\n        uint256 tAmount,\\n        uint256 rAmount\\n    ) external override onlyToken {}\\n\\n    function _withdrawDividend(address account) internal {\\n        uint256 withdrawableDividend = withdrawableDividendOf(account);\\n        if (withdrawableDividend > 0) {\\n            _withdrawnDividends[account] =\\n                _withdrawnDividends[account] +\\n                withdrawableDividend;\\n            busd.transfer(account, withdrawableDividend);\\n            emit DividendWithdrawn(account, withdrawableDividend);\\n        }\\n    }\\n\\n    function _calculateDividendCorrection(\\n        bytes16 value\\n    ) internal view returns (bytes16) {\\n        return ABDKMathQuad.mul(_dividendPerShare, value);\\n    }\\n\\n    function _increaseDividendCorrection(\\n        address account,\\n        bytes16 value\\n    ) internal {\\n        _dividendCorrections[account] = ABDKMathQuad.add(\\n            _dividendCorrections[account],\\n            value\\n        );\\n    }\\n\\n    function _decreaseDividendCorrection(\\n        address account,\\n        bytes16 value\\n    ) internal {\\n        _dividendCorrections[account] = ABDKMathQuad.sub(\\n            _dividendCorrections[account],\\n            value\\n        );\\n    }\\n}\\n\",\"keccak256\":\"0xaa13795c863bd28afb896d949030721fa059be696d1d7150a5ee54c18c989b76\"},\"contracts/v1/RecoverableFunds.sol\":{\"content\":\"// SPDX-License-Identifier: UNLICENSED\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"@openzeppelin/contracts/access/Ownable.sol\\\";\\nimport \\\"@openzeppelin/contracts/token/ERC20/IERC20.sol\\\";\\n\\n/**\\n * @dev Allows the owner to retrieve ETH or tokens sent to this contract by mistake.\\n */\\ncontract RecoverableFunds is Ownable {\\n    function retrieveTokens(\\n        address recipient,\\n        address tokenAddress\\n    ) public virtual onlyOwner {\\n        IERC20 token = IERC20(tokenAddress);\\n        token.transfer(recipient, token.balanceOf(address(this)));\\n    }\\n\\n    function retriveETH(address payable recipient) public virtual onlyOwner {\\n        recipient.transfer(address(this).balance);\\n    }\\n}\\n\",\"keccak256\":\"0xab5230575ddd5e0b5d8242e99c224a7c334ca1bd2df5893861c226789f508758\",\"license\":\"UNLICENSED\"},\"contracts/v1/interfaces/ICallbackContract.sol\":{\"content\":\"// SPDX-License-Identifier: UNLICENSED\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of contract that can be invoked by a token contract during reflect or transfer.\\n */\\ninterface ICallbackContract {\\n    function reflectCallback(uint256 tAmount, uint256 rAmount) external;\\n\\n    function reflectCallback(\\n        address account,\\n        uint256 tAmount,\\n        uint256 rAmount\\n    ) external;\\n\\n    function increaseBalanceCallback(\\n        address account,\\n        uint256 tAmount,\\n        uint256 rAmount\\n    ) external;\\n\\n    function decreaseBalanceCallback(\\n        address account,\\n        uint256 tAmount,\\n        uint256 rAmount\\n    ) external;\\n\\n    function decreaseTotalSupplyCallback(\\n        uint256 tAmount,\\n        uint256 rAmount\\n    ) external;\\n\\n    function transferCallback(\\n        address from,\\n        address to,\\n        uint256 tFromAmount,\\n        uint256 rFromAmount,\\n        uint256 tToAmount,\\n        uint256 rToAmount\\n    ) external;\\n\\n    function burnCallback(\\n        address account,\\n        uint256 tAmount,\\n        uint256 rAmount\\n    ) external;\\n}\\n\",\"keccak256\":\"0x66fed5f0710030cae9de717c132d7ad7f64932252ddfd85f8359dbf05a0f7325\",\"license\":\"UNLICENSED\"},\"contracts/v1/interfaces/ICarboToken.sol\":{\"content\":\"// SPDX-License-Identifier: UNLICENSED\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"@openzeppelin/contracts/token/ERC20/IERC20.sol\\\";\\n\\n/**\\n * @dev Interface of CarboToken\\n */\\ninterface ICarboToken is IERC20 {\\n    struct Amounts {\\n        uint256 sum;\\n        uint256 transfer;\\n        uint256 rfi;\\n        uint256 dividends;\\n        uint256 buyback;\\n        uint256 treasury;\\n        uint256 liquidity;\\n    }\\n\\n    struct Fees {\\n        uint256 rfi;\\n        uint256 dividends;\\n        uint256 buyback;\\n        uint256 treasury;\\n        uint256 liquidity;\\n    }\\n\\n    struct FeeAddresses {\\n        address dividends;\\n        address buyback;\\n        address treasury;\\n        address liquidity;\\n    }\\n\\n    enum FeeType {\\n        BUY,\\n        SELL,\\n        NONE\\n    }\\n\\n    event FeeTaken(\\n        uint256 rfi,\\n        uint256 dividends,\\n        uint256 buyback,\\n        uint256 treasury,\\n        uint256 liquidity\\n    );\\n\\n    function name() external view returns (string memory);\\n\\n    function symbol() external view returns (string memory);\\n\\n    function decimals() external pure returns (uint8);\\n\\n    function burn(uint256 amount) external;\\n\\n    function burnFrom(address account, uint256 amount) external;\\n\\n    function increaseAllowance(\\n        address spender,\\n        uint256 addedValue\\n    ) external returns (bool);\\n\\n    function decreaseAllowance(\\n        address spender,\\n        uint256 subtractedValue\\n    ) external returns (bool);\\n\\n    function getFees(FeeType feeType) external view returns (Fees memory);\\n\\n    function setFees(\\n        FeeType feeType,\\n        uint rfi,\\n        uint dividends,\\n        uint buyback,\\n        uint treasury,\\n        uint liquidity\\n    ) external;\\n\\n    function getFeeAddresses(\\n        FeeType feeType\\n    ) external view returns (FeeAddresses memory);\\n\\n    function setFeeAddresses(\\n        FeeType feeType,\\n        address dividends,\\n        address buyback,\\n        address treasury,\\n        address liquidity\\n    ) external;\\n\\n    function setTaxable(address account, bool value) external;\\n\\n    function setTaxExempt(address account, bool value) external;\\n\\n    function getROwned(address account) external view returns (uint256);\\n\\n    function getRTotal() external view returns (uint256);\\n\\n    function excludeFromRFI(address account) external;\\n\\n    function includeInRFI(address account) external;\\n\\n    function reflect(uint256 tAmount) external;\\n\\n    function reflectionFromToken(\\n        uint256 tAmount\\n    ) external view returns (uint256);\\n\\n    function tokenFromReflection(\\n        uint256 rAmount\\n    ) external view returns (uint256);\\n}\\n\",\"keccak256\":\"0x83e505bf210fbb7a6eeff4d67bea30278fb3770a9b17b5451bc707f9fc001085\",\"license\":\"UNLICENSED\"},\"contracts/v1/lib/ABDKMathQuad.sol\":{\"content\":\"// SPDX-License-Identifier: BSD-4-Clause\\n/*\\n * ABDK Math Quad Smart Contract Library.  Copyright \\u00a9 2019 by ABDK Consulting.\\n * Author: Mikhail Vladimirov <mikhail.vladimirov@gmail.com>\\n */\\npragma solidity ^0.8.0;\\n\\n/**\\n * Smart contract library of mathematical functions operating with IEEE 754\\n * quadruple-precision binary floating-point numbers (quadruple precision\\n * numbers).  As long as quadruple precision numbers are 16-bytes long, they are\\n * represented by bytes16 type.\\n */\\nlibrary ABDKMathQuad {\\n    /*\\n     * 0.\\n     */\\n    bytes16 private constant POSITIVE_ZERO = 0x00000000000000000000000000000000;\\n\\n    /*\\n     * -0.\\n     */\\n    bytes16 private constant NEGATIVE_ZERO = 0x80000000000000000000000000000000;\\n\\n    /*\\n     * +Infinity.\\n     */\\n    bytes16 private constant POSITIVE_INFINITY =\\n        0x7FFF0000000000000000000000000000;\\n\\n    /*\\n     * -Infinity.\\n     */\\n    bytes16 private constant NEGATIVE_INFINITY =\\n        0xFFFF0000000000000000000000000000;\\n\\n    /*\\n     * Canonical NaN value.\\n     */\\n    bytes16 private constant NaN = 0x7FFF8000000000000000000000000000;\\n\\n    /**\\n     * Convert signed 256-bit integer number into quadruple precision number.\\n     *\\n     * @param x signed 256-bit integer number\\n     * @return quadruple precision number\\n     */\\n    function fromInt(int256 x) internal pure returns (bytes16) {\\n        unchecked {\\n            if (x == 0) return bytes16(0);\\n            else {\\n                // We rely on overflow behavior here\\n                uint256 result = uint256(x > 0 ? x : -x);\\n\\n                uint256 msb = mostSignificantBit(result);\\n                if (msb < 112) result <<= 112 - msb;\\n                else if (msb > 112) result >>= msb - 112;\\n\\n                result =\\n                    (result & 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFF) |\\n                    ((16383 + msb) << 112);\\n                if (x < 0) result |= 0x80000000000000000000000000000000;\\n\\n                return bytes16(uint128(result));\\n            }\\n        }\\n    }\\n\\n    /**\\n     * Convert quadruple precision number into signed 256-bit integer number\\n     * rounding towards zero.  Revert on overflow.\\n     *\\n     * @param x quadruple precision number\\n     * @return signed 256-bit integer number\\n     */\\n    function toInt(bytes16 x) internal pure returns (int256) {\\n        unchecked {\\n            uint256 exponent = (uint128(x) >> 112) & 0x7FFF;\\n\\n            require(exponent <= 16638); // Overflow\\n            if (exponent < 16383) return 0; // Underflow\\n\\n            uint256 result = (uint256(uint128(x)) &\\n                0xFFFFFFFFFFFFFFFFFFFFFFFFFFFF) |\\n                0x10000000000000000000000000000;\\n\\n            if (exponent < 16495) result >>= 16495 - exponent;\\n            else if (exponent > 16495) result <<= exponent - 16495;\\n\\n            if (uint128(x) >= 0x80000000000000000000000000000000) {\\n                // Negative\\n                require(\\n                    result <=\\n                        0x8000000000000000000000000000000000000000000000000000000000000000\\n                );\\n                return -int256(result); // We rely on overflow behavior here\\n            } else {\\n                require(\\n                    result <=\\n                        0x7FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF\\n                );\\n                return int256(result);\\n            }\\n        }\\n    }\\n\\n    /**\\n     * Convert unsigned 256-bit integer number into quadruple precision number.\\n     *\\n     * @param x unsigned 256-bit integer number\\n     * @return quadruple precision number\\n     */\\n    function fromUInt(uint256 x) internal pure returns (bytes16) {\\n        unchecked {\\n            if (x == 0) return bytes16(0);\\n            else {\\n                uint256 result = x;\\n\\n                uint256 msb = mostSignificantBit(result);\\n                if (msb < 112) result <<= 112 - msb;\\n                else if (msb > 112) result >>= msb - 112;\\n\\n                result =\\n                    (result & 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFF) |\\n                    ((16383 + msb) << 112);\\n\\n                return bytes16(uint128(result));\\n            }\\n        }\\n    }\\n\\n    /**\\n     * Convert quadruple precision number into unsigned 256-bit integer number\\n     * rounding towards zero.  Revert on underflow.  Note, that negative floating\\n     * point numbers in range (-1.0 .. 0.0) may be converted to unsigned integer\\n     * without error, because they are rounded to zero.\\n     *\\n     * @param x quadruple precision number\\n     * @return unsigned 256-bit integer number\\n     */\\n    function toUInt(bytes16 x) internal pure returns (uint256) {\\n        unchecked {\\n            uint256 exponent = (uint128(x) >> 112) & 0x7FFF;\\n\\n            if (exponent < 16383) return 0; // Underflow\\n\\n            require(uint128(x) < 0x80000000000000000000000000000000); // Negative\\n\\n            require(exponent <= 16638); // Overflow\\n            uint256 result = (uint256(uint128(x)) &\\n                0xFFFFFFFFFFFFFFFFFFFFFFFFFFFF) |\\n                0x10000000000000000000000000000;\\n\\n            if (exponent < 16495) result >>= 16495 - exponent;\\n            else if (exponent > 16495) result <<= exponent - 16495;\\n\\n            return result;\\n        }\\n    }\\n\\n    /**\\n     * Convert signed 128.128 bit fixed point number into quadruple precision\\n     * number.\\n     *\\n     * @param x signed 128.128 bit fixed point number\\n     * @return quadruple precision number\\n     */\\n    function from128x128(int256 x) internal pure returns (bytes16) {\\n        unchecked {\\n            if (x == 0) return bytes16(0);\\n            else {\\n                // We rely on overflow behavior here\\n                uint256 result = uint256(x > 0 ? x : -x);\\n\\n                uint256 msb = mostSignificantBit(result);\\n                if (msb < 112) result <<= 112 - msb;\\n                else if (msb > 112) result >>= msb - 112;\\n\\n                result =\\n                    (result & 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFF) |\\n                    ((16255 + msb) << 112);\\n                if (x < 0) result |= 0x80000000000000000000000000000000;\\n\\n                return bytes16(uint128(result));\\n            }\\n        }\\n    }\\n\\n    /**\\n     * Convert quadruple precision number into signed 128.128 bit fixed point\\n     * number.  Revert on overflow.\\n     *\\n     * @param x quadruple precision number\\n     * @return signed 128.128 bit fixed point number\\n     */\\n    function to128x128(bytes16 x) internal pure returns (int256) {\\n        unchecked {\\n            uint256 exponent = (uint128(x) >> 112) & 0x7FFF;\\n\\n            require(exponent <= 16510); // Overflow\\n            if (exponent < 16255) return 0; // Underflow\\n\\n            uint256 result = (uint256(uint128(x)) &\\n                0xFFFFFFFFFFFFFFFFFFFFFFFFFFFF) |\\n                0x10000000000000000000000000000;\\n\\n            if (exponent < 16367) result >>= 16367 - exponent;\\n            else if (exponent > 16367) result <<= exponent - 16367;\\n\\n            if (uint128(x) >= 0x80000000000000000000000000000000) {\\n                // Negative\\n                require(\\n                    result <=\\n                        0x8000000000000000000000000000000000000000000000000000000000000000\\n                );\\n                return -int256(result); // We rely on overflow behavior here\\n            } else {\\n                require(\\n                    result <=\\n                        0x7FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF\\n                );\\n                return int256(result);\\n            }\\n        }\\n    }\\n\\n    /**\\n     * Convert signed 64.64 bit fixed point number into quadruple precision\\n     * number.\\n     *\\n     * @param x signed 64.64 bit fixed point number\\n     * @return quadruple precision number\\n     */\\n    function from64x64(int128 x) internal pure returns (bytes16) {\\n        unchecked {\\n            if (x == 0) return bytes16(0);\\n            else {\\n                // We rely on overflow behavior here\\n                uint256 result = uint128(x > 0 ? x : -x);\\n\\n                uint256 msb = mostSignificantBit(result);\\n                if (msb < 112) result <<= 112 - msb;\\n                else if (msb > 112) result >>= msb - 112;\\n\\n                result =\\n                    (result & 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFF) |\\n                    ((16319 + msb) << 112);\\n                if (x < 0) result |= 0x80000000000000000000000000000000;\\n\\n                return bytes16(uint128(result));\\n            }\\n        }\\n    }\\n\\n    /**\\n     * Convert quadruple precision number into signed 64.64 bit fixed point\\n     * number.  Revert on overflow.\\n     *\\n     * @param x quadruple precision number\\n     * @return signed 64.64 bit fixed point number\\n     */\\n    function to64x64(bytes16 x) internal pure returns (int128) {\\n        unchecked {\\n            uint256 exponent = (uint128(x) >> 112) & 0x7FFF;\\n\\n            require(exponent <= 16446); // Overflow\\n            if (exponent < 16319) return 0; // Underflow\\n\\n            uint256 result = (uint256(uint128(x)) &\\n                0xFFFFFFFFFFFFFFFFFFFFFFFFFFFF) |\\n                0x10000000000000000000000000000;\\n\\n            if (exponent < 16431) result >>= 16431 - exponent;\\n            else if (exponent > 16431) result <<= exponent - 16431;\\n\\n            if (uint128(x) >= 0x80000000000000000000000000000000) {\\n                // Negative\\n                require(result <= 0x80000000000000000000000000000000);\\n                return -int128(int256(result)); // We rely on overflow behavior here\\n            } else {\\n                require(result <= 0x7FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF);\\n                return int128(int256(result));\\n            }\\n        }\\n    }\\n\\n    /**\\n     * Convert octuple precision number into quadruple precision number.\\n     *\\n     * @param x octuple precision number\\n     * @return quadruple precision number\\n     */\\n    function fromOctuple(bytes32 x) internal pure returns (bytes16) {\\n        unchecked {\\n            bool negative = x &\\n                0x8000000000000000000000000000000000000000000000000000000000000000 >\\n                0;\\n\\n            uint256 exponent = (uint256(x) >> 236) & 0x7FFFF;\\n            uint256 significand = uint256(x) &\\n                0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF;\\n\\n            if (exponent == 0x7FFFF) {\\n                if (significand > 0) return NaN;\\n                else return negative ? NEGATIVE_INFINITY : POSITIVE_INFINITY;\\n            }\\n\\n            if (exponent > 278526)\\n                return negative ? NEGATIVE_INFINITY : POSITIVE_INFINITY;\\n            else if (exponent < 245649)\\n                return negative ? NEGATIVE_ZERO : POSITIVE_ZERO;\\n            else if (exponent < 245761) {\\n                significand =\\n                    (significand |\\n                        0x100000000000000000000000000000000000000000000000000000000000) >>\\n                    (245885 - exponent);\\n                exponent = 0;\\n            } else {\\n                significand >>= 124;\\n                exponent -= 245760;\\n            }\\n\\n            uint128 result = uint128(significand | (exponent << 112));\\n            if (negative) result |= 0x80000000000000000000000000000000;\\n\\n            return bytes16(result);\\n        }\\n    }\\n\\n    /**\\n     * Convert quadruple precision number into octuple precision number.\\n     *\\n     * @param x quadruple precision number\\n     * @return octuple precision number\\n     */\\n    function toOctuple(bytes16 x) internal pure returns (bytes32) {\\n        unchecked {\\n            uint256 exponent = (uint128(x) >> 112) & 0x7FFF;\\n\\n            uint256 result = uint128(x) & 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFF;\\n\\n            if (exponent == 0x7FFF)\\n                exponent = 0x7FFFF; // Infinity or NaN\\n            else if (exponent == 0) {\\n                if (result > 0) {\\n                    uint256 msb = mostSignificantBit(result);\\n                    result =\\n                        (result << (236 - msb)) &\\n                        0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF;\\n                    exponent = 245649 + msb;\\n                }\\n            } else {\\n                result <<= 124;\\n                exponent += 245760;\\n            }\\n\\n            result |= exponent << 236;\\n            if (uint128(x) >= 0x80000000000000000000000000000000)\\n                result |= 0x8000000000000000000000000000000000000000000000000000000000000000;\\n\\n            return bytes32(result);\\n        }\\n    }\\n\\n    /**\\n     * Convert double precision number into quadruple precision number.\\n     *\\n     * @param x double precision number\\n     * @return quadruple precision number\\n     */\\n    function fromDouble(bytes8 x) internal pure returns (bytes16) {\\n        unchecked {\\n            uint256 exponent = (uint64(x) >> 52) & 0x7FF;\\n\\n            uint256 result = uint64(x) & 0xFFFFFFFFFFFFF;\\n\\n            if (exponent == 0x7FF)\\n                exponent = 0x7FFF; // Infinity or NaN\\n            else if (exponent == 0) {\\n                if (result > 0) {\\n                    uint256 msb = mostSignificantBit(result);\\n                    result =\\n                        (result << (112 - msb)) &\\n                        0xFFFFFFFFFFFFFFFFFFFFFFFFFFFF;\\n                    exponent = 15309 + msb;\\n                }\\n            } else {\\n                result <<= 60;\\n                exponent += 15360;\\n            }\\n\\n            result |= exponent << 112;\\n            if (x & 0x8000000000000000 > 0)\\n                result |= 0x80000000000000000000000000000000;\\n\\n            return bytes16(uint128(result));\\n        }\\n    }\\n\\n    /**\\n     * Convert quadruple precision number into double precision number.\\n     *\\n     * @param x quadruple precision number\\n     * @return double precision number\\n     */\\n    function toDouble(bytes16 x) internal pure returns (bytes8) {\\n        unchecked {\\n            bool negative = uint128(x) >= 0x80000000000000000000000000000000;\\n\\n            uint256 exponent = (uint128(x) >> 112) & 0x7FFF;\\n            uint256 significand = uint128(x) & 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFF;\\n\\n            if (exponent == 0x7FFF) {\\n                if (significand > 0) return 0x7FF8000000000000;\\n                // NaN\\n                else\\n                    return\\n                        negative\\n                            ? bytes8(0xFFF0000000000000) // -Infinity\\n                            : bytes8(0x7FF0000000000000); // Infinity\\n            }\\n\\n            if (exponent > 17406)\\n                return\\n                    negative\\n                        ? bytes8(0xFFF0000000000000) // -Infinity\\n                        : bytes8(0x7FF0000000000000);\\n            // Infinity\\n            else if (exponent < 15309)\\n                return\\n                    negative\\n                        ? bytes8(0x8000000000000000) // -0\\n                        : bytes8(0x0000000000000000);\\n            // 0\\n            else if (exponent < 15361) {\\n                significand =\\n                    (significand | 0x10000000000000000000000000000) >>\\n                    (15421 - exponent);\\n                exponent = 0;\\n            } else {\\n                significand >>= 60;\\n                exponent -= 15360;\\n            }\\n\\n            uint64 result = uint64(significand | (exponent << 52));\\n            if (negative) result |= 0x8000000000000000;\\n\\n            return bytes8(result);\\n        }\\n    }\\n\\n    /**\\n     * Test whether given quadruple precision number is NaN.\\n     *\\n     * @param x quadruple precision number\\n     * @return true if x is NaN, false otherwise\\n     */\\n    function isNaN(bytes16 x) internal pure returns (bool) {\\n        unchecked {\\n            return\\n                uint128(x) & 0x7FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF >\\n                0x7FFF0000000000000000000000000000;\\n        }\\n    }\\n\\n    /**\\n     * Test whether given quadruple precision number is positive or negative\\n     * infinity.\\n     *\\n     * @param x quadruple precision number\\n     * @return true if x is positive or negative infinity, false otherwise\\n     */\\n    function isInfinity(bytes16 x) internal pure returns (bool) {\\n        unchecked {\\n            return\\n                uint128(x) & 0x7FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF ==\\n                0x7FFF0000000000000000000000000000;\\n        }\\n    }\\n\\n    /**\\n     * Calculate sign of x, i.e. -1 if x is negative, 0 if x if zero, and 1 if x\\n     * is positive.  Note that sign (-0) is zero.  Revert if x is NaN.\\n     *\\n     * @param x quadruple precision number\\n     * @return sign of x\\n     */\\n    function sign(bytes16 x) internal pure returns (int8) {\\n        unchecked {\\n            uint128 absoluteX = uint128(x) & 0x7FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF;\\n\\n            require(absoluteX <= 0x7FFF0000000000000000000000000000); // Not NaN\\n\\n            if (absoluteX == 0) return 0;\\n            else if (uint128(x) >= 0x80000000000000000000000000000000)\\n                return -1;\\n            else return 1;\\n        }\\n    }\\n\\n    /**\\n     * Calculate sign (x - y).  Revert if either argument is NaN, or both\\n     * arguments are infinities of the same sign.\\n     *\\n     * @param x quadruple precision number\\n     * @param y quadruple precision number\\n     * @return sign (x - y)\\n     */\\n    function cmp(bytes16 x, bytes16 y) internal pure returns (int8) {\\n        unchecked {\\n            uint128 absoluteX = uint128(x) & 0x7FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF;\\n\\n            require(absoluteX <= 0x7FFF0000000000000000000000000000); // Not NaN\\n\\n            uint128 absoluteY = uint128(y) & 0x7FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF;\\n\\n            require(absoluteY <= 0x7FFF0000000000000000000000000000); // Not NaN\\n\\n            // Not infinities of the same sign\\n            require(x != y || absoluteX < 0x7FFF0000000000000000000000000000);\\n\\n            if (x == y) return 0;\\n            else {\\n                bool negativeX = uint128(x) >=\\n                    0x80000000000000000000000000000000;\\n                bool negativeY = uint128(y) >=\\n                    0x80000000000000000000000000000000;\\n\\n                if (negativeX) {\\n                    if (negativeY) return absoluteX > absoluteY ? -1 : int8(1);\\n                    else return -1;\\n                } else {\\n                    if (negativeY) return 1;\\n                    else return absoluteX > absoluteY ? int8(1) : -1;\\n                }\\n            }\\n        }\\n    }\\n\\n    /**\\n     * Test whether x equals y.  NaN, infinity, and -infinity are not equal to\\n     * anything.\\n     *\\n     * @param x quadruple precision number\\n     * @param y quadruple precision number\\n     * @return true if x equals to y, false otherwise\\n     */\\n    function eq(bytes16 x, bytes16 y) internal pure returns (bool) {\\n        unchecked {\\n            if (x == y) {\\n                return\\n                    uint128(x) & 0x7FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF <\\n                    0x7FFF0000000000000000000000000000;\\n            } else return false;\\n        }\\n    }\\n\\n    /**\\n     * Calculate x + y.  Special values behave in the following way:\\n     *\\n     * NaN + x = NaN for any x.\\n     * Infinity + x = Infinity for any finite x.\\n     * -Infinity + x = -Infinity for any finite x.\\n     * Infinity + Infinity = Infinity.\\n     * -Infinity + -Infinity = -Infinity.\\n     * Infinity + -Infinity = -Infinity + Infinity = NaN.\\n     *\\n     * @param x quadruple precision number\\n     * @param y quadruple precision number\\n     * @return quadruple precision number\\n     */\\n    function add(bytes16 x, bytes16 y) internal pure returns (bytes16) {\\n        unchecked {\\n            uint256 xExponent = (uint128(x) >> 112) & 0x7FFF;\\n            uint256 yExponent = (uint128(y) >> 112) & 0x7FFF;\\n\\n            if (xExponent == 0x7FFF) {\\n                if (yExponent == 0x7FFF) {\\n                    if (x == y) return x;\\n                    else return NaN;\\n                } else return x;\\n            } else if (yExponent == 0x7FFF) return y;\\n            else {\\n                bool xSign = uint128(x) >= 0x80000000000000000000000000000000;\\n                uint256 xSignifier = uint128(x) &\\n                    0xFFFFFFFFFFFFFFFFFFFFFFFFFFFF;\\n                if (xExponent == 0) xExponent = 1;\\n                else xSignifier |= 0x10000000000000000000000000000;\\n\\n                bool ySign = uint128(y) >= 0x80000000000000000000000000000000;\\n                uint256 ySignifier = uint128(y) &\\n                    0xFFFFFFFFFFFFFFFFFFFFFFFFFFFF;\\n                if (yExponent == 0) yExponent = 1;\\n                else ySignifier |= 0x10000000000000000000000000000;\\n\\n                if (xSignifier == 0)\\n                    return y == NEGATIVE_ZERO ? POSITIVE_ZERO : y;\\n                else if (ySignifier == 0)\\n                    return x == NEGATIVE_ZERO ? POSITIVE_ZERO : x;\\n                else {\\n                    int256 delta = int256(xExponent) - int256(yExponent);\\n\\n                    if (xSign == ySign) {\\n                        if (delta > 112) return x;\\n                        else if (delta > 0) ySignifier >>= uint256(delta);\\n                        else if (delta < -112) return y;\\n                        else if (delta < 0) {\\n                            xSignifier >>= uint256(-delta);\\n                            xExponent = yExponent;\\n                        }\\n\\n                        xSignifier += ySignifier;\\n\\n                        if (xSignifier >= 0x20000000000000000000000000000) {\\n                            xSignifier >>= 1;\\n                            xExponent += 1;\\n                        }\\n\\n                        if (xExponent == 0x7FFF)\\n                            return\\n                                xSign ? NEGATIVE_INFINITY : POSITIVE_INFINITY;\\n                        else {\\n                            if (xSignifier < 0x10000000000000000000000000000)\\n                                xExponent = 0;\\n                            else xSignifier &= 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFF;\\n\\n                            return\\n                                bytes16(\\n                                    uint128(\\n                                        (\\n                                            xSign\\n                                                ? 0x80000000000000000000000000000000\\n                                                : 0\\n                                        ) |\\n                                            (xExponent << 112) |\\n                                            xSignifier\\n                                    )\\n                                );\\n                        }\\n                    } else {\\n                        if (delta > 0) {\\n                            xSignifier <<= 1;\\n                            xExponent -= 1;\\n                        } else if (delta < 0) {\\n                            ySignifier <<= 1;\\n                            xExponent = yExponent - 1;\\n                        }\\n\\n                        if (delta > 112) ySignifier = 1;\\n                        else if (delta > 1)\\n                            ySignifier =\\n                                ((ySignifier - 1) >> uint256(delta - 1)) +\\n                                1;\\n                        else if (delta < -112) xSignifier = 1;\\n                        else if (delta < -1)\\n                            xSignifier =\\n                                ((xSignifier - 1) >> uint256(-delta - 1)) +\\n                                1;\\n\\n                        if (xSignifier >= ySignifier) xSignifier -= ySignifier;\\n                        else {\\n                            xSignifier = ySignifier - xSignifier;\\n                            xSign = ySign;\\n                        }\\n\\n                        if (xSignifier == 0) return POSITIVE_ZERO;\\n\\n                        uint256 msb = mostSignificantBit(xSignifier);\\n\\n                        if (msb == 113) {\\n                            xSignifier =\\n                                (xSignifier >> 1) &\\n                                0xFFFFFFFFFFFFFFFFFFFFFFFFFFFF;\\n                            xExponent += 1;\\n                        } else if (msb < 112) {\\n                            uint256 shift = 112 - msb;\\n                            if (xExponent > shift) {\\n                                xSignifier =\\n                                    (xSignifier << shift) &\\n                                    0xFFFFFFFFFFFFFFFFFFFFFFFFFFFF;\\n                                xExponent -= shift;\\n                            } else {\\n                                xSignifier <<= xExponent - 1;\\n                                xExponent = 0;\\n                            }\\n                        } else xSignifier &= 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFF;\\n\\n                        if (xExponent == 0x7FFF)\\n                            return\\n                                xSign ? NEGATIVE_INFINITY : POSITIVE_INFINITY;\\n                        else\\n                            return\\n                                bytes16(\\n                                    uint128(\\n                                        (\\n                                            xSign\\n                                                ? 0x80000000000000000000000000000000\\n                                                : 0\\n                                        ) |\\n                                            (xExponent << 112) |\\n                                            xSignifier\\n                                    )\\n                                );\\n                    }\\n                }\\n            }\\n        }\\n    }\\n\\n    /**\\n     * Calculate x - y.  Special values behave in the following way:\\n     *\\n     * NaN - x = NaN for any x.\\n     * Infinity - x = Infinity for any finite x.\\n     * -Infinity - x = -Infinity for any finite x.\\n     * Infinity - -Infinity = Infinity.\\n     * -Infinity - Infinity = -Infinity.\\n     * Infinity - Infinity = -Infinity - -Infinity = NaN.\\n     *\\n     * @param x quadruple precision number\\n     * @param y quadruple precision number\\n     * @return quadruple precision number\\n     */\\n    function sub(bytes16 x, bytes16 y) internal pure returns (bytes16) {\\n        unchecked {\\n            return add(x, y ^ 0x80000000000000000000000000000000);\\n        }\\n    }\\n\\n    /**\\n     * Calculate x * y.  Special values behave in the following way:\\n     *\\n     * NaN * x = NaN for any x.\\n     * Infinity * x = Infinity for any finite positive x.\\n     * Infinity * x = -Infinity for any finite negative x.\\n     * -Infinity * x = -Infinity for any finite positive x.\\n     * -Infinity * x = Infinity for any finite negative x.\\n     * Infinity * 0 = NaN.\\n     * -Infinity * 0 = NaN.\\n     * Infinity * Infinity = Infinity.\\n     * Infinity * -Infinity = -Infinity.\\n     * -Infinity * Infinity = -Infinity.\\n     * -Infinity * -Infinity = Infinity.\\n     *\\n     * @param x quadruple precision number\\n     * @param y quadruple precision number\\n     * @return quadruple precision number\\n     */\\n    function mul(bytes16 x, bytes16 y) internal pure returns (bytes16) {\\n        unchecked {\\n            uint256 xExponent = (uint128(x) >> 112) & 0x7FFF;\\n            uint256 yExponent = (uint128(y) >> 112) & 0x7FFF;\\n\\n            if (xExponent == 0x7FFF) {\\n                if (yExponent == 0x7FFF) {\\n                    if (x == y)\\n                        return x ^ (y & 0x80000000000000000000000000000000);\\n                    else if (x ^ y == 0x80000000000000000000000000000000)\\n                        return x | y;\\n                    else return NaN;\\n                } else {\\n                    if (y & 0x7FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF == 0) return NaN;\\n                    else return x ^ (y & 0x80000000000000000000000000000000);\\n                }\\n            } else if (yExponent == 0x7FFF) {\\n                if (x & 0x7FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF == 0) return NaN;\\n                else return y ^ (x & 0x80000000000000000000000000000000);\\n            } else {\\n                uint256 xSignifier = uint128(x) &\\n                    0xFFFFFFFFFFFFFFFFFFFFFFFFFFFF;\\n                if (xExponent == 0) xExponent = 1;\\n                else xSignifier |= 0x10000000000000000000000000000;\\n\\n                uint256 ySignifier = uint128(y) &\\n                    0xFFFFFFFFFFFFFFFFFFFFFFFFFFFF;\\n                if (yExponent == 0) yExponent = 1;\\n                else ySignifier |= 0x10000000000000000000000000000;\\n\\n                xSignifier *= ySignifier;\\n                if (xSignifier == 0)\\n                    return\\n                        (x ^ y) & 0x80000000000000000000000000000000 > 0\\n                            ? NEGATIVE_ZERO\\n                            : POSITIVE_ZERO;\\n\\n                xExponent += yExponent;\\n\\n                uint256 msb = xSignifier >=\\n                    0x200000000000000000000000000000000000000000000000000000000\\n                    ? 225\\n                    : xSignifier >=\\n                        0x100000000000000000000000000000000000000000000000000000000\\n                    ? 224\\n                    : mostSignificantBit(xSignifier);\\n\\n                if (xExponent + msb < 16496) {\\n                    // Underflow\\n                    xExponent = 0;\\n                    xSignifier = 0;\\n                } else if (xExponent + msb < 16608) {\\n                    // Subnormal\\n                    if (xExponent < 16496) xSignifier >>= 16496 - xExponent;\\n                    else if (xExponent > 16496)\\n                        xSignifier <<= xExponent - 16496;\\n                    xExponent = 0;\\n                } else if (xExponent + msb > 49373) {\\n                    xExponent = 0x7FFF;\\n                    xSignifier = 0;\\n                } else {\\n                    if (msb > 112) xSignifier >>= msb - 112;\\n                    else if (msb < 112) xSignifier <<= 112 - msb;\\n\\n                    xSignifier &= 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFF;\\n\\n                    xExponent = xExponent + msb - 16607;\\n                }\\n\\n                return\\n                    bytes16(\\n                        uint128(\\n                            uint128(\\n                                (x ^ y) & 0x80000000000000000000000000000000\\n                            ) |\\n                                (xExponent << 112) |\\n                                xSignifier\\n                        )\\n                    );\\n            }\\n        }\\n    }\\n\\n    /**\\n     * Calculate x / y.  Special values behave in the following way:\\n     *\\n     * NaN / x = NaN for any x.\\n     * x / NaN = NaN for any x.\\n     * Infinity / x = Infinity for any finite non-negative x.\\n     * Infinity / x = -Infinity for any finite negative x including -0.\\n     * -Infinity / x = -Infinity for any finite non-negative x.\\n     * -Infinity / x = Infinity for any finite negative x including -0.\\n     * x / Infinity = 0 for any finite non-negative x.\\n     * x / -Infinity = -0 for any finite non-negative x.\\n     * x / Infinity = -0 for any finite non-negative x including -0.\\n     * x / -Infinity = 0 for any finite non-negative x including -0.\\n     *\\n     * Infinity / Infinity = NaN.\\n     * Infinity / -Infinity = -NaN.\\n     * -Infinity / Infinity = -NaN.\\n     * -Infinity / -Infinity = NaN.\\n     *\\n     * Division by zero behaves in the following way:\\n     *\\n     * x / 0 = Infinity for any finite positive x.\\n     * x / -0 = -Infinity for any finite positive x.\\n     * x / 0 = -Infinity for any finite negative x.\\n     * x / -0 = Infinity for any finite negative x.\\n     * 0 / 0 = NaN.\\n     * 0 / -0 = NaN.\\n     * -0 / 0 = NaN.\\n     * -0 / -0 = NaN.\\n     *\\n     * @param x quadruple precision number\\n     * @param y quadruple precision number\\n     * @return quadruple precision number\\n     */\\n    function div(bytes16 x, bytes16 y) internal pure returns (bytes16) {\\n        unchecked {\\n            uint256 xExponent = (uint128(x) >> 112) & 0x7FFF;\\n            uint256 yExponent = (uint128(y) >> 112) & 0x7FFF;\\n\\n            if (xExponent == 0x7FFF) {\\n                if (yExponent == 0x7FFF) return NaN;\\n                else return x ^ (y & 0x80000000000000000000000000000000);\\n            } else if (yExponent == 0x7FFF) {\\n                if (y & 0x0000FFFFFFFFFFFFFFFFFFFFFFFFFFFF != 0) return NaN;\\n                else\\n                    return\\n                        POSITIVE_ZERO |\\n                        ((x ^ y) & 0x80000000000000000000000000000000);\\n            } else if (y & 0x7FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF == 0) {\\n                if (x & 0x7FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF == 0) return NaN;\\n                else\\n                    return\\n                        POSITIVE_INFINITY |\\n                        ((x ^ y) & 0x80000000000000000000000000000000);\\n            } else {\\n                uint256 ySignifier = uint128(y) &\\n                    0xFFFFFFFFFFFFFFFFFFFFFFFFFFFF;\\n                if (yExponent == 0) yExponent = 1;\\n                else ySignifier |= 0x10000000000000000000000000000;\\n\\n                uint256 xSignifier = uint128(x) &\\n                    0xFFFFFFFFFFFFFFFFFFFFFFFFFFFF;\\n                if (xExponent == 0) {\\n                    if (xSignifier != 0) {\\n                        uint shift = 226 - mostSignificantBit(xSignifier);\\n\\n                        xSignifier <<= shift;\\n\\n                        xExponent = 1;\\n                        yExponent += shift - 114;\\n                    }\\n                } else {\\n                    xSignifier =\\n                        (xSignifier | 0x10000000000000000000000000000) <<\\n                        114;\\n                }\\n\\n                xSignifier = xSignifier / ySignifier;\\n                if (xSignifier == 0)\\n                    return\\n                        (x ^ y) & 0x80000000000000000000000000000000 > 0\\n                            ? NEGATIVE_ZERO\\n                            : POSITIVE_ZERO;\\n\\n                assert(xSignifier >= 0x1000000000000000000000000000);\\n\\n                uint256 msb = xSignifier >= 0x80000000000000000000000000000\\n                    ? mostSignificantBit(xSignifier)\\n                    : xSignifier >= 0x40000000000000000000000000000\\n                    ? 114\\n                    : xSignifier >= 0x20000000000000000000000000000\\n                    ? 113\\n                    : 112;\\n\\n                if (xExponent + msb > yExponent + 16497) {\\n                    // Overflow\\n                    xExponent = 0x7FFF;\\n                    xSignifier = 0;\\n                } else if (xExponent + msb + 16380 < yExponent) {\\n                    // Underflow\\n                    xExponent = 0;\\n                    xSignifier = 0;\\n                } else if (xExponent + msb + 16268 < yExponent) {\\n                    // Subnormal\\n                    if (xExponent + 16380 > yExponent)\\n                        xSignifier <<= xExponent + 16380 - yExponent;\\n                    else if (xExponent + 16380 < yExponent)\\n                        xSignifier >>= yExponent - xExponent - 16380;\\n\\n                    xExponent = 0;\\n                } else {\\n                    // Normal\\n                    if (msb > 112) xSignifier >>= msb - 112;\\n\\n                    xSignifier &= 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFF;\\n\\n                    xExponent = xExponent + msb + 16269 - yExponent;\\n                }\\n\\n                return\\n                    bytes16(\\n                        uint128(\\n                            uint128(\\n                                (x ^ y) & 0x80000000000000000000000000000000\\n                            ) |\\n                                (xExponent << 112) |\\n                                xSignifier\\n                        )\\n                    );\\n            }\\n        }\\n    }\\n\\n    /**\\n     * Calculate -x.\\n     *\\n     * @param x quadruple precision number\\n     * @return quadruple precision number\\n     */\\n    function neg(bytes16 x) internal pure returns (bytes16) {\\n        unchecked {\\n            return x ^ 0x80000000000000000000000000000000;\\n        }\\n    }\\n\\n    /**\\n     * Calculate |x|.\\n     *\\n     * @param x quadruple precision number\\n     * @return quadruple precision number\\n     */\\n    function abs(bytes16 x) internal pure returns (bytes16) {\\n        unchecked {\\n            return x & 0x7FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF;\\n        }\\n    }\\n\\n    /**\\n     * Calculate square root of x.  Return NaN on negative x excluding -0.\\n     *\\n     * @param x quadruple precision number\\n     * @return quadruple precision number\\n     */\\n    function sqrt(bytes16 x) internal pure returns (bytes16) {\\n        unchecked {\\n            if (uint128(x) > 0x80000000000000000000000000000000) return NaN;\\n            else {\\n                uint256 xExponent = (uint128(x) >> 112) & 0x7FFF;\\n                if (xExponent == 0x7FFF) return x;\\n                else {\\n                    uint256 xSignifier = uint128(x) &\\n                        0xFFFFFFFFFFFFFFFFFFFFFFFFFFFF;\\n                    if (xExponent == 0) xExponent = 1;\\n                    else xSignifier |= 0x10000000000000000000000000000;\\n\\n                    if (xSignifier == 0) return POSITIVE_ZERO;\\n\\n                    bool oddExponent = xExponent & 0x1 == 0;\\n                    xExponent = (xExponent + 16383) >> 1;\\n\\n                    if (oddExponent) {\\n                        if (xSignifier >= 0x10000000000000000000000000000)\\n                            xSignifier <<= 113;\\n                        else {\\n                            uint256 msb = mostSignificantBit(xSignifier);\\n                            uint256 shift = (226 - msb) & 0xFE;\\n                            xSignifier <<= shift;\\n                            xExponent -= (shift - 112) >> 1;\\n                        }\\n                    } else {\\n                        if (xSignifier >= 0x10000000000000000000000000000)\\n                            xSignifier <<= 112;\\n                        else {\\n                            uint256 msb = mostSignificantBit(xSignifier);\\n                            uint256 shift = (225 - msb) & 0xFE;\\n                            xSignifier <<= shift;\\n                            xExponent -= (shift - 112) >> 1;\\n                        }\\n                    }\\n\\n                    uint256 r = 0x10000000000000000000000000000;\\n                    r = (r + xSignifier / r) >> 1;\\n                    r = (r + xSignifier / r) >> 1;\\n                    r = (r + xSignifier / r) >> 1;\\n                    r = (r + xSignifier / r) >> 1;\\n                    r = (r + xSignifier / r) >> 1;\\n                    r = (r + xSignifier / r) >> 1;\\n                    r = (r + xSignifier / r) >> 1; // Seven iterations should be enough\\n                    uint256 r1 = xSignifier / r;\\n                    if (r1 < r) r = r1;\\n\\n                    return\\n                        bytes16(\\n                            uint128(\\n                                (xExponent << 112) |\\n                                    (r & 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFF)\\n                            )\\n                        );\\n                }\\n            }\\n        }\\n    }\\n\\n    /**\\n     * Calculate binary logarithm of x.  Return NaN on negative x excluding -0.\\n     *\\n     * @param x quadruple precision number\\n     * @return quadruple precision number\\n     */\\n    function log_2(bytes16 x) internal pure returns (bytes16) {\\n        unchecked {\\n            if (uint128(x) > 0x80000000000000000000000000000000) return NaN;\\n            else if (x == 0x3FFF0000000000000000000000000000)\\n                return POSITIVE_ZERO;\\n            else {\\n                uint256 xExponent = (uint128(x) >> 112) & 0x7FFF;\\n                if (xExponent == 0x7FFF) return x;\\n                else {\\n                    uint256 xSignifier = uint128(x) &\\n                        0xFFFFFFFFFFFFFFFFFFFFFFFFFFFF;\\n                    if (xExponent == 0) xExponent = 1;\\n                    else xSignifier |= 0x10000000000000000000000000000;\\n\\n                    if (xSignifier == 0) return NEGATIVE_INFINITY;\\n\\n                    bool resultNegative;\\n                    uint256 resultExponent = 16495;\\n                    uint256 resultSignifier;\\n\\n                    if (xExponent >= 0x3FFF) {\\n                        resultNegative = false;\\n                        resultSignifier = xExponent - 0x3FFF;\\n                        xSignifier <<= 15;\\n                    } else {\\n                        resultNegative = true;\\n                        if (xSignifier >= 0x10000000000000000000000000000) {\\n                            resultSignifier = 0x3FFE - xExponent;\\n                            xSignifier <<= 15;\\n                        } else {\\n                            uint256 msb = mostSignificantBit(xSignifier);\\n                            resultSignifier = 16493 - msb;\\n                            xSignifier <<= 127 - msb;\\n                        }\\n                    }\\n\\n                    if (xSignifier == 0x80000000000000000000000000000000) {\\n                        if (resultNegative) resultSignifier += 1;\\n                        uint256 shift = 112 -\\n                            mostSignificantBit(resultSignifier);\\n                        resultSignifier <<= shift;\\n                        resultExponent -= shift;\\n                    } else {\\n                        uint256 bb = resultNegative ? 1 : 0;\\n                        while (\\n                            resultSignifier < 0x10000000000000000000000000000\\n                        ) {\\n                            resultSignifier <<= 1;\\n                            resultExponent -= 1;\\n\\n                            xSignifier *= xSignifier;\\n                            uint256 b = xSignifier >> 255;\\n                            resultSignifier += b ^ bb;\\n                            xSignifier >>= 127 + b;\\n                        }\\n                    }\\n\\n                    return\\n                        bytes16(\\n                            uint128(\\n                                (\\n                                    resultNegative\\n                                        ? 0x80000000000000000000000000000000\\n                                        : 0\\n                                ) |\\n                                    (resultExponent << 112) |\\n                                    (resultSignifier &\\n                                        0xFFFFFFFFFFFFFFFFFFFFFFFFFFFF)\\n                            )\\n                        );\\n                }\\n            }\\n        }\\n    }\\n\\n    /**\\n     * Calculate natural logarithm of x.  Return NaN on negative x excluding -0.\\n     *\\n     * @param x quadruple precision number\\n     * @return quadruple precision number\\n     */\\n    function ln(bytes16 x) internal pure returns (bytes16) {\\n        unchecked {\\n            return mul(log_2(x), 0x3FFE62E42FEFA39EF35793C7673007E5);\\n        }\\n    }\\n\\n    /**\\n     * Calculate 2^x.\\n     *\\n     * @param x quadruple precision number\\n     * @return quadruple precision number\\n     */\\n    function pow_2(bytes16 x) internal pure returns (bytes16) {\\n        unchecked {\\n            bool xNegative = uint128(x) > 0x80000000000000000000000000000000;\\n            uint256 xExponent = (uint128(x) >> 112) & 0x7FFF;\\n            uint256 xSignifier = uint128(x) & 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFF;\\n\\n            if (xExponent == 0x7FFF && xSignifier != 0) return NaN;\\n            else if (xExponent > 16397)\\n                return xNegative ? POSITIVE_ZERO : POSITIVE_INFINITY;\\n            else if (xExponent < 16255)\\n                return 0x3FFF0000000000000000000000000000;\\n            else {\\n                if (xExponent == 0) xExponent = 1;\\n                else xSignifier |= 0x10000000000000000000000000000;\\n\\n                if (xExponent > 16367) xSignifier <<= xExponent - 16367;\\n                else if (xExponent < 16367) xSignifier >>= 16367 - xExponent;\\n\\n                if (\\n                    xNegative &&\\n                    xSignifier > 0x406E00000000000000000000000000000000\\n                ) return POSITIVE_ZERO;\\n\\n                if (\\n                    !xNegative &&\\n                    xSignifier > 0x3FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF\\n                ) return POSITIVE_INFINITY;\\n\\n                uint256 resultExponent = xSignifier >> 128;\\n                xSignifier &= 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF;\\n                if (xNegative && xSignifier != 0) {\\n                    xSignifier = ~xSignifier;\\n                    resultExponent += 1;\\n                }\\n\\n                uint256 resultSignifier = 0x80000000000000000000000000000000;\\n                if (xSignifier & 0x80000000000000000000000000000000 > 0)\\n                    resultSignifier =\\n                        (resultSignifier *\\n                            0x16A09E667F3BCC908B2FB1366EA957D3E) >>\\n                        128;\\n                if (xSignifier & 0x40000000000000000000000000000000 > 0)\\n                    resultSignifier =\\n                        (resultSignifier *\\n                            0x1306FE0A31B7152DE8D5A46305C85EDEC) >>\\n                        128;\\n                if (xSignifier & 0x20000000000000000000000000000000 > 0)\\n                    resultSignifier =\\n                        (resultSignifier *\\n                            0x1172B83C7D517ADCDF7C8C50EB14A791F) >>\\n                        128;\\n                if (xSignifier & 0x10000000000000000000000000000000 > 0)\\n                    resultSignifier =\\n                        (resultSignifier *\\n                            0x10B5586CF9890F6298B92B71842A98363) >>\\n                        128;\\n                if (xSignifier & 0x8000000000000000000000000000000 > 0)\\n                    resultSignifier =\\n                        (resultSignifier *\\n                            0x1059B0D31585743AE7C548EB68CA417FD) >>\\n                        128;\\n                if (xSignifier & 0x4000000000000000000000000000000 > 0)\\n                    resultSignifier =\\n                        (resultSignifier *\\n                            0x102C9A3E778060EE6F7CACA4F7A29BDE8) >>\\n                        128;\\n                if (xSignifier & 0x2000000000000000000000000000000 > 0)\\n                    resultSignifier =\\n                        (resultSignifier *\\n                            0x10163DA9FB33356D84A66AE336DCDFA3F) >>\\n                        128;\\n                if (xSignifier & 0x1000000000000000000000000000000 > 0)\\n                    resultSignifier =\\n                        (resultSignifier *\\n                            0x100B1AFA5ABCBED6129AB13EC11DC9543) >>\\n                        128;\\n                if (xSignifier & 0x800000000000000000000000000000 > 0)\\n                    resultSignifier =\\n                        (resultSignifier *\\n                            0x10058C86DA1C09EA1FF19D294CF2F679B) >>\\n                        128;\\n                if (xSignifier & 0x400000000000000000000000000000 > 0)\\n                    resultSignifier =\\n                        (resultSignifier *\\n                            0x1002C605E2E8CEC506D21BFC89A23A00F) >>\\n                        128;\\n                if (xSignifier & 0x200000000000000000000000000000 > 0)\\n                    resultSignifier =\\n                        (resultSignifier *\\n                            0x100162F3904051FA128BCA9C55C31E5DF) >>\\n                        128;\\n                if (xSignifier & 0x100000000000000000000000000000 > 0)\\n                    resultSignifier =\\n                        (resultSignifier *\\n                            0x1000B175EFFDC76BA38E31671CA939725) >>\\n                        128;\\n                if (xSignifier & 0x80000000000000000000000000000 > 0)\\n                    resultSignifier =\\n                        (resultSignifier *\\n                            0x100058BA01FB9F96D6CACD4B180917C3D) >>\\n                        128;\\n                if (xSignifier & 0x40000000000000000000000000000 > 0)\\n                    resultSignifier =\\n                        (resultSignifier *\\n                            0x10002C5CC37DA9491D0985C348C68E7B3) >>\\n                        128;\\n                if (xSignifier & 0x20000000000000000000000000000 > 0)\\n                    resultSignifier =\\n                        (resultSignifier *\\n                            0x1000162E525EE054754457D5995292026) >>\\n                        128;\\n                if (xSignifier & 0x10000000000000000000000000000 > 0)\\n                    resultSignifier =\\n                        (resultSignifier *\\n                            0x10000B17255775C040618BF4A4ADE83FC) >>\\n                        128;\\n                if (xSignifier & 0x8000000000000000000000000000 > 0)\\n                    resultSignifier =\\n                        (resultSignifier *\\n                            0x1000058B91B5BC9AE2EED81E9B7D4CFAB) >>\\n                        128;\\n                if (xSignifier & 0x4000000000000000000000000000 > 0)\\n                    resultSignifier =\\n                        (resultSignifier *\\n                            0x100002C5C89D5EC6CA4D7C8ACC017B7C9) >>\\n                        128;\\n                if (xSignifier & 0x2000000000000000000000000000 > 0)\\n                    resultSignifier =\\n                        (resultSignifier *\\n                            0x10000162E43F4F831060E02D839A9D16D) >>\\n                        128;\\n                if (xSignifier & 0x1000000000000000000000000000 > 0)\\n                    resultSignifier =\\n                        (resultSignifier *\\n                            0x100000B1721BCFC99D9F890EA06911763) >>\\n                        128;\\n                if (xSignifier & 0x800000000000000000000000000 > 0)\\n                    resultSignifier =\\n                        (resultSignifier *\\n                            0x10000058B90CF1E6D97F9CA14DBCC1628) >>\\n                        128;\\n                if (xSignifier & 0x400000000000000000000000000 > 0)\\n                    resultSignifier =\\n                        (resultSignifier *\\n                            0x1000002C5C863B73F016468F6BAC5CA2B) >>\\n                        128;\\n                if (xSignifier & 0x200000000000000000000000000 > 0)\\n                    resultSignifier =\\n                        (resultSignifier *\\n                            0x100000162E430E5A18F6119E3C02282A5) >>\\n                        128;\\n                if (xSignifier & 0x100000000000000000000000000 > 0)\\n                    resultSignifier =\\n                        (resultSignifier *\\n                            0x1000000B1721835514B86E6D96EFD1BFE) >>\\n                        128;\\n                if (xSignifier & 0x80000000000000000000000000 > 0)\\n                    resultSignifier =\\n                        (resultSignifier *\\n                            0x100000058B90C0B48C6BE5DF846C5B2EF) >>\\n                        128;\\n                if (xSignifier & 0x40000000000000000000000000 > 0)\\n                    resultSignifier =\\n                        (resultSignifier *\\n                            0x10000002C5C8601CC6B9E94213C72737A) >>\\n                        128;\\n                if (xSignifier & 0x20000000000000000000000000 > 0)\\n                    resultSignifier =\\n                        (resultSignifier *\\n                            0x1000000162E42FFF037DF38AA2B219F06) >>\\n                        128;\\n                if (xSignifier & 0x10000000000000000000000000 > 0)\\n                    resultSignifier =\\n                        (resultSignifier *\\n                            0x10000000B17217FBA9C739AA5819F44F9) >>\\n                        128;\\n                if (xSignifier & 0x8000000000000000000000000 > 0)\\n                    resultSignifier =\\n                        (resultSignifier *\\n                            0x1000000058B90BFCDEE5ACD3C1CEDC823) >>\\n                        128;\\n                if (xSignifier & 0x4000000000000000000000000 > 0)\\n                    resultSignifier =\\n                        (resultSignifier *\\n                            0x100000002C5C85FE31F35A6A30DA1BE50) >>\\n                        128;\\n                if (xSignifier & 0x2000000000000000000000000 > 0)\\n                    resultSignifier =\\n                        (resultSignifier *\\n                            0x10000000162E42FF0999CE3541B9FFFCF) >>\\n                        128;\\n                if (xSignifier & 0x1000000000000000000000000 > 0)\\n                    resultSignifier =\\n                        (resultSignifier *\\n                            0x100000000B17217F80F4EF5AADDA45554) >>\\n                        128;\\n                if (xSignifier & 0x800000000000000000000000 > 0)\\n                    resultSignifier =\\n                        (resultSignifier *\\n                            0x10000000058B90BFBF8479BD5A81B51AD) >>\\n                        128;\\n                if (xSignifier & 0x400000000000000000000000 > 0)\\n                    resultSignifier =\\n                        (resultSignifier *\\n                            0x1000000002C5C85FDF84BD62AE30A74CC) >>\\n                        128;\\n                if (xSignifier & 0x200000000000000000000000 > 0)\\n                    resultSignifier =\\n                        (resultSignifier *\\n                            0x100000000162E42FEFB2FED257559BDAA) >>\\n                        128;\\n                if (xSignifier & 0x100000000000000000000000 > 0)\\n                    resultSignifier =\\n                        (resultSignifier *\\n                            0x1000000000B17217F7D5A7716BBA4A9AE) >>\\n                        128;\\n                if (xSignifier & 0x80000000000000000000000 > 0)\\n                    resultSignifier =\\n                        (resultSignifier *\\n                            0x100000000058B90BFBE9DDBAC5E109CCE) >>\\n                        128;\\n                if (xSignifier & 0x40000000000000000000000 > 0)\\n                    resultSignifier =\\n                        (resultSignifier *\\n                            0x10000000002C5C85FDF4B15DE6F17EB0D) >>\\n                        128;\\n                if (xSignifier & 0x20000000000000000000000 > 0)\\n                    resultSignifier =\\n                        (resultSignifier *\\n                            0x1000000000162E42FEFA494F1478FDE05) >>\\n                        128;\\n                if (xSignifier & 0x10000000000000000000000 > 0)\\n                    resultSignifier =\\n                        (resultSignifier *\\n                            0x10000000000B17217F7D20CF927C8E94C) >>\\n                        128;\\n                if (xSignifier & 0x8000000000000000000000 > 0)\\n                    resultSignifier =\\n                        (resultSignifier *\\n                            0x1000000000058B90BFBE8F71CB4E4B33D) >>\\n                        128;\\n                if (xSignifier & 0x4000000000000000000000 > 0)\\n                    resultSignifier =\\n                        (resultSignifier *\\n                            0x100000000002C5C85FDF477B662B26945) >>\\n                        128;\\n                if (xSignifier & 0x2000000000000000000000 > 0)\\n                    resultSignifier =\\n                        (resultSignifier *\\n                            0x10000000000162E42FEFA3AE53369388C) >>\\n                        128;\\n                if (xSignifier & 0x1000000000000000000000 > 0)\\n                    resultSignifier =\\n                        (resultSignifier *\\n                            0x100000000000B17217F7D1D351A389D40) >>\\n                        128;\\n                if (xSignifier & 0x800000000000000000000 > 0)\\n                    resultSignifier =\\n                        (resultSignifier *\\n                            0x10000000000058B90BFBE8E8B2D3D4EDE) >>\\n                        128;\\n                if (xSignifier & 0x400000000000000000000 > 0)\\n                    resultSignifier =\\n                        (resultSignifier *\\n                            0x1000000000002C5C85FDF4741BEA6E77E) >>\\n                        128;\\n                if (xSignifier & 0x200000000000000000000 > 0)\\n                    resultSignifier =\\n                        (resultSignifier *\\n                            0x100000000000162E42FEFA39FE95583C2) >>\\n                        128;\\n                if (xSignifier & 0x100000000000000000000 > 0)\\n                    resultSignifier =\\n                        (resultSignifier *\\n                            0x1000000000000B17217F7D1CFB72B45E1) >>\\n                        128;\\n                if (xSignifier & 0x80000000000000000000 > 0)\\n                    resultSignifier =\\n                        (resultSignifier *\\n                            0x100000000000058B90BFBE8E7CC35C3F0) >>\\n                        128;\\n                if (xSignifier & 0x40000000000000000000 > 0)\\n                    resultSignifier =\\n                        (resultSignifier *\\n                            0x10000000000002C5C85FDF473E242EA38) >>\\n                        128;\\n                if (xSignifier & 0x20000000000000000000 > 0)\\n                    resultSignifier =\\n                        (resultSignifier *\\n                            0x1000000000000162E42FEFA39F02B772C) >>\\n                        128;\\n                if (xSignifier & 0x10000000000000000000 > 0)\\n                    resultSignifier =\\n                        (resultSignifier *\\n                            0x10000000000000B17217F7D1CF7D83C1A) >>\\n                        128;\\n                if (xSignifier & 0x8000000000000000000 > 0)\\n                    resultSignifier =\\n                        (resultSignifier *\\n                            0x1000000000000058B90BFBE8E7BDCBE2E) >>\\n                        128;\\n                if (xSignifier & 0x4000000000000000000 > 0)\\n                    resultSignifier =\\n                        (resultSignifier *\\n                            0x100000000000002C5C85FDF473DEA871F) >>\\n                        128;\\n                if (xSignifier & 0x2000000000000000000 > 0)\\n                    resultSignifier =\\n                        (resultSignifier *\\n                            0x10000000000000162E42FEFA39EF44D91) >>\\n                        128;\\n                if (xSignifier & 0x1000000000000000000 > 0)\\n                    resultSignifier =\\n                        (resultSignifier *\\n                            0x100000000000000B17217F7D1CF79E949) >>\\n                        128;\\n                if (xSignifier & 0x800000000000000000 > 0)\\n                    resultSignifier =\\n                        (resultSignifier *\\n                            0x10000000000000058B90BFBE8E7BCE544) >>\\n                        128;\\n                if (xSignifier & 0x400000000000000000 > 0)\\n                    resultSignifier =\\n                        (resultSignifier *\\n                            0x1000000000000002C5C85FDF473DE6ECA) >>\\n                        128;\\n                if (xSignifier & 0x200000000000000000 > 0)\\n                    resultSignifier =\\n                        (resultSignifier *\\n                            0x100000000000000162E42FEFA39EF366F) >>\\n                        128;\\n                if (xSignifier & 0x100000000000000000 > 0)\\n                    resultSignifier =\\n                        (resultSignifier *\\n                            0x1000000000000000B17217F7D1CF79AFA) >>\\n                        128;\\n                if (xSignifier & 0x80000000000000000 > 0)\\n                    resultSignifier =\\n                        (resultSignifier *\\n                            0x100000000000000058B90BFBE8E7BCD6D) >>\\n                        128;\\n                if (xSignifier & 0x40000000000000000 > 0)\\n                    resultSignifier =\\n                        (resultSignifier *\\n                            0x10000000000000002C5C85FDF473DE6B2) >>\\n                        128;\\n                if (xSignifier & 0x20000000000000000 > 0)\\n                    resultSignifier =\\n                        (resultSignifier *\\n                            0x1000000000000000162E42FEFA39EF358) >>\\n                        128;\\n                if (xSignifier & 0x10000000000000000 > 0)\\n                    resultSignifier =\\n                        (resultSignifier *\\n                            0x10000000000000000B17217F7D1CF79AB) >>\\n                        128;\\n                if (xSignifier & 0x8000000000000000 > 0)\\n                    resultSignifier =\\n                        (resultSignifier *\\n                            0x1000000000000000058B90BFBE8E7BCD5) >>\\n                        128;\\n                if (xSignifier & 0x4000000000000000 > 0)\\n                    resultSignifier =\\n                        (resultSignifier *\\n                            0x100000000000000002C5C85FDF473DE6A) >>\\n                        128;\\n                if (xSignifier & 0x2000000000000000 > 0)\\n                    resultSignifier =\\n                        (resultSignifier *\\n                            0x10000000000000000162E42FEFA39EF34) >>\\n                        128;\\n                if (xSignifier & 0x1000000000000000 > 0)\\n                    resultSignifier =\\n                        (resultSignifier *\\n                            0x100000000000000000B17217F7D1CF799) >>\\n                        128;\\n                if (xSignifier & 0x800000000000000 > 0)\\n                    resultSignifier =\\n                        (resultSignifier *\\n                            0x10000000000000000058B90BFBE8E7BCC) >>\\n                        128;\\n                if (xSignifier & 0x400000000000000 > 0)\\n                    resultSignifier =\\n                        (resultSignifier *\\n                            0x1000000000000000002C5C85FDF473DE5) >>\\n                        128;\\n                if (xSignifier & 0x200000000000000 > 0)\\n                    resultSignifier =\\n                        (resultSignifier *\\n                            0x100000000000000000162E42FEFA39EF2) >>\\n                        128;\\n                if (xSignifier & 0x100000000000000 > 0)\\n                    resultSignifier =\\n                        (resultSignifier *\\n                            0x1000000000000000000B17217F7D1CF78) >>\\n                        128;\\n                if (xSignifier & 0x80000000000000 > 0)\\n                    resultSignifier =\\n                        (resultSignifier *\\n                            0x100000000000000000058B90BFBE8E7BB) >>\\n                        128;\\n                if (xSignifier & 0x40000000000000 > 0)\\n                    resultSignifier =\\n                        (resultSignifier *\\n                            0x10000000000000000002C5C85FDF473DD) >>\\n                        128;\\n                if (xSignifier & 0x20000000000000 > 0)\\n                    resultSignifier =\\n                        (resultSignifier *\\n                            0x1000000000000000000162E42FEFA39EE) >>\\n                        128;\\n                if (xSignifier & 0x10000000000000 > 0)\\n                    resultSignifier =\\n                        (resultSignifier *\\n                            0x10000000000000000000B17217F7D1CF6) >>\\n                        128;\\n                if (xSignifier & 0x8000000000000 > 0)\\n                    resultSignifier =\\n                        (resultSignifier *\\n                            0x1000000000000000000058B90BFBE8E7A) >>\\n                        128;\\n                if (xSignifier & 0x4000000000000 > 0)\\n                    resultSignifier =\\n                        (resultSignifier *\\n                            0x100000000000000000002C5C85FDF473C) >>\\n                        128;\\n                if (xSignifier & 0x2000000000000 > 0)\\n                    resultSignifier =\\n                        (resultSignifier *\\n                            0x10000000000000000000162E42FEFA39D) >>\\n                        128;\\n                if (xSignifier & 0x1000000000000 > 0)\\n                    resultSignifier =\\n                        (resultSignifier *\\n                            0x100000000000000000000B17217F7D1CE) >>\\n                        128;\\n                if (xSignifier & 0x800000000000 > 0)\\n                    resultSignifier =\\n                        (resultSignifier *\\n                            0x10000000000000000000058B90BFBE8E6) >>\\n                        128;\\n                if (xSignifier & 0x400000000000 > 0)\\n                    resultSignifier =\\n                        (resultSignifier *\\n                            0x1000000000000000000002C5C85FDF472) >>\\n                        128;\\n                if (xSignifier & 0x200000000000 > 0)\\n                    resultSignifier =\\n                        (resultSignifier *\\n                            0x100000000000000000000162E42FEFA38) >>\\n                        128;\\n                if (xSignifier & 0x100000000000 > 0)\\n                    resultSignifier =\\n                        (resultSignifier *\\n                            0x1000000000000000000000B17217F7D1B) >>\\n                        128;\\n                if (xSignifier & 0x80000000000 > 0)\\n                    resultSignifier =\\n                        (resultSignifier *\\n                            0x100000000000000000000058B90BFBE8D) >>\\n                        128;\\n                if (xSignifier & 0x40000000000 > 0)\\n                    resultSignifier =\\n                        (resultSignifier *\\n                            0x10000000000000000000002C5C85FDF46) >>\\n                        128;\\n                if (xSignifier & 0x20000000000 > 0)\\n                    resultSignifier =\\n                        (resultSignifier *\\n                            0x1000000000000000000000162E42FEFA2) >>\\n                        128;\\n                if (xSignifier & 0x10000000000 > 0)\\n                    resultSignifier =\\n                        (resultSignifier *\\n                            0x10000000000000000000000B17217F7D0) >>\\n                        128;\\n                if (xSignifier & 0x8000000000 > 0)\\n                    resultSignifier =\\n                        (resultSignifier *\\n                            0x1000000000000000000000058B90BFBE7) >>\\n                        128;\\n                if (xSignifier & 0x4000000000 > 0)\\n                    resultSignifier =\\n                        (resultSignifier *\\n                            0x100000000000000000000002C5C85FDF3) >>\\n                        128;\\n                if (xSignifier & 0x2000000000 > 0)\\n                    resultSignifier =\\n                        (resultSignifier *\\n                            0x10000000000000000000000162E42FEF9) >>\\n                        128;\\n                if (xSignifier & 0x1000000000 > 0)\\n                    resultSignifier =\\n                        (resultSignifier *\\n                            0x100000000000000000000000B17217F7C) >>\\n                        128;\\n                if (xSignifier & 0x800000000 > 0)\\n                    resultSignifier =\\n                        (resultSignifier *\\n                            0x10000000000000000000000058B90BFBD) >>\\n                        128;\\n                if (xSignifier & 0x400000000 > 0)\\n                    resultSignifier =\\n                        (resultSignifier *\\n                            0x1000000000000000000000002C5C85FDE) >>\\n                        128;\\n                if (xSignifier & 0x200000000 > 0)\\n                    resultSignifier =\\n                        (resultSignifier *\\n                            0x100000000000000000000000162E42FEE) >>\\n                        128;\\n                if (xSignifier & 0x100000000 > 0)\\n                    resultSignifier =\\n                        (resultSignifier *\\n                            0x1000000000000000000000000B17217F6) >>\\n                        128;\\n                if (xSignifier & 0x80000000 > 0)\\n                    resultSignifier =\\n                        (resultSignifier *\\n                            0x100000000000000000000000058B90BFA) >>\\n                        128;\\n                if (xSignifier & 0x40000000 > 0)\\n                    resultSignifier =\\n                        (resultSignifier *\\n                            0x10000000000000000000000002C5C85FC) >>\\n                        128;\\n                if (xSignifier & 0x20000000 > 0)\\n                    resultSignifier =\\n                        (resultSignifier *\\n                            0x1000000000000000000000000162E42FD) >>\\n                        128;\\n                if (xSignifier & 0x10000000 > 0)\\n                    resultSignifier =\\n                        (resultSignifier *\\n                            0x10000000000000000000000000B17217E) >>\\n                        128;\\n                if (xSignifier & 0x8000000 > 0)\\n                    resultSignifier =\\n                        (resultSignifier *\\n                            0x1000000000000000000000000058B90BE) >>\\n                        128;\\n                if (xSignifier & 0x4000000 > 0)\\n                    resultSignifier =\\n                        (resultSignifier *\\n                            0x100000000000000000000000002C5C85E) >>\\n                        128;\\n                if (xSignifier & 0x2000000 > 0)\\n                    resultSignifier =\\n                        (resultSignifier *\\n                            0x10000000000000000000000000162E42E) >>\\n                        128;\\n                if (xSignifier & 0x1000000 > 0)\\n                    resultSignifier =\\n                        (resultSignifier *\\n                            0x100000000000000000000000000B17216) >>\\n                        128;\\n                if (xSignifier & 0x800000 > 0)\\n                    resultSignifier =\\n                        (resultSignifier *\\n                            0x10000000000000000000000000058B90A) >>\\n                        128;\\n                if (xSignifier & 0x400000 > 0)\\n                    resultSignifier =\\n                        (resultSignifier *\\n                            0x1000000000000000000000000002C5C84) >>\\n                        128;\\n                if (xSignifier & 0x200000 > 0)\\n                    resultSignifier =\\n                        (resultSignifier *\\n                            0x100000000000000000000000000162E41) >>\\n                        128;\\n                if (xSignifier & 0x100000 > 0)\\n                    resultSignifier =\\n                        (resultSignifier *\\n                            0x1000000000000000000000000000B1720) >>\\n                        128;\\n                if (xSignifier & 0x80000 > 0)\\n                    resultSignifier =\\n                        (resultSignifier *\\n                            0x100000000000000000000000000058B8F) >>\\n                        128;\\n                if (xSignifier & 0x40000 > 0)\\n                    resultSignifier =\\n                        (resultSignifier *\\n                            0x10000000000000000000000000002C5C7) >>\\n                        128;\\n                if (xSignifier & 0x20000 > 0)\\n                    resultSignifier =\\n                        (resultSignifier *\\n                            0x1000000000000000000000000000162E3) >>\\n                        128;\\n                if (xSignifier & 0x10000 > 0)\\n                    resultSignifier =\\n                        (resultSignifier *\\n                            0x10000000000000000000000000000B171) >>\\n                        128;\\n                if (xSignifier & 0x8000 > 0)\\n                    resultSignifier =\\n                        (resultSignifier *\\n                            0x1000000000000000000000000000058B8) >>\\n                        128;\\n                if (xSignifier & 0x4000 > 0)\\n                    resultSignifier =\\n                        (resultSignifier *\\n                            0x100000000000000000000000000002C5B) >>\\n                        128;\\n                if (xSignifier & 0x2000 > 0)\\n                    resultSignifier =\\n                        (resultSignifier *\\n                            0x10000000000000000000000000000162D) >>\\n                        128;\\n                if (xSignifier & 0x1000 > 0)\\n                    resultSignifier =\\n                        (resultSignifier *\\n                            0x100000000000000000000000000000B16) >>\\n                        128;\\n                if (xSignifier & 0x800 > 0)\\n                    resultSignifier =\\n                        (resultSignifier *\\n                            0x10000000000000000000000000000058A) >>\\n                        128;\\n                if (xSignifier & 0x400 > 0)\\n                    resultSignifier =\\n                        (resultSignifier *\\n                            0x1000000000000000000000000000002C4) >>\\n                        128;\\n                if (xSignifier & 0x200 > 0)\\n                    resultSignifier =\\n                        (resultSignifier *\\n                            0x100000000000000000000000000000161) >>\\n                        128;\\n                if (xSignifier & 0x100 > 0)\\n                    resultSignifier =\\n                        (resultSignifier *\\n                            0x1000000000000000000000000000000B0) >>\\n                        128;\\n                if (xSignifier & 0x80 > 0)\\n                    resultSignifier =\\n                        (resultSignifier *\\n                            0x100000000000000000000000000000057) >>\\n                        128;\\n                if (xSignifier & 0x40 > 0)\\n                    resultSignifier =\\n                        (resultSignifier *\\n                            0x10000000000000000000000000000002B) >>\\n                        128;\\n                if (xSignifier & 0x20 > 0)\\n                    resultSignifier =\\n                        (resultSignifier *\\n                            0x100000000000000000000000000000015) >>\\n                        128;\\n                if (xSignifier & 0x10 > 0)\\n                    resultSignifier =\\n                        (resultSignifier *\\n                            0x10000000000000000000000000000000A) >>\\n                        128;\\n                if (xSignifier & 0x8 > 0)\\n                    resultSignifier =\\n                        (resultSignifier *\\n                            0x100000000000000000000000000000004) >>\\n                        128;\\n                if (xSignifier & 0x4 > 0)\\n                    resultSignifier =\\n                        (resultSignifier *\\n                            0x100000000000000000000000000000001) >>\\n                        128;\\n\\n                if (!xNegative) {\\n                    resultSignifier =\\n                        (resultSignifier >> 15) &\\n                        0xFFFFFFFFFFFFFFFFFFFFFFFFFFFF;\\n                    resultExponent += 0x3FFF;\\n                } else if (resultExponent <= 0x3FFE) {\\n                    resultSignifier =\\n                        (resultSignifier >> 15) &\\n                        0xFFFFFFFFFFFFFFFFFFFFFFFFFFFF;\\n                    resultExponent = 0x3FFF - resultExponent;\\n                } else {\\n                    resultSignifier =\\n                        resultSignifier >>\\n                        (resultExponent - 16367);\\n                    resultExponent = 0;\\n                }\\n\\n                return\\n                    bytes16(uint128((resultExponent << 112) | resultSignifier));\\n            }\\n        }\\n    }\\n\\n    /**\\n     * Calculate e^x.\\n     *\\n     * @param x quadruple precision number\\n     * @return quadruple precision number\\n     */\\n    function exp(bytes16 x) internal pure returns (bytes16) {\\n        unchecked {\\n            return pow_2(mul(x, 0x3FFF71547652B82FE1777D0FFDA0D23A));\\n        }\\n    }\\n\\n    /**\\n     * Get index of the most significant non-zero bit in binary representation of\\n     * x.  Reverts if x is zero.\\n     *\\n     * @return index of the most significant non-zero bit in binary representation\\n     *         of x\\n     */\\n    function mostSignificantBit(uint256 x) private pure returns (uint256) {\\n        unchecked {\\n            require(x > 0);\\n\\n            uint256 result = 0;\\n\\n            if (x >= 0x100000000000000000000000000000000) {\\n                x >>= 128;\\n                result += 128;\\n            }\\n            if (x >= 0x10000000000000000) {\\n                x >>= 64;\\n                result += 64;\\n            }\\n            if (x >= 0x100000000) {\\n                x >>= 32;\\n                result += 32;\\n            }\\n            if (x >= 0x10000) {\\n                x >>= 16;\\n                result += 16;\\n            }\\n            if (x >= 0x100) {\\n                x >>= 8;\\n                result += 8;\\n            }\\n            if (x >= 0x10) {\\n                x >>= 4;\\n                result += 4;\\n            }\\n            if (x >= 0x4) {\\n                x >>= 2;\\n                result += 2;\\n            }\\n            if (x >= 0x2) result += 1; // No need to shift x anymore\\n\\n            return result;\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0xfbd656e88528e48de543dff505176104176e184b94796bf81140af42cf140d53\",\"license\":\"BSD-4-Clause\"}},\"version\":1}",
  "bytecode": "0x608060405234801561001057600080fd5b5061001a3361001f565b61006f565b600080546001600160a01b038381166001600160a01b0319831681178455604051919092169283917f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e09190a35050565b611b6d8061007e6000396000f3fe608060405234801561001057600080fd5b50600436106101735760003560e01c806389df0749116100de578063aafd847a11610097578063cdb4ad7111610071578063cdb4ad7114610314578063cfe6bb581461018d578063f2fde38b14610327578063fc0c546a1461033a57600080fd5b8063aafd847a146102c5578063addfb2df146102ee578063c0f306ef1461030157600080fd5b806389df0749146102685780638da5cb5b1461027b5780639216e53e1461028c5780639805f01b1461029f578063a17e019c1461028c578063a8b9d240146102b257600080fd5b80633243c791116101305780633243c791146101f45780633ca5b234146102075780636341ca0b146102325780636473b1eb146102455780636a47400214610258578063715018a61461026057600080fd5b80630abc6e33146101785780631083ee081461018d578063144fa6d7146101a05780631c763596146101b357806327ce0147146101ce57806331e79db0146101e1575b600080fd5b61018b610186366004611924565b61034d565b005b61018b61019b366004611924565b6103d6565b61018b6101ae366004611959565b610400565b6101bb61042a565b6040519081526020015b60405180910390f35b6101bb6101dc366004611959565b610441565b61018b6101ef366004611959565b610505565b61018b610202366004611976565b6105b5565b60025461021a906001600160a01b031681565b6040516001600160a01b0390911681526020016101c5565b61018b61024036600461198f565b61081e565b61018b610253366004611959565b61090f565b61018b610950565b61018b61095b565b61018b610276366004611924565b61096d565b6000546001600160a01b031661021a565b61018b61029a3660046119c8565b6109db565b61018b6102ad366004611959565b610a05565b6101bb6102c0366004611959565b610a2f565b6101bb6102d3366004611959565b6001600160a01b031660009081526006602052604090205490565b61018b6102fc3660046119ea565b610a84565b61018b61030f366004611959565b610ab6565b6101bb610322366004611959565b610bc3565b61018b610335366004611959565b610be8565b60015461021a906001600160a01b031681565b6001546001600160a01b031633146103805760405162461bcd60e51b815260040161037790611a43565b60405180910390fd5b6001600160a01b03831660009081526007602052604090205460ff16156103b757806003546103af9190611aa1565b600355505050565b6103d1836103cc6103c784610c61565b610cc5565b610cd8565b505050565b6001546001600160a01b031633146103d15760405162461bcd60e51b815260040161037790611a43565b610408610d34565b600180546001600160a01b0319166001600160a01b0392909216919091179055565b60045460009061043c9060801b610d8e565b905090565b6004805460015460405163021feb8560e21b81526001600160a01b03858116948201949094526000936104ff936104fa936104d99360809290921b926104d49291169063087fae14906024015b602060405180830381865afa1580156104ab573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906104cf9190611ab8565b610c61565b610e12565b6001600160a01b03851660009081526005602052604090205460801b61108f565b610d8e565b92915050565b61050d610d34565b6105168161144f565b6001600160a01b0381811660008181526007602052604090819020805460ff1916600190811790915554905163021feb8560e21b815260048101929092529091169063087fae1490602401602060405180830381865afa15801561057e573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906105a29190611ab8565b6003546105af9190611ad1565b60035550565b6003546001546040805163075d1d6160e01b81529051600093926001600160a01b03169163075d1d619160048083019260209291908290030181865afa158015610603573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906106279190611ab8565b6106319190611aa1565b9050600081116106a15760405162461bcd60e51b815260206004820152603560248201527f4469766964656e644d616e616765723a20746f74616c537570706c792073686f6044820152740756c642062652067726561746572207468616e203605c1b6064820152608401610377565b600082116107175760405162461bcd60e51b815260206004820152603c60248201527f4469766964656e644d616e616765723a20646973747269627574656420616d6f60448201527f756e742073686f756c642062652067726561746572207468616e2030000000006064820152608401610377565b6002546001600160a01b03166323b872dd336040516001600160e01b031960e084901b1681526001600160a01b039091166004820152306024820152604481018590526064016020604051808303816000875af115801561077c573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906107a09190611ae9565b506004546107ca9060801b6107c56107b785610c61565b6107c085610c61565b61154e565b61108f565b600480546001600160801b03191660809290921c91909117905560405182815233907fa493a9229478c3fcd73f66d2cdeb7f94fd0f341da924d1054236d78454116511906020015b60405180910390a25050565b610826610d34565b6040516370a0823160e01b815230600482015281906001600160a01b0382169063a9059cbb90859083906370a0823190602401602060405180830381865afa158015610876573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061089a9190611ab8565b6040516001600160e01b031960e085901b1681526001600160a01b03909216600483015260248201526044016020604051808303816000875af11580156108e5573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906109099190611ae9565b50505050565b610917610d34565b6040516001600160a01b038216904780156108fc02916000818181858888f1935050505015801561094c573d6000803e3d6000fd5b5050565b6109593361144f565b565b610963610d34565b61095960006117e4565b6001546001600160a01b031633146109975760405162461bcd60e51b815260040161037790611a43565b6001600160a01b03831660009081526007602052604090205460ff16156109c657806003546103af9190611ad1565b6103d1836109d66103c784610c61565b611834565b6001546001600160a01b0316331461094c5760405162461bcd60e51b815260040161037790611a43565b610a0d610d34565b600280546001600160a01b0319166001600160a01b0392909216919091179055565b6001600160a01b03811660009081526007602052604081205460ff1615610a5857506000919050565b6001600160a01b038216600090815260066020526040902054610a7a83610441565b6104ff9190611aa1565b6001546001600160a01b03163314610aae5760405162461bcd60e51b815260040161037790611a43565b505050505050565b610abe610d34565b6004805460015460405163021feb8560e21b81526001600160a01b0385811694820194909452610b0e93610b059360801b926104d49291169063087fae149060240161048e565b600160ff1b1890565b6001600160a01b03828116600081815260056020908152604080832080546001600160801b03191660809790971c9690961790955560079052839020805460ff19169055600154925163021feb8560e21b8152600481019190915291169063087fae1490602401602060405180830381865afa158015610b92573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610bb69190611ab8565b6003546105af9190611aa1565b6001600160a01b0381166000908152600560205260408120546104ff9060801b610d8e565b610bf0610d34565b6001600160a01b038116610c555760405162461bcd60e51b815260206004820152602660248201527f4f776e61626c653a206e6577206f776e657220697320746865207a65726f206160448201526564647265737360d01b6064820152608401610377565b610c5e816117e4565b50565b600081610c7057506000919050565b816000610c7c8261185a565b90506070811015610c95578060700382901b9150610ca8565b6070811115610ca8576070810382901c91505b613fff0160701b6001600160701b03919091161760801b92915050565b6004546000906104ff9060801b83610e12565b6001600160a01b038216600090815260056020526040902054610cfe9060801b8261108f565b6001600160a01b0392909216600090815260056020526040902080546001600160801b03191660809390931c9290921790915550565b6000546001600160a01b031633146109595760405162461bcd60e51b815260206004820181905260248201527f4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e65726044820152606401610377565b6000617fff60f083901c16613fff811015610dac5750600092915050565b6001607f1b608084901c10610dc057600080fd5b6140fe811115610dcf57600080fd5b600160701b6001600160701b03608085901c161761406f821015610df95761406f8290031c610e0b565b61406f821115610e0b5761406e1982011b5b9392505050565b6000617fff60f084811c8216919084901c811690821415610ec25780617fff1415610e90576001600160801b03198581169085161415610e5d57505050600160ff1b811682186104ff565b600160ff1b6001600160801b0319868618161415610e80575050508181176104ff565b5061ffff60ef1b91506104ff9050565b600160801b600160ff1b038416610eb1575061ffff60ef1b91506104ff9050565b505050600160ff1b811682186104ff565b80617fff1415610efe57600160801b600160ff1b038516610eed575061ffff60ef1b91506104ff9050565b505050600160ff1b821681186104ff565b6001600160701b03608086901c1682610f1a5760019250610f21565b600160701b175b6001600160701b03608086901c1682610f3d5760019250610f44565b600160701b175b9081029081610f7257600160ff1b87871816610f61576000610f67565b600160ff1b5b9450505050506104ff565b928201926000600160e11b831015610fa557600160e01b831015610f9e57610f998361185a565b610fa8565b60e0610fa8565b60e15b90506140708186011015610fc3576000945060009250611060565b6140e0818601101561100657614070851015610fe857846140700383901c9250610ffd565b614070851115610ffd57614070850383901b92505b60009450611060565b61c0dd818601111561102057617fff945060009250611060565b6070811115611037576070810383901c925061104a565b607081101561104a578060700383901b92505b6001600160701b03831692506140df8186010394505b82607086901b888a186001607f1b60801b1660801c6001600160801b0316171760801b955050505050506104ff565b6000617fff60f084811c8216919084901c8116908214156110dd5780617fff14156110d3576001600160801b03198581169085161415610e805784925050506104ff565b84925050506104ff565b80617fff14156110f15783925050506104ff565b6001607f1b608086901c90811015906001600160701b031683611117576001935061111e565b600160701b175b6001607f1b608087901c90811015906001600160701b031684611144576001945061114b565b600160701b175b8261117b576001600160801b03198816600160ff1b1461116b578761116e565b60005b96505050505050506104ff565b8061119b576001600160801b03198916600160ff1b1461116b578861116e565b84860384151583151514156112a65760708113156111c257899750505050505050506104ff565b60008113156111d45790811c90611203565b606f198112156111ed57889750505050505050506104ff565b6000811215611203578060000384901c93508596505b92810192600160711b841061121e576001968701969390931c925b86617fff1415611250578461123857617fff60f01b611242565b6001600160f01b03195b9750505050505050506104ff565b600160701b8410156112655760009650611272565b6001600160701b03841693505b83607088901b8661128457600061128a565b6001607f1b5b6001600160801b0316171760801b9750505050505050506104ff565b60008113156112c157600184901b93506001870396506112d8565b60008112156112d857600182901b91506001860396505b60708113156112ea5760019150611337565b6001811315611307576001810360018303901c6001019150611337565b606f1981121561131a5760019350611337565b600019811215611337576001816000030360018503901c60010193505b818410611348578184039350611351565b83820393508294505b836113675750600096506104ff95505050505050565b60006113728561185a565b9050806071141561139857600185901c6001600160701b031694506001880197506113e7565b60708110156113da576070819003808911156113c7578086901b6001600160701b0316955080890398506113d4565b600098600019019590951b945b506113e7565b6001600160701b03851694505b87617fff141561141a578561140157617fff60f01b61140b565b6001600160f01b03195b985050505050505050506104ff565b84607089901b8761142c576000611432565b6001607f1b5b6001600160801b0316171760801b985050505050505050506104ff565b600061145a82610a2f565b9050801561094c576001600160a01b038216600090815260066020526040902054611486908290611ad1565b6001600160a01b038381166000818152600660205260409081902093909355600254925163a9059cbb60e01b815260048101919091526024810184905291169063a9059cbb906044016020604051808303816000875af11580156114ee573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906115129190611ae9565b50816001600160a01b03167fee503bee2bb6a87e57bc57db795f98137327401a0e7b7ce42e37926cc1a9ca4d8260405161081291815260200190565b6000617fff60f084811c8216919084901c8116908214156115835780617fff1415610eb1575061ffff60ef1b91506104ff9050565b80617fff14156115c7576dffffffffffffffffffffffffffff60801b8416156115b6575061ffff60ef1b91506104ff9050565b505050808218600160ff1b166104ff565b600160801b600160ff1b03841661161157600160801b600160ff1b0385166115f9575061ffff60ef1b91506104ff9050565b505050808218600160ff1b16617fff60f01b176104ff565b6001600160701b03608085901c168161162d5760019150611634565b600160701b175b6001600160701b03608087901c168361167357801561166e5760006116588261185a565b6001955060e20393840160711901939190911b90505b61167d565b600160701b1760721b5b81818161168c5761168c611b0b565b049050806116a857600160ff1b87871816610f61576000610f67565b6001606c1b8110156116bc576116bc611b21565b6000600160731b8210156116fb57600160721b8210156116f057600160711b8210156116e95760706116f3565b60716116f3565b60725b60ff16611704565b6117048261185a565b90508361407101818601111561172257617fff9450600091506117b5565b83818601613ffc01101561173d5760009450600091506117b5565b83818601613f8c01101561178a578385613ffc011115611768578385613ffc010382901b9150611781565b8385613ffc01101561178157613ffc8585030382901c91505b600094506117b5565b607081111561179d576070810382901c91505b6001600160701b038216915083818601613f8d010394505b81607086901b888a186001607f1b60801b1660801c6001600160801b0316171760801b955050505050506104ff565b600080546001600160a01b038381166001600160a01b0319831681178455604051919092169283917f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e09190a35050565b6001600160a01b038216600090815260056020526040902054610cfe9060801b826118fd565b600080821161186857600080fd5b6000600160801b831061187d57608092831c92015b68010000000000000000831061189557604092831c92015b64010000000083106118a957602092831c92015b6201000083106118bb57601092831c92015b61010083106118cc57600892831c92015b601083106118dc57600492831c92015b600483106118ec57600292831c92015b600283106104ff5760010192915050565b6000610e0b83600160ff1b841861108f565b6001600160a01b0381168114610c5e57600080fd5b60008060006060848603121561193957600080fd5b83356119448161190f565b95602085013595506040909401359392505050565b60006020828403121561196b57600080fd5b8135610e0b8161190f565b60006020828403121561198857600080fd5b5035919050565b600080604083850312156119a257600080fd5b82356119ad8161190f565b915060208301356119bd8161190f565b809150509250929050565b600080604083850312156119db57600080fd5b50508035926020909101359150565b60008060008060008060c08789031215611a0357600080fd5b8635611a0e8161190f565b95506020870135611a1e8161190f565b95989597505050506040840135936060810135936080820135935060a0909101359150565b60208082526028908201527f4469766964656e644d616e616765723a2063616c6c6572206973206e6f7420746040820152673432903a37b5b2b760c11b606082015260800190565b634e487b7160e01b600052601160045260246000fd5b600082821015611ab357611ab3611a8b565b500390565b600060208284031215611aca57600080fd5b5051919050565b60008219821115611ae457611ae4611a8b565b500190565b600060208284031215611afb57600080fd5b81518015158114610e0b57600080fd5b634e487b7160e01b600052601260045260246000fd5b634e487b7160e01b600052600160045260246000fdfea264697066735822122016396cc780f2f8b73f9d954cf8a3f3b1e9700692230aff9194f8abe9c5b6945a64736f6c634300080a0033",
  "deployedBytecode": "0x608060405234801561001057600080fd5b50600436106101735760003560e01c806389df0749116100de578063aafd847a11610097578063cdb4ad7111610071578063cdb4ad7114610314578063cfe6bb581461018d578063f2fde38b14610327578063fc0c546a1461033a57600080fd5b8063aafd847a146102c5578063addfb2df146102ee578063c0f306ef1461030157600080fd5b806389df0749146102685780638da5cb5b1461027b5780639216e53e1461028c5780639805f01b1461029f578063a17e019c1461028c578063a8b9d240146102b257600080fd5b80633243c791116101305780633243c791146101f45780633ca5b234146102075780636341ca0b146102325780636473b1eb146102455780636a47400214610258578063715018a61461026057600080fd5b80630abc6e33146101785780631083ee081461018d578063144fa6d7146101a05780631c763596146101b357806327ce0147146101ce57806331e79db0146101e1575b600080fd5b61018b610186366004611924565b61034d565b005b61018b61019b366004611924565b6103d6565b61018b6101ae366004611959565b610400565b6101bb61042a565b6040519081526020015b60405180910390f35b6101bb6101dc366004611959565b610441565b61018b6101ef366004611959565b610505565b61018b610202366004611976565b6105b5565b60025461021a906001600160a01b031681565b6040516001600160a01b0390911681526020016101c5565b61018b61024036600461198f565b61081e565b61018b610253366004611959565b61090f565b61018b610950565b61018b61095b565b61018b610276366004611924565b61096d565b6000546001600160a01b031661021a565b61018b61029a3660046119c8565b6109db565b61018b6102ad366004611959565b610a05565b6101bb6102c0366004611959565b610a2f565b6101bb6102d3366004611959565b6001600160a01b031660009081526006602052604090205490565b61018b6102fc3660046119ea565b610a84565b61018b61030f366004611959565b610ab6565b6101bb610322366004611959565b610bc3565b61018b610335366004611959565b610be8565b60015461021a906001600160a01b031681565b6001546001600160a01b031633146103805760405162461bcd60e51b815260040161037790611a43565b60405180910390fd5b6001600160a01b03831660009081526007602052604090205460ff16156103b757806003546103af9190611aa1565b600355505050565b6103d1836103cc6103c784610c61565b610cc5565b610cd8565b505050565b6001546001600160a01b031633146103d15760405162461bcd60e51b815260040161037790611a43565b610408610d34565b600180546001600160a01b0319166001600160a01b0392909216919091179055565b60045460009061043c9060801b610d8e565b905090565b6004805460015460405163021feb8560e21b81526001600160a01b03858116948201949094526000936104ff936104fa936104d99360809290921b926104d49291169063087fae14906024015b602060405180830381865afa1580156104ab573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906104cf9190611ab8565b610c61565b610e12565b6001600160a01b03851660009081526005602052604090205460801b61108f565b610d8e565b92915050565b61050d610d34565b6105168161144f565b6001600160a01b0381811660008181526007602052604090819020805460ff1916600190811790915554905163021feb8560e21b815260048101929092529091169063087fae1490602401602060405180830381865afa15801561057e573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906105a29190611ab8565b6003546105af9190611ad1565b60035550565b6003546001546040805163075d1d6160e01b81529051600093926001600160a01b03169163075d1d619160048083019260209291908290030181865afa158015610603573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906106279190611ab8565b6106319190611aa1565b9050600081116106a15760405162461bcd60e51b815260206004820152603560248201527f4469766964656e644d616e616765723a20746f74616c537570706c792073686f6044820152740756c642062652067726561746572207468616e203605c1b6064820152608401610377565b600082116107175760405162461bcd60e51b815260206004820152603c60248201527f4469766964656e644d616e616765723a20646973747269627574656420616d6f60448201527f756e742073686f756c642062652067726561746572207468616e2030000000006064820152608401610377565b6002546001600160a01b03166323b872dd336040516001600160e01b031960e084901b1681526001600160a01b039091166004820152306024820152604481018590526064016020604051808303816000875af115801561077c573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906107a09190611ae9565b506004546107ca9060801b6107c56107b785610c61565b6107c085610c61565b61154e565b61108f565b600480546001600160801b03191660809290921c91909117905560405182815233907fa493a9229478c3fcd73f66d2cdeb7f94fd0f341da924d1054236d78454116511906020015b60405180910390a25050565b610826610d34565b6040516370a0823160e01b815230600482015281906001600160a01b0382169063a9059cbb90859083906370a0823190602401602060405180830381865afa158015610876573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061089a9190611ab8565b6040516001600160e01b031960e085901b1681526001600160a01b03909216600483015260248201526044016020604051808303816000875af11580156108e5573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906109099190611ae9565b50505050565b610917610d34565b6040516001600160a01b038216904780156108fc02916000818181858888f1935050505015801561094c573d6000803e3d6000fd5b5050565b6109593361144f565b565b610963610d34565b61095960006117e4565b6001546001600160a01b031633146109975760405162461bcd60e51b815260040161037790611a43565b6001600160a01b03831660009081526007602052604090205460ff16156109c657806003546103af9190611ad1565b6103d1836109d66103c784610c61565b611834565b6001546001600160a01b0316331461094c5760405162461bcd60e51b815260040161037790611a43565b610a0d610d34565b600280546001600160a01b0319166001600160a01b0392909216919091179055565b6001600160a01b03811660009081526007602052604081205460ff1615610a5857506000919050565b6001600160a01b038216600090815260066020526040902054610a7a83610441565b6104ff9190611aa1565b6001546001600160a01b03163314610aae5760405162461bcd60e51b815260040161037790611a43565b505050505050565b610abe610d34565b6004805460015460405163021feb8560e21b81526001600160a01b0385811694820194909452610b0e93610b059360801b926104d49291169063087fae149060240161048e565b600160ff1b1890565b6001600160a01b03828116600081815260056020908152604080832080546001600160801b03191660809790971c9690961790955560079052839020805460ff19169055600154925163021feb8560e21b8152600481019190915291169063087fae1490602401602060405180830381865afa158015610b92573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610bb69190611ab8565b6003546105af9190611aa1565b6001600160a01b0381166000908152600560205260408120546104ff9060801b610d8e565b610bf0610d34565b6001600160a01b038116610c555760405162461bcd60e51b815260206004820152602660248201527f4f776e61626c653a206e6577206f776e657220697320746865207a65726f206160448201526564647265737360d01b6064820152608401610377565b610c5e816117e4565b50565b600081610c7057506000919050565b816000610c7c8261185a565b90506070811015610c95578060700382901b9150610ca8565b6070811115610ca8576070810382901c91505b613fff0160701b6001600160701b03919091161760801b92915050565b6004546000906104ff9060801b83610e12565b6001600160a01b038216600090815260056020526040902054610cfe9060801b8261108f565b6001600160a01b0392909216600090815260056020526040902080546001600160801b03191660809390931c9290921790915550565b6000546001600160a01b031633146109595760405162461bcd60e51b815260206004820181905260248201527f4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e65726044820152606401610377565b6000617fff60f083901c16613fff811015610dac5750600092915050565b6001607f1b608084901c10610dc057600080fd5b6140fe811115610dcf57600080fd5b600160701b6001600160701b03608085901c161761406f821015610df95761406f8290031c610e0b565b61406f821115610e0b5761406e1982011b5b9392505050565b6000617fff60f084811c8216919084901c811690821415610ec25780617fff1415610e90576001600160801b03198581169085161415610e5d57505050600160ff1b811682186104ff565b600160ff1b6001600160801b0319868618161415610e80575050508181176104ff565b5061ffff60ef1b91506104ff9050565b600160801b600160ff1b038416610eb1575061ffff60ef1b91506104ff9050565b505050600160ff1b811682186104ff565b80617fff1415610efe57600160801b600160ff1b038516610eed575061ffff60ef1b91506104ff9050565b505050600160ff1b821681186104ff565b6001600160701b03608086901c1682610f1a5760019250610f21565b600160701b175b6001600160701b03608086901c1682610f3d5760019250610f44565b600160701b175b9081029081610f7257600160ff1b87871816610f61576000610f67565b600160ff1b5b9450505050506104ff565b928201926000600160e11b831015610fa557600160e01b831015610f9e57610f998361185a565b610fa8565b60e0610fa8565b60e15b90506140708186011015610fc3576000945060009250611060565b6140e0818601101561100657614070851015610fe857846140700383901c9250610ffd565b614070851115610ffd57614070850383901b92505b60009450611060565b61c0dd818601111561102057617fff945060009250611060565b6070811115611037576070810383901c925061104a565b607081101561104a578060700383901b92505b6001600160701b03831692506140df8186010394505b82607086901b888a186001607f1b60801b1660801c6001600160801b0316171760801b955050505050506104ff565b6000617fff60f084811c8216919084901c8116908214156110dd5780617fff14156110d3576001600160801b03198581169085161415610e805784925050506104ff565b84925050506104ff565b80617fff14156110f15783925050506104ff565b6001607f1b608086901c90811015906001600160701b031683611117576001935061111e565b600160701b175b6001607f1b608087901c90811015906001600160701b031684611144576001945061114b565b600160701b175b8261117b576001600160801b03198816600160ff1b1461116b578761116e565b60005b96505050505050506104ff565b8061119b576001600160801b03198916600160ff1b1461116b578861116e565b84860384151583151514156112a65760708113156111c257899750505050505050506104ff565b60008113156111d45790811c90611203565b606f198112156111ed57889750505050505050506104ff565b6000811215611203578060000384901c93508596505b92810192600160711b841061121e576001968701969390931c925b86617fff1415611250578461123857617fff60f01b611242565b6001600160f01b03195b9750505050505050506104ff565b600160701b8410156112655760009650611272565b6001600160701b03841693505b83607088901b8661128457600061128a565b6001607f1b5b6001600160801b0316171760801b9750505050505050506104ff565b60008113156112c157600184901b93506001870396506112d8565b60008112156112d857600182901b91506001860396505b60708113156112ea5760019150611337565b6001811315611307576001810360018303901c6001019150611337565b606f1981121561131a5760019350611337565b600019811215611337576001816000030360018503901c60010193505b818410611348578184039350611351565b83820393508294505b836113675750600096506104ff95505050505050565b60006113728561185a565b9050806071141561139857600185901c6001600160701b031694506001880197506113e7565b60708110156113da576070819003808911156113c7578086901b6001600160701b0316955080890398506113d4565b600098600019019590951b945b506113e7565b6001600160701b03851694505b87617fff141561141a578561140157617fff60f01b61140b565b6001600160f01b03195b985050505050505050506104ff565b84607089901b8761142c576000611432565b6001607f1b5b6001600160801b0316171760801b985050505050505050506104ff565b600061145a82610a2f565b9050801561094c576001600160a01b038216600090815260066020526040902054611486908290611ad1565b6001600160a01b038381166000818152600660205260409081902093909355600254925163a9059cbb60e01b815260048101919091526024810184905291169063a9059cbb906044016020604051808303816000875af11580156114ee573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906115129190611ae9565b50816001600160a01b03167fee503bee2bb6a87e57bc57db795f98137327401a0e7b7ce42e37926cc1a9ca4d8260405161081291815260200190565b6000617fff60f084811c8216919084901c8116908214156115835780617fff1415610eb1575061ffff60ef1b91506104ff9050565b80617fff14156115c7576dffffffffffffffffffffffffffff60801b8416156115b6575061ffff60ef1b91506104ff9050565b505050808218600160ff1b166104ff565b600160801b600160ff1b03841661161157600160801b600160ff1b0385166115f9575061ffff60ef1b91506104ff9050565b505050808218600160ff1b16617fff60f01b176104ff565b6001600160701b03608085901c168161162d5760019150611634565b600160701b175b6001600160701b03608087901c168361167357801561166e5760006116588261185a565b6001955060e20393840160711901939190911b90505b61167d565b600160701b1760721b5b81818161168c5761168c611b0b565b049050806116a857600160ff1b87871816610f61576000610f67565b6001606c1b8110156116bc576116bc611b21565b6000600160731b8210156116fb57600160721b8210156116f057600160711b8210156116e95760706116f3565b60716116f3565b60725b60ff16611704565b6117048261185a565b90508361407101818601111561172257617fff9450600091506117b5565b83818601613ffc01101561173d5760009450600091506117b5565b83818601613f8c01101561178a578385613ffc011115611768578385613ffc010382901b9150611781565b8385613ffc01101561178157613ffc8585030382901c91505b600094506117b5565b607081111561179d576070810382901c91505b6001600160701b038216915083818601613f8d010394505b81607086901b888a186001607f1b60801b1660801c6001600160801b0316171760801b955050505050506104ff565b600080546001600160a01b038381166001600160a01b0319831681178455604051919092169283917f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e09190a35050565b6001600160a01b038216600090815260056020526040902054610cfe9060801b826118fd565b600080821161186857600080fd5b6000600160801b831061187d57608092831c92015b68010000000000000000831061189557604092831c92015b64010000000083106118a957602092831c92015b6201000083106118bb57601092831c92015b61010083106118cc57600892831c92015b601083106118dc57600492831c92015b600483106118ec57600292831c92015b600283106104ff5760010192915050565b6000610e0b83600160ff1b841861108f565b6001600160a01b0381168114610c5e57600080fd5b60008060006060848603121561193957600080fd5b83356119448161190f565b95602085013595506040909401359392505050565b60006020828403121561196b57600080fd5b8135610e0b8161190f565b60006020828403121561198857600080fd5b5035919050565b600080604083850312156119a257600080fd5b82356119ad8161190f565b915060208301356119bd8161190f565b809150509250929050565b600080604083850312156119db57600080fd5b50508035926020909101359150565b60008060008060008060c08789031215611a0357600080fd5b8635611a0e8161190f565b95506020870135611a1e8161190f565b95989597505050506040840135936060810135936080820135935060a0909101359150565b60208082526028908201527f4469766964656e644d616e616765723a2063616c6c6572206973206e6f7420746040820152673432903a37b5b2b760c11b606082015260800190565b634e487b7160e01b600052601160045260246000fd5b600082821015611ab357611ab3611a8b565b500390565b600060208284031215611aca57600080fd5b5051919050565b60008219821115611ae457611ae4611a8b565b500190565b600060208284031215611afb57600080fd5b81518015158114610e0b57600080fd5b634e487b7160e01b600052601260045260246000fd5b634e487b7160e01b600052600160045260246000fdfea264697066735822122016396cc780f2f8b73f9d954cf8a3f3b1e9700692230aff9194f8abe9c5b6945a64736f6c634300080a0033",
  "devdoc": {
    "kind": "dev",
    "methods": {
      "owner()": {
        "details": "Returns the address of the current owner."
      },
      "renounceOwnership()": {
        "details": "Leaves the contract without owner. It will not be possible to call `onlyOwner` functions anymore. Can only be called by the current owner. NOTE: Renouncing ownership will leave the contract without an owner, thereby removing any functionality that is only available to the owner."
      },
      "transferOwnership(address)": {
        "details": "Transfers ownership of the contract to a new account (`newOwner`). Can only be called by the current owner."
      }
    },
    "version": 1
  },
  "userdoc": {
    "kind": "user",
    "methods": {},
    "version": 1
  },
  "storageLayout": {
    "storage": [
      {
        "astId": 396,
        "contract": "contracts/v1/DividendManager.sol:DividendManager",
        "label": "_owner",
        "offset": 0,
        "slot": "0",
        "type": "t_address"
      },
      {
        "astId": 4828,
        "contract": "contracts/v1/DividendManager.sol:DividendManager",
        "label": "token",
        "offset": 0,
        "slot": "1",
        "type": "t_contract(ICarboToken)5951"
      },
      {
        "astId": 4831,
        "contract": "contracts/v1/DividendManager.sol:DividendManager",
        "label": "busd",
        "offset": 0,
        "slot": "2",
        "type": "t_contract(IERC20)1274"
      },
      {
        "astId": 4833,
        "contract": "contracts/v1/DividendManager.sol:DividendManager",
        "label": "_excludedSupply",
        "offset": 0,
        "slot": "3",
        "type": "t_uint256"
      },
      {
        "astId": 4835,
        "contract": "contracts/v1/DividendManager.sol:DividendManager",
        "label": "_dividendPerShare",
        "offset": 0,
        "slot": "4",
        "type": "t_bytes16"
      },
      {
        "astId": 4839,
        "contract": "contracts/v1/DividendManager.sol:DividendManager",
        "label": "_dividendCorrections",
        "offset": 0,
        "slot": "5",
        "type": "t_mapping(t_address,t_bytes16)"
      },
      {
        "astId": 4843,
        "contract": "contracts/v1/DividendManager.sol:DividendManager",
        "label": "_withdrawnDividends",
        "offset": 0,
        "slot": "6",
        "type": "t_mapping(t_address,t_uint256)"
      },
      {
        "astId": 4847,
        "contract": "contracts/v1/DividendManager.sol:DividendManager",
        "label": "_excluded",
        "offset": 0,
        "slot": "7",
        "type": "t_mapping(t_address,t_bool)"
      }
    ],
    "types": {
      "t_address": {
        "encoding": "inplace",
        "label": "address",
        "numberOfBytes": "20"
      },
      "t_bool": {
        "encoding": "inplace",
        "label": "bool",
        "numberOfBytes": "1"
      },
      "t_bytes16": {
        "encoding": "inplace",
        "label": "bytes16",
        "numberOfBytes": "16"
      },
      "t_contract(ICarboToken)5951": {
        "encoding": "inplace",
        "label": "contract ICarboToken",
        "numberOfBytes": "20"
      },
      "t_contract(IERC20)1274": {
        "encoding": "inplace",
        "label": "contract IERC20",
        "numberOfBytes": "20"
      },
      "t_mapping(t_address,t_bool)": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => bool)",
        "numberOfBytes": "32",
        "value": "t_bool"
      },
      "t_mapping(t_address,t_bytes16)": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => bytes16)",
        "numberOfBytes": "32",
        "value": "t_bytes16"
      },
      "t_mapping(t_address,t_uint256)": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => uint256)",
        "numberOfBytes": "32",
        "value": "t_uint256"
      },
      "t_uint256": {
        "encoding": "inplace",
        "label": "uint256",
        "numberOfBytes": "32"
      }
    }
  }
}