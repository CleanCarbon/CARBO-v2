{
  "language": "Solidity",
  "sources": {
    "@openzeppelin/contracts/access/AccessControl.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v4.8.0) (access/AccessControl.sol)\n\npragma solidity ^0.8.0;\n\nimport \"./IAccessControl.sol\";\nimport \"../utils/Context.sol\";\nimport \"../utils/Strings.sol\";\nimport \"../utils/introspection/ERC165.sol\";\n\n/**\n * @dev Contract module that allows children to implement role-based access\n * control mechanisms. This is a lightweight version that doesn't allow enumerating role\n * members except through off-chain means by accessing the contract event logs. Some\n * applications may benefit from on-chain enumerability, for those cases see\n * {AccessControlEnumerable}.\n *\n * Roles are referred to by their `bytes32` identifier. These should be exposed\n * in the external API and be unique. The best way to achieve this is by\n * using `public constant` hash digests:\n *\n * ```\n * bytes32 public constant MY_ROLE = keccak256(\"MY_ROLE\");\n * ```\n *\n * Roles can be used to represent a set of permissions. To restrict access to a\n * function call, use {hasRole}:\n *\n * ```\n * function foo() public {\n *     require(hasRole(MY_ROLE, msg.sender));\n *     ...\n * }\n * ```\n *\n * Roles can be granted and revoked dynamically via the {grantRole} and\n * {revokeRole} functions. Each role has an associated admin role, and only\n * accounts that have a role's admin role can call {grantRole} and {revokeRole}.\n *\n * By default, the admin role for all roles is `DEFAULT_ADMIN_ROLE`, which means\n * that only accounts with this role will be able to grant or revoke other\n * roles. More complex role relationships can be created by using\n * {_setRoleAdmin}.\n *\n * WARNING: The `DEFAULT_ADMIN_ROLE` is also its own admin: it has permission to\n * grant and revoke this role. Extra precautions should be taken to secure\n * accounts that have been granted it.\n */\nabstract contract AccessControl is Context, IAccessControl, ERC165 {\n    struct RoleData {\n        mapping(address => bool) members;\n        bytes32 adminRole;\n    }\n\n    mapping(bytes32 => RoleData) private _roles;\n\n    bytes32 public constant DEFAULT_ADMIN_ROLE = 0x00;\n\n    /**\n     * @dev Modifier that checks that an account has a specific role. Reverts\n     * with a standardized message including the required role.\n     *\n     * The format of the revert reason is given by the following regular expression:\n     *\n     *  /^AccessControl: account (0x[0-9a-f]{40}) is missing role (0x[0-9a-f]{64})$/\n     *\n     * _Available since v4.1._\n     */\n    modifier onlyRole(bytes32 role) {\n        _checkRole(role);\n        _;\n    }\n\n    /**\n     * @dev See {IERC165-supportsInterface}.\n     */\n    function supportsInterface(bytes4 interfaceId) public view virtual override returns (bool) {\n        return interfaceId == type(IAccessControl).interfaceId || super.supportsInterface(interfaceId);\n    }\n\n    /**\n     * @dev Returns `true` if `account` has been granted `role`.\n     */\n    function hasRole(bytes32 role, address account) public view virtual override returns (bool) {\n        return _roles[role].members[account];\n    }\n\n    /**\n     * @dev Revert with a standard message if `_msgSender()` is missing `role`.\n     * Overriding this function changes the behavior of the {onlyRole} modifier.\n     *\n     * Format of the revert message is described in {_checkRole}.\n     *\n     * _Available since v4.6._\n     */\n    function _checkRole(bytes32 role) internal view virtual {\n        _checkRole(role, _msgSender());\n    }\n\n    /**\n     * @dev Revert with a standard message if `account` is missing `role`.\n     *\n     * The format of the revert reason is given by the following regular expression:\n     *\n     *  /^AccessControl: account (0x[0-9a-f]{40}) is missing role (0x[0-9a-f]{64})$/\n     */\n    function _checkRole(bytes32 role, address account) internal view virtual {\n        if (!hasRole(role, account)) {\n            revert(\n                string(\n                    abi.encodePacked(\n                        \"AccessControl: account \",\n                        Strings.toHexString(account),\n                        \" is missing role \",\n                        Strings.toHexString(uint256(role), 32)\n                    )\n                )\n            );\n        }\n    }\n\n    /**\n     * @dev Returns the admin role that controls `role`. See {grantRole} and\n     * {revokeRole}.\n     *\n     * To change a role's admin, use {_setRoleAdmin}.\n     */\n    function getRoleAdmin(bytes32 role) public view virtual override returns (bytes32) {\n        return _roles[role].adminRole;\n    }\n\n    /**\n     * @dev Grants `role` to `account`.\n     *\n     * If `account` had not been already granted `role`, emits a {RoleGranted}\n     * event.\n     *\n     * Requirements:\n     *\n     * - the caller must have ``role``'s admin role.\n     *\n     * May emit a {RoleGranted} event.\n     */\n    function grantRole(bytes32 role, address account) public virtual override onlyRole(getRoleAdmin(role)) {\n        _grantRole(role, account);\n    }\n\n    /**\n     * @dev Revokes `role` from `account`.\n     *\n     * If `account` had been granted `role`, emits a {RoleRevoked} event.\n     *\n     * Requirements:\n     *\n     * - the caller must have ``role``'s admin role.\n     *\n     * May emit a {RoleRevoked} event.\n     */\n    function revokeRole(bytes32 role, address account) public virtual override onlyRole(getRoleAdmin(role)) {\n        _revokeRole(role, account);\n    }\n\n    /**\n     * @dev Revokes `role` from the calling account.\n     *\n     * Roles are often managed via {grantRole} and {revokeRole}: this function's\n     * purpose is to provide a mechanism for accounts to lose their privileges\n     * if they are compromised (such as when a trusted device is misplaced).\n     *\n     * If the calling account had been revoked `role`, emits a {RoleRevoked}\n     * event.\n     *\n     * Requirements:\n     *\n     * - the caller must be `account`.\n     *\n     * May emit a {RoleRevoked} event.\n     */\n    function renounceRole(bytes32 role, address account) public virtual override {\n        require(account == _msgSender(), \"AccessControl: can only renounce roles for self\");\n\n        _revokeRole(role, account);\n    }\n\n    /**\n     * @dev Grants `role` to `account`.\n     *\n     * If `account` had not been already granted `role`, emits a {RoleGranted}\n     * event. Note that unlike {grantRole}, this function doesn't perform any\n     * checks on the calling account.\n     *\n     * May emit a {RoleGranted} event.\n     *\n     * [WARNING]\n     * ====\n     * This function should only be called from the constructor when setting\n     * up the initial roles for the system.\n     *\n     * Using this function in any other way is effectively circumventing the admin\n     * system imposed by {AccessControl}.\n     * ====\n     *\n     * NOTE: This function is deprecated in favor of {_grantRole}.\n     */\n    function _setupRole(bytes32 role, address account) internal virtual {\n        _grantRole(role, account);\n    }\n\n    /**\n     * @dev Sets `adminRole` as ``role``'s admin role.\n     *\n     * Emits a {RoleAdminChanged} event.\n     */\n    function _setRoleAdmin(bytes32 role, bytes32 adminRole) internal virtual {\n        bytes32 previousAdminRole = getRoleAdmin(role);\n        _roles[role].adminRole = adminRole;\n        emit RoleAdminChanged(role, previousAdminRole, adminRole);\n    }\n\n    /**\n     * @dev Grants `role` to `account`.\n     *\n     * Internal function without access restriction.\n     *\n     * May emit a {RoleGranted} event.\n     */\n    function _grantRole(bytes32 role, address account) internal virtual {\n        if (!hasRole(role, account)) {\n            _roles[role].members[account] = true;\n            emit RoleGranted(role, account, _msgSender());\n        }\n    }\n\n    /**\n     * @dev Revokes `role` from `account`.\n     *\n     * Internal function without access restriction.\n     *\n     * May emit a {RoleRevoked} event.\n     */\n    function _revokeRole(bytes32 role, address account) internal virtual {\n        if (hasRole(role, account)) {\n            _roles[role].members[account] = false;\n            emit RoleRevoked(role, account, _msgSender());\n        }\n    }\n}\n"
    },
    "@openzeppelin/contracts/access/IAccessControl.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts v4.4.1 (access/IAccessControl.sol)\n\npragma solidity ^0.8.0;\n\n/**\n * @dev External interface of AccessControl declared to support ERC165 detection.\n */\ninterface IAccessControl {\n    /**\n     * @dev Emitted when `newAdminRole` is set as ``role``'s admin role, replacing `previousAdminRole`\n     *\n     * `DEFAULT_ADMIN_ROLE` is the starting admin for all roles, despite\n     * {RoleAdminChanged} not being emitted signaling this.\n     *\n     * _Available since v3.1._\n     */\n    event RoleAdminChanged(bytes32 indexed role, bytes32 indexed previousAdminRole, bytes32 indexed newAdminRole);\n\n    /**\n     * @dev Emitted when `account` is granted `role`.\n     *\n     * `sender` is the account that originated the contract call, an admin role\n     * bearer except when using {AccessControl-_setupRole}.\n     */\n    event RoleGranted(bytes32 indexed role, address indexed account, address indexed sender);\n\n    /**\n     * @dev Emitted when `account` is revoked `role`.\n     *\n     * `sender` is the account that originated the contract call:\n     *   - if using `revokeRole`, it is the admin role bearer\n     *   - if using `renounceRole`, it is the role bearer (i.e. `account`)\n     */\n    event RoleRevoked(bytes32 indexed role, address indexed account, address indexed sender);\n\n    /**\n     * @dev Returns `true` if `account` has been granted `role`.\n     */\n    function hasRole(bytes32 role, address account) external view returns (bool);\n\n    /**\n     * @dev Returns the admin role that controls `role`. See {grantRole} and\n     * {revokeRole}.\n     *\n     * To change a role's admin, use {AccessControl-_setRoleAdmin}.\n     */\n    function getRoleAdmin(bytes32 role) external view returns (bytes32);\n\n    /**\n     * @dev Grants `role` to `account`.\n     *\n     * If `account` had not been already granted `role`, emits a {RoleGranted}\n     * event.\n     *\n     * Requirements:\n     *\n     * - the caller must have ``role``'s admin role.\n     */\n    function grantRole(bytes32 role, address account) external;\n\n    /**\n     * @dev Revokes `role` from `account`.\n     *\n     * If `account` had been granted `role`, emits a {RoleRevoked} event.\n     *\n     * Requirements:\n     *\n     * - the caller must have ``role``'s admin role.\n     */\n    function revokeRole(bytes32 role, address account) external;\n\n    /**\n     * @dev Revokes `role` from the calling account.\n     *\n     * Roles are often managed via {grantRole} and {revokeRole}: this function's\n     * purpose is to provide a mechanism for accounts to lose their privileges\n     * if they are compromised (such as when a trusted device is misplaced).\n     *\n     * If the calling account had been granted `role`, emits a {RoleRevoked}\n     * event.\n     *\n     * Requirements:\n     *\n     * - the caller must be `account`.\n     */\n    function renounceRole(bytes32 role, address account) external;\n}\n"
    },
    "@openzeppelin/contracts/access/Ownable.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v4.7.0) (access/Ownable.sol)\n\npragma solidity ^0.8.0;\n\nimport \"../utils/Context.sol\";\n\n/**\n * @dev Contract module which provides a basic access control mechanism, where\n * there is an account (an owner) that can be granted exclusive access to\n * specific functions.\n *\n * By default, the owner account will be the one that deploys the contract. This\n * can later be changed with {transferOwnership}.\n *\n * This module is used through inheritance. It will make available the modifier\n * `onlyOwner`, which can be applied to your functions to restrict their use to\n * the owner.\n */\nabstract contract Ownable is Context {\n    address private _owner;\n\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\n\n    /**\n     * @dev Initializes the contract setting the deployer as the initial owner.\n     */\n    constructor() {\n        _transferOwnership(_msgSender());\n    }\n\n    /**\n     * @dev Throws if called by any account other than the owner.\n     */\n    modifier onlyOwner() {\n        _checkOwner();\n        _;\n    }\n\n    /**\n     * @dev Returns the address of the current owner.\n     */\n    function owner() public view virtual returns (address) {\n        return _owner;\n    }\n\n    /**\n     * @dev Throws if the sender is not the owner.\n     */\n    function _checkOwner() internal view virtual {\n        require(owner() == _msgSender(), \"Ownable: caller is not the owner\");\n    }\n\n    /**\n     * @dev Leaves the contract without owner. It will not be possible to call\n     * `onlyOwner` functions anymore. Can only be called by the current owner.\n     *\n     * NOTE: Renouncing ownership will leave the contract without an owner,\n     * thereby removing any functionality that is only available to the owner.\n     */\n    function renounceOwnership() public virtual onlyOwner {\n        _transferOwnership(address(0));\n    }\n\n    /**\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\n     * Can only be called by the current owner.\n     */\n    function transferOwnership(address newOwner) public virtual onlyOwner {\n        require(newOwner != address(0), \"Ownable: new owner is the zero address\");\n        _transferOwnership(newOwner);\n    }\n\n    /**\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\n     * Internal function without access restriction.\n     */\n    function _transferOwnership(address newOwner) internal virtual {\n        address oldOwner = _owner;\n        _owner = newOwner;\n        emit OwnershipTransferred(oldOwner, newOwner);\n    }\n}\n"
    },
    "@openzeppelin/contracts/security/Pausable.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v4.7.0) (security/Pausable.sol)\n\npragma solidity ^0.8.0;\n\nimport \"../utils/Context.sol\";\n\n/**\n * @dev Contract module which allows children to implement an emergency stop\n * mechanism that can be triggered by an authorized account.\n *\n * This module is used through inheritance. It will make available the\n * modifiers `whenNotPaused` and `whenPaused`, which can be applied to\n * the functions of your contract. Note that they will not be pausable by\n * simply including this module, only once the modifiers are put in place.\n */\nabstract contract Pausable is Context {\n    /**\n     * @dev Emitted when the pause is triggered by `account`.\n     */\n    event Paused(address account);\n\n    /**\n     * @dev Emitted when the pause is lifted by `account`.\n     */\n    event Unpaused(address account);\n\n    bool private _paused;\n\n    /**\n     * @dev Initializes the contract in unpaused state.\n     */\n    constructor() {\n        _paused = false;\n    }\n\n    /**\n     * @dev Modifier to make a function callable only when the contract is not paused.\n     *\n     * Requirements:\n     *\n     * - The contract must not be paused.\n     */\n    modifier whenNotPaused() {\n        _requireNotPaused();\n        _;\n    }\n\n    /**\n     * @dev Modifier to make a function callable only when the contract is paused.\n     *\n     * Requirements:\n     *\n     * - The contract must be paused.\n     */\n    modifier whenPaused() {\n        _requirePaused();\n        _;\n    }\n\n    /**\n     * @dev Returns true if the contract is paused, and false otherwise.\n     */\n    function paused() public view virtual returns (bool) {\n        return _paused;\n    }\n\n    /**\n     * @dev Throws if the contract is paused.\n     */\n    function _requireNotPaused() internal view virtual {\n        require(!paused(), \"Pausable: paused\");\n    }\n\n    /**\n     * @dev Throws if the contract is not paused.\n     */\n    function _requirePaused() internal view virtual {\n        require(paused(), \"Pausable: not paused\");\n    }\n\n    /**\n     * @dev Triggers stopped state.\n     *\n     * Requirements:\n     *\n     * - The contract must not be paused.\n     */\n    function _pause() internal virtual whenNotPaused {\n        _paused = true;\n        emit Paused(_msgSender());\n    }\n\n    /**\n     * @dev Returns to normal state.\n     *\n     * Requirements:\n     *\n     * - The contract must be paused.\n     */\n    function _unpause() internal virtual whenPaused {\n        _paused = false;\n        emit Unpaused(_msgSender());\n    }\n}\n"
    },
    "@openzeppelin/contracts/token/ERC20/ERC20.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v4.8.0) (token/ERC20/ERC20.sol)\n\npragma solidity ^0.8.0;\n\nimport \"./IERC20.sol\";\nimport \"./extensions/IERC20Metadata.sol\";\nimport \"../../utils/Context.sol\";\n\n/**\n * @dev Implementation of the {IERC20} interface.\n *\n * This implementation is agnostic to the way tokens are created. This means\n * that a supply mechanism has to be added in a derived contract using {_mint}.\n * For a generic mechanism see {ERC20PresetMinterPauser}.\n *\n * TIP: For a detailed writeup see our guide\n * https://forum.openzeppelin.com/t/how-to-implement-erc20-supply-mechanisms/226[How\n * to implement supply mechanisms].\n *\n * We have followed general OpenZeppelin Contracts guidelines: functions revert\n * instead returning `false` on failure. This behavior is nonetheless\n * conventional and does not conflict with the expectations of ERC20\n * applications.\n *\n * Additionally, an {Approval} event is emitted on calls to {transferFrom}.\n * This allows applications to reconstruct the allowance for all accounts just\n * by listening to said events. Other implementations of the EIP may not emit\n * these events, as it isn't required by the specification.\n *\n * Finally, the non-standard {decreaseAllowance} and {increaseAllowance}\n * functions have been added to mitigate the well-known issues around setting\n * allowances. See {IERC20-approve}.\n */\ncontract ERC20 is Context, IERC20, IERC20Metadata {\n    mapping(address => uint256) private _balances;\n\n    mapping(address => mapping(address => uint256)) private _allowances;\n\n    uint256 private _totalSupply;\n\n    string private _name;\n    string private _symbol;\n\n    /**\n     * @dev Sets the values for {name} and {symbol}.\n     *\n     * The default value of {decimals} is 18. To select a different value for\n     * {decimals} you should overload it.\n     *\n     * All two of these values are immutable: they can only be set once during\n     * construction.\n     */\n    constructor(string memory name_, string memory symbol_) {\n        _name = name_;\n        _symbol = symbol_;\n    }\n\n    /**\n     * @dev Returns the name of the token.\n     */\n    function name() public view virtual override returns (string memory) {\n        return _name;\n    }\n\n    /**\n     * @dev Returns the symbol of the token, usually a shorter version of the\n     * name.\n     */\n    function symbol() public view virtual override returns (string memory) {\n        return _symbol;\n    }\n\n    /**\n     * @dev Returns the number of decimals used to get its user representation.\n     * For example, if `decimals` equals `2`, a balance of `505` tokens should\n     * be displayed to a user as `5.05` (`505 / 10 ** 2`).\n     *\n     * Tokens usually opt for a value of 18, imitating the relationship between\n     * Ether and Wei. This is the value {ERC20} uses, unless this function is\n     * overridden;\n     *\n     * NOTE: This information is only used for _display_ purposes: it in\n     * no way affects any of the arithmetic of the contract, including\n     * {IERC20-balanceOf} and {IERC20-transfer}.\n     */\n    function decimals() public view virtual override returns (uint8) {\n        return 18;\n    }\n\n    /**\n     * @dev See {IERC20-totalSupply}.\n     */\n    function totalSupply() public view virtual override returns (uint256) {\n        return _totalSupply;\n    }\n\n    /**\n     * @dev See {IERC20-balanceOf}.\n     */\n    function balanceOf(address account) public view virtual override returns (uint256) {\n        return _balances[account];\n    }\n\n    /**\n     * @dev See {IERC20-transfer}.\n     *\n     * Requirements:\n     *\n     * - `to` cannot be the zero address.\n     * - the caller must have a balance of at least `amount`.\n     */\n    function transfer(address to, uint256 amount) public virtual override returns (bool) {\n        address owner = _msgSender();\n        _transfer(owner, to, amount);\n        return true;\n    }\n\n    /**\n     * @dev See {IERC20-allowance}.\n     */\n    function allowance(address owner, address spender) public view virtual override returns (uint256) {\n        return _allowances[owner][spender];\n    }\n\n    /**\n     * @dev See {IERC20-approve}.\n     *\n     * NOTE: If `amount` is the maximum `uint256`, the allowance is not updated on\n     * `transferFrom`. This is semantically equivalent to an infinite approval.\n     *\n     * Requirements:\n     *\n     * - `spender` cannot be the zero address.\n     */\n    function approve(address spender, uint256 amount) public virtual override returns (bool) {\n        address owner = _msgSender();\n        _approve(owner, spender, amount);\n        return true;\n    }\n\n    /**\n     * @dev See {IERC20-transferFrom}.\n     *\n     * Emits an {Approval} event indicating the updated allowance. This is not\n     * required by the EIP. See the note at the beginning of {ERC20}.\n     *\n     * NOTE: Does not update the allowance if the current allowance\n     * is the maximum `uint256`.\n     *\n     * Requirements:\n     *\n     * - `from` and `to` cannot be the zero address.\n     * - `from` must have a balance of at least `amount`.\n     * - the caller must have allowance for ``from``'s tokens of at least\n     * `amount`.\n     */\n    function transferFrom(\n        address from,\n        address to,\n        uint256 amount\n    ) public virtual override returns (bool) {\n        address spender = _msgSender();\n        _spendAllowance(from, spender, amount);\n        _transfer(from, to, amount);\n        return true;\n    }\n\n    /**\n     * @dev Atomically increases the allowance granted to `spender` by the caller.\n     *\n     * This is an alternative to {approve} that can be used as a mitigation for\n     * problems described in {IERC20-approve}.\n     *\n     * Emits an {Approval} event indicating the updated allowance.\n     *\n     * Requirements:\n     *\n     * - `spender` cannot be the zero address.\n     */\n    function increaseAllowance(address spender, uint256 addedValue) public virtual returns (bool) {\n        address owner = _msgSender();\n        _approve(owner, spender, allowance(owner, spender) + addedValue);\n        return true;\n    }\n\n    /**\n     * @dev Atomically decreases the allowance granted to `spender` by the caller.\n     *\n     * This is an alternative to {approve} that can be used as a mitigation for\n     * problems described in {IERC20-approve}.\n     *\n     * Emits an {Approval} event indicating the updated allowance.\n     *\n     * Requirements:\n     *\n     * - `spender` cannot be the zero address.\n     * - `spender` must have allowance for the caller of at least\n     * `subtractedValue`.\n     */\n    function decreaseAllowance(address spender, uint256 subtractedValue) public virtual returns (bool) {\n        address owner = _msgSender();\n        uint256 currentAllowance = allowance(owner, spender);\n        require(currentAllowance >= subtractedValue, \"ERC20: decreased allowance below zero\");\n        unchecked {\n            _approve(owner, spender, currentAllowance - subtractedValue);\n        }\n\n        return true;\n    }\n\n    /**\n     * @dev Moves `amount` of tokens from `from` to `to`.\n     *\n     * This internal function is equivalent to {transfer}, and can be used to\n     * e.g. implement automatic token fees, slashing mechanisms, etc.\n     *\n     * Emits a {Transfer} event.\n     *\n     * Requirements:\n     *\n     * - `from` cannot be the zero address.\n     * - `to` cannot be the zero address.\n     * - `from` must have a balance of at least `amount`.\n     */\n    function _transfer(\n        address from,\n        address to,\n        uint256 amount\n    ) internal virtual {\n        require(from != address(0), \"ERC20: transfer from the zero address\");\n        require(to != address(0), \"ERC20: transfer to the zero address\");\n\n        _beforeTokenTransfer(from, to, amount);\n\n        uint256 fromBalance = _balances[from];\n        require(fromBalance >= amount, \"ERC20: transfer amount exceeds balance\");\n        unchecked {\n            _balances[from] = fromBalance - amount;\n            // Overflow not possible: the sum of all balances is capped by totalSupply, and the sum is preserved by\n            // decrementing then incrementing.\n            _balances[to] += amount;\n        }\n\n        emit Transfer(from, to, amount);\n\n        _afterTokenTransfer(from, to, amount);\n    }\n\n    /** @dev Creates `amount` tokens and assigns them to `account`, increasing\n     * the total supply.\n     *\n     * Emits a {Transfer} event with `from` set to the zero address.\n     *\n     * Requirements:\n     *\n     * - `account` cannot be the zero address.\n     */\n    function _mint(address account, uint256 amount) internal virtual {\n        require(account != address(0), \"ERC20: mint to the zero address\");\n\n        _beforeTokenTransfer(address(0), account, amount);\n\n        _totalSupply += amount;\n        unchecked {\n            // Overflow not possible: balance + amount is at most totalSupply + amount, which is checked above.\n            _balances[account] += amount;\n        }\n        emit Transfer(address(0), account, amount);\n\n        _afterTokenTransfer(address(0), account, amount);\n    }\n\n    /**\n     * @dev Destroys `amount` tokens from `account`, reducing the\n     * total supply.\n     *\n     * Emits a {Transfer} event with `to` set to the zero address.\n     *\n     * Requirements:\n     *\n     * - `account` cannot be the zero address.\n     * - `account` must have at least `amount` tokens.\n     */\n    function _burn(address account, uint256 amount) internal virtual {\n        require(account != address(0), \"ERC20: burn from the zero address\");\n\n        _beforeTokenTransfer(account, address(0), amount);\n\n        uint256 accountBalance = _balances[account];\n        require(accountBalance >= amount, \"ERC20: burn amount exceeds balance\");\n        unchecked {\n            _balances[account] = accountBalance - amount;\n            // Overflow not possible: amount <= accountBalance <= totalSupply.\n            _totalSupply -= amount;\n        }\n\n        emit Transfer(account, address(0), amount);\n\n        _afterTokenTransfer(account, address(0), amount);\n    }\n\n    /**\n     * @dev Sets `amount` as the allowance of `spender` over the `owner` s tokens.\n     *\n     * This internal function is equivalent to `approve`, and can be used to\n     * e.g. set automatic allowances for certain subsystems, etc.\n     *\n     * Emits an {Approval} event.\n     *\n     * Requirements:\n     *\n     * - `owner` cannot be the zero address.\n     * - `spender` cannot be the zero address.\n     */\n    function _approve(\n        address owner,\n        address spender,\n        uint256 amount\n    ) internal virtual {\n        require(owner != address(0), \"ERC20: approve from the zero address\");\n        require(spender != address(0), \"ERC20: approve to the zero address\");\n\n        _allowances[owner][spender] = amount;\n        emit Approval(owner, spender, amount);\n    }\n\n    /**\n     * @dev Updates `owner` s allowance for `spender` based on spent `amount`.\n     *\n     * Does not update the allowance amount in case of infinite allowance.\n     * Revert if not enough allowance is available.\n     *\n     * Might emit an {Approval} event.\n     */\n    function _spendAllowance(\n        address owner,\n        address spender,\n        uint256 amount\n    ) internal virtual {\n        uint256 currentAllowance = allowance(owner, spender);\n        if (currentAllowance != type(uint256).max) {\n            require(currentAllowance >= amount, \"ERC20: insufficient allowance\");\n            unchecked {\n                _approve(owner, spender, currentAllowance - amount);\n            }\n        }\n    }\n\n    /**\n     * @dev Hook that is called before any transfer of tokens. This includes\n     * minting and burning.\n     *\n     * Calling conditions:\n     *\n     * - when `from` and `to` are both non-zero, `amount` of ``from``'s tokens\n     * will be transferred to `to`.\n     * - when `from` is zero, `amount` tokens will be minted for `to`.\n     * - when `to` is zero, `amount` of ``from``'s tokens will be burned.\n     * - `from` and `to` are never both zero.\n     *\n     * To learn more about hooks, head to xref:ROOT:extending-contracts.adoc#using-hooks[Using Hooks].\n     */\n    function _beforeTokenTransfer(\n        address from,\n        address to,\n        uint256 amount\n    ) internal virtual {}\n\n    /**\n     * @dev Hook that is called after any transfer of tokens. This includes\n     * minting and burning.\n     *\n     * Calling conditions:\n     *\n     * - when `from` and `to` are both non-zero, `amount` of ``from``'s tokens\n     * has been transferred to `to`.\n     * - when `from` is zero, `amount` tokens have been minted for `to`.\n     * - when `to` is zero, `amount` of ``from``'s tokens have been burned.\n     * - `from` and `to` are never both zero.\n     *\n     * To learn more about hooks, head to xref:ROOT:extending-contracts.adoc#using-hooks[Using Hooks].\n     */\n    function _afterTokenTransfer(\n        address from,\n        address to,\n        uint256 amount\n    ) internal virtual {}\n}\n"
    },
    "@openzeppelin/contracts/token/ERC20/extensions/ERC20Burnable.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v4.5.0) (token/ERC20/extensions/ERC20Burnable.sol)\n\npragma solidity ^0.8.0;\n\nimport \"../ERC20.sol\";\nimport \"../../../utils/Context.sol\";\n\n/**\n * @dev Extension of {ERC20} that allows token holders to destroy both their own\n * tokens and those that they have an allowance for, in a way that can be\n * recognized off-chain (via event analysis).\n */\nabstract contract ERC20Burnable is Context, ERC20 {\n    /**\n     * @dev Destroys `amount` tokens from the caller.\n     *\n     * See {ERC20-_burn}.\n     */\n    function burn(uint256 amount) public virtual {\n        _burn(_msgSender(), amount);\n    }\n\n    /**\n     * @dev Destroys `amount` tokens from `account`, deducting from the caller's\n     * allowance.\n     *\n     * See {ERC20-_burn} and {ERC20-allowance}.\n     *\n     * Requirements:\n     *\n     * - the caller must have allowance for ``accounts``'s tokens of at least\n     * `amount`.\n     */\n    function burnFrom(address account, uint256 amount) public virtual {\n        _spendAllowance(account, _msgSender(), amount);\n        _burn(account, amount);\n    }\n}\n"
    },
    "@openzeppelin/contracts/token/ERC20/extensions/IERC20Metadata.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts v4.4.1 (token/ERC20/extensions/IERC20Metadata.sol)\n\npragma solidity ^0.8.0;\n\nimport \"../IERC20.sol\";\n\n/**\n * @dev Interface for the optional metadata functions from the ERC20 standard.\n *\n * _Available since v4.1._\n */\ninterface IERC20Metadata is IERC20 {\n    /**\n     * @dev Returns the name of the token.\n     */\n    function name() external view returns (string memory);\n\n    /**\n     * @dev Returns the symbol of the token.\n     */\n    function symbol() external view returns (string memory);\n\n    /**\n     * @dev Returns the decimals places of the token.\n     */\n    function decimals() external view returns (uint8);\n}\n"
    },
    "@openzeppelin/contracts/token/ERC20/IERC20.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v4.6.0) (token/ERC20/IERC20.sol)\n\npragma solidity ^0.8.0;\n\n/**\n * @dev Interface of the ERC20 standard as defined in the EIP.\n */\ninterface IERC20 {\n    /**\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\n     * another (`to`).\n     *\n     * Note that `value` may be zero.\n     */\n    event Transfer(address indexed from, address indexed to, uint256 value);\n\n    /**\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\n     * a call to {approve}. `value` is the new allowance.\n     */\n    event Approval(address indexed owner, address indexed spender, uint256 value);\n\n    /**\n     * @dev Returns the amount of tokens in existence.\n     */\n    function totalSupply() external view returns (uint256);\n\n    /**\n     * @dev Returns the amount of tokens owned by `account`.\n     */\n    function balanceOf(address account) external view returns (uint256);\n\n    /**\n     * @dev Moves `amount` tokens from the caller's account to `to`.\n     *\n     * Returns a boolean value indicating whether the operation succeeded.\n     *\n     * Emits a {Transfer} event.\n     */\n    function transfer(address to, uint256 amount) external returns (bool);\n\n    /**\n     * @dev Returns the remaining number of tokens that `spender` will be\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\n     * zero by default.\n     *\n     * This value changes when {approve} or {transferFrom} are called.\n     */\n    function allowance(address owner, address spender) external view returns (uint256);\n\n    /**\n     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\n     *\n     * Returns a boolean value indicating whether the operation succeeded.\n     *\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\n     * that someone may use both the old and the new allowance by unfortunate\n     * transaction ordering. One possible solution to mitigate this race\n     * condition is to first reduce the spender's allowance to 0 and set the\n     * desired value afterwards:\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\n     *\n     * Emits an {Approval} event.\n     */\n    function approve(address spender, uint256 amount) external returns (bool);\n\n    /**\n     * @dev Moves `amount` tokens from `from` to `to` using the\n     * allowance mechanism. `amount` is then deducted from the caller's\n     * allowance.\n     *\n     * Returns a boolean value indicating whether the operation succeeded.\n     *\n     * Emits a {Transfer} event.\n     */\n    function transferFrom(\n        address from,\n        address to,\n        uint256 amount\n    ) external returns (bool);\n}\n"
    },
    "@openzeppelin/contracts/utils/Context.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts v4.4.1 (utils/Context.sol)\n\npragma solidity ^0.8.0;\n\n/**\n * @dev Provides information about the current execution context, including the\n * sender of the transaction and its data. While these are generally available\n * via msg.sender and msg.data, they should not be accessed in such a direct\n * manner, since when dealing with meta-transactions the account sending and\n * paying for execution may not be the actual sender (as far as an application\n * is concerned).\n *\n * This contract is only required for intermediate, library-like contracts.\n */\nabstract contract Context {\n    function _msgSender() internal view virtual returns (address) {\n        return msg.sender;\n    }\n\n    function _msgData() internal view virtual returns (bytes calldata) {\n        return msg.data;\n    }\n}\n"
    },
    "@openzeppelin/contracts/utils/introspection/ERC165.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts v4.4.1 (utils/introspection/ERC165.sol)\n\npragma solidity ^0.8.0;\n\nimport \"./IERC165.sol\";\n\n/**\n * @dev Implementation of the {IERC165} interface.\n *\n * Contracts that want to implement ERC165 should inherit from this contract and override {supportsInterface} to check\n * for the additional interface id that will be supported. For example:\n *\n * ```solidity\n * function supportsInterface(bytes4 interfaceId) public view virtual override returns (bool) {\n *     return interfaceId == type(MyInterface).interfaceId || super.supportsInterface(interfaceId);\n * }\n * ```\n *\n * Alternatively, {ERC165Storage} provides an easier to use but more expensive implementation.\n */\nabstract contract ERC165 is IERC165 {\n    /**\n     * @dev See {IERC165-supportsInterface}.\n     */\n    function supportsInterface(bytes4 interfaceId) public view virtual override returns (bool) {\n        return interfaceId == type(IERC165).interfaceId;\n    }\n}\n"
    },
    "@openzeppelin/contracts/utils/introspection/IERC165.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts v4.4.1 (utils/introspection/IERC165.sol)\n\npragma solidity ^0.8.0;\n\n/**\n * @dev Interface of the ERC165 standard, as defined in the\n * https://eips.ethereum.org/EIPS/eip-165[EIP].\n *\n * Implementers can declare support of contract interfaces, which can then be\n * queried by others ({ERC165Checker}).\n *\n * For an implementation, see {ERC165}.\n */\ninterface IERC165 {\n    /**\n     * @dev Returns true if this contract implements the interface defined by\n     * `interfaceId`. See the corresponding\n     * https://eips.ethereum.org/EIPS/eip-165#how-interfaces-are-identified[EIP section]\n     * to learn more about how these ids are created.\n     *\n     * This function call must use less than 30 000 gas.\n     */\n    function supportsInterface(bytes4 interfaceId) external view returns (bool);\n}\n"
    },
    "@openzeppelin/contracts/utils/math/Math.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v4.8.0) (utils/math/Math.sol)\n\npragma solidity ^0.8.0;\n\n/**\n * @dev Standard math utilities missing in the Solidity language.\n */\nlibrary Math {\n    enum Rounding {\n        Down, // Toward negative infinity\n        Up, // Toward infinity\n        Zero // Toward zero\n    }\n\n    /**\n     * @dev Returns the largest of two numbers.\n     */\n    function max(uint256 a, uint256 b) internal pure returns (uint256) {\n        return a > b ? a : b;\n    }\n\n    /**\n     * @dev Returns the smallest of two numbers.\n     */\n    function min(uint256 a, uint256 b) internal pure returns (uint256) {\n        return a < b ? a : b;\n    }\n\n    /**\n     * @dev Returns the average of two numbers. The result is rounded towards\n     * zero.\n     */\n    function average(uint256 a, uint256 b) internal pure returns (uint256) {\n        // (a + b) / 2 can overflow.\n        return (a & b) + (a ^ b) / 2;\n    }\n\n    /**\n     * @dev Returns the ceiling of the division of two numbers.\n     *\n     * This differs from standard division with `/` in that it rounds up instead\n     * of rounding down.\n     */\n    function ceilDiv(uint256 a, uint256 b) internal pure returns (uint256) {\n        // (a + b - 1) / b can overflow on addition, so we distribute.\n        return a == 0 ? 0 : (a - 1) / b + 1;\n    }\n\n    /**\n     * @notice Calculates floor(x * y / denominator) with full precision. Throws if result overflows a uint256 or denominator == 0\n     * @dev Original credit to Remco Bloemen under MIT license (https://xn--2-umb.com/21/muldiv)\n     * with further edits by Uniswap Labs also under MIT license.\n     */\n    function mulDiv(\n        uint256 x,\n        uint256 y,\n        uint256 denominator\n    ) internal pure returns (uint256 result) {\n        unchecked {\n            // 512-bit multiply [prod1 prod0] = x * y. Compute the product mod 2^256 and mod 2^256 - 1, then use\n            // use the Chinese Remainder Theorem to reconstruct the 512 bit result. The result is stored in two 256\n            // variables such that product = prod1 * 2^256 + prod0.\n            uint256 prod0; // Least significant 256 bits of the product\n            uint256 prod1; // Most significant 256 bits of the product\n            assembly {\n                let mm := mulmod(x, y, not(0))\n                prod0 := mul(x, y)\n                prod1 := sub(sub(mm, prod0), lt(mm, prod0))\n            }\n\n            // Handle non-overflow cases, 256 by 256 division.\n            if (prod1 == 0) {\n                return prod0 / denominator;\n            }\n\n            // Make sure the result is less than 2^256. Also prevents denominator == 0.\n            require(denominator > prod1);\n\n            ///////////////////////////////////////////////\n            // 512 by 256 division.\n            ///////////////////////////////////////////////\n\n            // Make division exact by subtracting the remainder from [prod1 prod0].\n            uint256 remainder;\n            assembly {\n                // Compute remainder using mulmod.\n                remainder := mulmod(x, y, denominator)\n\n                // Subtract 256 bit number from 512 bit number.\n                prod1 := sub(prod1, gt(remainder, prod0))\n                prod0 := sub(prod0, remainder)\n            }\n\n            // Factor powers of two out of denominator and compute largest power of two divisor of denominator. Always >= 1.\n            // See https://cs.stackexchange.com/q/138556/92363.\n\n            // Does not overflow because the denominator cannot be zero at this stage in the function.\n            uint256 twos = denominator & (~denominator + 1);\n            assembly {\n                // Divide denominator by twos.\n                denominator := div(denominator, twos)\n\n                // Divide [prod1 prod0] by twos.\n                prod0 := div(prod0, twos)\n\n                // Flip twos such that it is 2^256 / twos. If twos is zero, then it becomes one.\n                twos := add(div(sub(0, twos), twos), 1)\n            }\n\n            // Shift in bits from prod1 into prod0.\n            prod0 |= prod1 * twos;\n\n            // Invert denominator mod 2^256. Now that denominator is an odd number, it has an inverse modulo 2^256 such\n            // that denominator * inv = 1 mod 2^256. Compute the inverse by starting with a seed that is correct for\n            // four bits. That is, denominator * inv = 1 mod 2^4.\n            uint256 inverse = (3 * denominator) ^ 2;\n\n            // Use the Newton-Raphson iteration to improve the precision. Thanks to Hensel's lifting lemma, this also works\n            // in modular arithmetic, doubling the correct bits in each step.\n            inverse *= 2 - denominator * inverse; // inverse mod 2^8\n            inverse *= 2 - denominator * inverse; // inverse mod 2^16\n            inverse *= 2 - denominator * inverse; // inverse mod 2^32\n            inverse *= 2 - denominator * inverse; // inverse mod 2^64\n            inverse *= 2 - denominator * inverse; // inverse mod 2^128\n            inverse *= 2 - denominator * inverse; // inverse mod 2^256\n\n            // Because the division is now exact we can divide by multiplying with the modular inverse of denominator.\n            // This will give us the correct result modulo 2^256. Since the preconditions guarantee that the outcome is\n            // less than 2^256, this is the final result. We don't need to compute the high bits of the result and prod1\n            // is no longer required.\n            result = prod0 * inverse;\n            return result;\n        }\n    }\n\n    /**\n     * @notice Calculates x * y / denominator with full precision, following the selected rounding direction.\n     */\n    function mulDiv(\n        uint256 x,\n        uint256 y,\n        uint256 denominator,\n        Rounding rounding\n    ) internal pure returns (uint256) {\n        uint256 result = mulDiv(x, y, denominator);\n        if (rounding == Rounding.Up && mulmod(x, y, denominator) > 0) {\n            result += 1;\n        }\n        return result;\n    }\n\n    /**\n     * @dev Returns the square root of a number. If the number is not a perfect square, the value is rounded down.\n     *\n     * Inspired by Henry S. Warren, Jr.'s \"Hacker's Delight\" (Chapter 11).\n     */\n    function sqrt(uint256 a) internal pure returns (uint256) {\n        if (a == 0) {\n            return 0;\n        }\n\n        // For our first guess, we get the biggest power of 2 which is smaller than the square root of the target.\n        //\n        // We know that the \"msb\" (most significant bit) of our target number `a` is a power of 2 such that we have\n        // `msb(a) <= a < 2*msb(a)`. This value can be written `msb(a)=2**k` with `k=log2(a)`.\n        //\n        // This can be rewritten `2**log2(a) <= a < 2**(log2(a) + 1)`\n        // → `sqrt(2**k) <= sqrt(a) < sqrt(2**(k+1))`\n        // → `2**(k/2) <= sqrt(a) < 2**((k+1)/2) <= 2**(k/2 + 1)`\n        //\n        // Consequently, `2**(log2(a) / 2)` is a good first approximation of `sqrt(a)` with at least 1 correct bit.\n        uint256 result = 1 << (log2(a) >> 1);\n\n        // At this point `result` is an estimation with one bit of precision. We know the true value is a uint128,\n        // since it is the square root of a uint256. Newton's method converges quadratically (precision doubles at\n        // every iteration). We thus need at most 7 iteration to turn our partial result with one bit of precision\n        // into the expected uint128 result.\n        unchecked {\n            result = (result + a / result) >> 1;\n            result = (result + a / result) >> 1;\n            result = (result + a / result) >> 1;\n            result = (result + a / result) >> 1;\n            result = (result + a / result) >> 1;\n            result = (result + a / result) >> 1;\n            result = (result + a / result) >> 1;\n            return min(result, a / result);\n        }\n    }\n\n    /**\n     * @notice Calculates sqrt(a), following the selected rounding direction.\n     */\n    function sqrt(uint256 a, Rounding rounding) internal pure returns (uint256) {\n        unchecked {\n            uint256 result = sqrt(a);\n            return result + (rounding == Rounding.Up && result * result < a ? 1 : 0);\n        }\n    }\n\n    /**\n     * @dev Return the log in base 2, rounded down, of a positive value.\n     * Returns 0 if given 0.\n     */\n    function log2(uint256 value) internal pure returns (uint256) {\n        uint256 result = 0;\n        unchecked {\n            if (value >> 128 > 0) {\n                value >>= 128;\n                result += 128;\n            }\n            if (value >> 64 > 0) {\n                value >>= 64;\n                result += 64;\n            }\n            if (value >> 32 > 0) {\n                value >>= 32;\n                result += 32;\n            }\n            if (value >> 16 > 0) {\n                value >>= 16;\n                result += 16;\n            }\n            if (value >> 8 > 0) {\n                value >>= 8;\n                result += 8;\n            }\n            if (value >> 4 > 0) {\n                value >>= 4;\n                result += 4;\n            }\n            if (value >> 2 > 0) {\n                value >>= 2;\n                result += 2;\n            }\n            if (value >> 1 > 0) {\n                result += 1;\n            }\n        }\n        return result;\n    }\n\n    /**\n     * @dev Return the log in base 2, following the selected rounding direction, of a positive value.\n     * Returns 0 if given 0.\n     */\n    function log2(uint256 value, Rounding rounding) internal pure returns (uint256) {\n        unchecked {\n            uint256 result = log2(value);\n            return result + (rounding == Rounding.Up && 1 << result < value ? 1 : 0);\n        }\n    }\n\n    /**\n     * @dev Return the log in base 10, rounded down, of a positive value.\n     * Returns 0 if given 0.\n     */\n    function log10(uint256 value) internal pure returns (uint256) {\n        uint256 result = 0;\n        unchecked {\n            if (value >= 10**64) {\n                value /= 10**64;\n                result += 64;\n            }\n            if (value >= 10**32) {\n                value /= 10**32;\n                result += 32;\n            }\n            if (value >= 10**16) {\n                value /= 10**16;\n                result += 16;\n            }\n            if (value >= 10**8) {\n                value /= 10**8;\n                result += 8;\n            }\n            if (value >= 10**4) {\n                value /= 10**4;\n                result += 4;\n            }\n            if (value >= 10**2) {\n                value /= 10**2;\n                result += 2;\n            }\n            if (value >= 10**1) {\n                result += 1;\n            }\n        }\n        return result;\n    }\n\n    /**\n     * @dev Return the log in base 10, following the selected rounding direction, of a positive value.\n     * Returns 0 if given 0.\n     */\n    function log10(uint256 value, Rounding rounding) internal pure returns (uint256) {\n        unchecked {\n            uint256 result = log10(value);\n            return result + (rounding == Rounding.Up && 10**result < value ? 1 : 0);\n        }\n    }\n\n    /**\n     * @dev Return the log in base 256, rounded down, of a positive value.\n     * Returns 0 if given 0.\n     *\n     * Adding one to the result gives the number of pairs of hex symbols needed to represent `value` as a hex string.\n     */\n    function log256(uint256 value) internal pure returns (uint256) {\n        uint256 result = 0;\n        unchecked {\n            if (value >> 128 > 0) {\n                value >>= 128;\n                result += 16;\n            }\n            if (value >> 64 > 0) {\n                value >>= 64;\n                result += 8;\n            }\n            if (value >> 32 > 0) {\n                value >>= 32;\n                result += 4;\n            }\n            if (value >> 16 > 0) {\n                value >>= 16;\n                result += 2;\n            }\n            if (value >> 8 > 0) {\n                result += 1;\n            }\n        }\n        return result;\n    }\n\n    /**\n     * @dev Return the log in base 10, following the selected rounding direction, of a positive value.\n     * Returns 0 if given 0.\n     */\n    function log256(uint256 value, Rounding rounding) internal pure returns (uint256) {\n        unchecked {\n            uint256 result = log256(value);\n            return result + (rounding == Rounding.Up && 1 << (result * 8) < value ? 1 : 0);\n        }\n    }\n}\n"
    },
    "@openzeppelin/contracts/utils/math/SafeMath.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v4.6.0) (utils/math/SafeMath.sol)\n\npragma solidity ^0.8.0;\n\n// CAUTION\n// This version of SafeMath should only be used with Solidity 0.8 or later,\n// because it relies on the compiler's built in overflow checks.\n\n/**\n * @dev Wrappers over Solidity's arithmetic operations.\n *\n * NOTE: `SafeMath` is generally not needed starting with Solidity 0.8, since the compiler\n * now has built in overflow checking.\n */\nlibrary SafeMath {\n    /**\n     * @dev Returns the addition of two unsigned integers, with an overflow flag.\n     *\n     * _Available since v3.4._\n     */\n    function tryAdd(uint256 a, uint256 b) internal pure returns (bool, uint256) {\n        unchecked {\n            uint256 c = a + b;\n            if (c < a) return (false, 0);\n            return (true, c);\n        }\n    }\n\n    /**\n     * @dev Returns the subtraction of two unsigned integers, with an overflow flag.\n     *\n     * _Available since v3.4._\n     */\n    function trySub(uint256 a, uint256 b) internal pure returns (bool, uint256) {\n        unchecked {\n            if (b > a) return (false, 0);\n            return (true, a - b);\n        }\n    }\n\n    /**\n     * @dev Returns the multiplication of two unsigned integers, with an overflow flag.\n     *\n     * _Available since v3.4._\n     */\n    function tryMul(uint256 a, uint256 b) internal pure returns (bool, uint256) {\n        unchecked {\n            // Gas optimization: this is cheaper than requiring 'a' not being zero, but the\n            // benefit is lost if 'b' is also tested.\n            // See: https://github.com/OpenZeppelin/openzeppelin-contracts/pull/522\n            if (a == 0) return (true, 0);\n            uint256 c = a * b;\n            if (c / a != b) return (false, 0);\n            return (true, c);\n        }\n    }\n\n    /**\n     * @dev Returns the division of two unsigned integers, with a division by zero flag.\n     *\n     * _Available since v3.4._\n     */\n    function tryDiv(uint256 a, uint256 b) internal pure returns (bool, uint256) {\n        unchecked {\n            if (b == 0) return (false, 0);\n            return (true, a / b);\n        }\n    }\n\n    /**\n     * @dev Returns the remainder of dividing two unsigned integers, with a division by zero flag.\n     *\n     * _Available since v3.4._\n     */\n    function tryMod(uint256 a, uint256 b) internal pure returns (bool, uint256) {\n        unchecked {\n            if (b == 0) return (false, 0);\n            return (true, a % b);\n        }\n    }\n\n    /**\n     * @dev Returns the addition of two unsigned integers, reverting on\n     * overflow.\n     *\n     * Counterpart to Solidity's `+` operator.\n     *\n     * Requirements:\n     *\n     * - Addition cannot overflow.\n     */\n    function add(uint256 a, uint256 b) internal pure returns (uint256) {\n        return a + b;\n    }\n\n    /**\n     * @dev Returns the subtraction of two unsigned integers, reverting on\n     * overflow (when the result is negative).\n     *\n     * Counterpart to Solidity's `-` operator.\n     *\n     * Requirements:\n     *\n     * - Subtraction cannot overflow.\n     */\n    function sub(uint256 a, uint256 b) internal pure returns (uint256) {\n        return a - b;\n    }\n\n    /**\n     * @dev Returns the multiplication of two unsigned integers, reverting on\n     * overflow.\n     *\n     * Counterpart to Solidity's `*` operator.\n     *\n     * Requirements:\n     *\n     * - Multiplication cannot overflow.\n     */\n    function mul(uint256 a, uint256 b) internal pure returns (uint256) {\n        return a * b;\n    }\n\n    /**\n     * @dev Returns the integer division of two unsigned integers, reverting on\n     * division by zero. The result is rounded towards zero.\n     *\n     * Counterpart to Solidity's `/` operator.\n     *\n     * Requirements:\n     *\n     * - The divisor cannot be zero.\n     */\n    function div(uint256 a, uint256 b) internal pure returns (uint256) {\n        return a / b;\n    }\n\n    /**\n     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\n     * reverting when dividing by zero.\n     *\n     * Counterpart to Solidity's `%` operator. This function uses a `revert`\n     * opcode (which leaves remaining gas untouched) while Solidity uses an\n     * invalid opcode to revert (consuming all remaining gas).\n     *\n     * Requirements:\n     *\n     * - The divisor cannot be zero.\n     */\n    function mod(uint256 a, uint256 b) internal pure returns (uint256) {\n        return a % b;\n    }\n\n    /**\n     * @dev Returns the subtraction of two unsigned integers, reverting with custom message on\n     * overflow (when the result is negative).\n     *\n     * CAUTION: This function is deprecated because it requires allocating memory for the error\n     * message unnecessarily. For custom revert reasons use {trySub}.\n     *\n     * Counterpart to Solidity's `-` operator.\n     *\n     * Requirements:\n     *\n     * - Subtraction cannot overflow.\n     */\n    function sub(\n        uint256 a,\n        uint256 b,\n        string memory errorMessage\n    ) internal pure returns (uint256) {\n        unchecked {\n            require(b <= a, errorMessage);\n            return a - b;\n        }\n    }\n\n    /**\n     * @dev Returns the integer division of two unsigned integers, reverting with custom message on\n     * division by zero. The result is rounded towards zero.\n     *\n     * Counterpart to Solidity's `/` operator. Note: this function uses a\n     * `revert` opcode (which leaves remaining gas untouched) while Solidity\n     * uses an invalid opcode to revert (consuming all remaining gas).\n     *\n     * Requirements:\n     *\n     * - The divisor cannot be zero.\n     */\n    function div(\n        uint256 a,\n        uint256 b,\n        string memory errorMessage\n    ) internal pure returns (uint256) {\n        unchecked {\n            require(b > 0, errorMessage);\n            return a / b;\n        }\n    }\n\n    /**\n     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\n     * reverting with custom message when dividing by zero.\n     *\n     * CAUTION: This function is deprecated because it requires allocating memory for the error\n     * message unnecessarily. For custom revert reasons use {tryMod}.\n     *\n     * Counterpart to Solidity's `%` operator. This function uses a `revert`\n     * opcode (which leaves remaining gas untouched) while Solidity uses an\n     * invalid opcode to revert (consuming all remaining gas).\n     *\n     * Requirements:\n     *\n     * - The divisor cannot be zero.\n     */\n    function mod(\n        uint256 a,\n        uint256 b,\n        string memory errorMessage\n    ) internal pure returns (uint256) {\n        unchecked {\n            require(b > 0, errorMessage);\n            return a % b;\n        }\n    }\n}\n"
    },
    "@openzeppelin/contracts/utils/Strings.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v4.8.0) (utils/Strings.sol)\n\npragma solidity ^0.8.0;\n\nimport \"./math/Math.sol\";\n\n/**\n * @dev String operations.\n */\nlibrary Strings {\n    bytes16 private constant _SYMBOLS = \"0123456789abcdef\";\n    uint8 private constant _ADDRESS_LENGTH = 20;\n\n    /**\n     * @dev Converts a `uint256` to its ASCII `string` decimal representation.\n     */\n    function toString(uint256 value) internal pure returns (string memory) {\n        unchecked {\n            uint256 length = Math.log10(value) + 1;\n            string memory buffer = new string(length);\n            uint256 ptr;\n            /// @solidity memory-safe-assembly\n            assembly {\n                ptr := add(buffer, add(32, length))\n            }\n            while (true) {\n                ptr--;\n                /// @solidity memory-safe-assembly\n                assembly {\n                    mstore8(ptr, byte(mod(value, 10), _SYMBOLS))\n                }\n                value /= 10;\n                if (value == 0) break;\n            }\n            return buffer;\n        }\n    }\n\n    /**\n     * @dev Converts a `uint256` to its ASCII `string` hexadecimal representation.\n     */\n    function toHexString(uint256 value) internal pure returns (string memory) {\n        unchecked {\n            return toHexString(value, Math.log256(value) + 1);\n        }\n    }\n\n    /**\n     * @dev Converts a `uint256` to its ASCII `string` hexadecimal representation with fixed length.\n     */\n    function toHexString(uint256 value, uint256 length) internal pure returns (string memory) {\n        bytes memory buffer = new bytes(2 * length + 2);\n        buffer[0] = \"0\";\n        buffer[1] = \"x\";\n        for (uint256 i = 2 * length + 1; i > 1; --i) {\n            buffer[i] = _SYMBOLS[value & 0xf];\n            value >>= 4;\n        }\n        require(value == 0, \"Strings: hex length insufficient\");\n        return string(buffer);\n    }\n\n    /**\n     * @dev Converts an `address` with fixed length of 20 bytes to its not checksummed ASCII `string` hexadecimal representation.\n     */\n    function toHexString(address addr) internal pure returns (string memory) {\n        return toHexString(uint256(uint160(addr)), _ADDRESS_LENGTH);\n    }\n}\n"
    },
    "contracts/AirdropCarbonv2.sol": {
      "content": "// SPDX-License-Identifier: MIT\npragma solidity ^0.8.0;\n\nimport \"@openzeppelin/contracts/token/ERC20/extensions/ERC20Burnable.sol\";\n\ncontract AirdropCarbonv2 {\n    address public carboV1Addr;\n\n    address public carboV2Addr;\n\n    uint256 public amountSnapshot;\n\n    constructor(address _tokenV1, address _tokenV2, uint256 _amountSnapshot) {\n        carboV1Addr = _tokenV1;\n        carboV2Addr = _tokenV2;\n        amountSnapshot = _amountSnapshot;\n    }\n}\n"
    },
    "contracts/CarboTokenv2.sol": {
      "content": "// SPDX-License-Identifier: MIT\npragma solidity ^0.8.0;\n\nimport \"@openzeppelin/contracts/token/ERC20/extensions/ERC20Burnable.sol\";\nimport \"@openzeppelin/contracts/access/AccessControl.sol\";\n\ncontract CarboTokenv2 is ERC20Burnable, AccessControl {\n    uint256 public capSupply;\n\n    bytes32 public constant ADMIN = keccak256(\"ADMIN\");\n\n    bytes32 public constant CONTRACT_MANAGER = keccak256(\"CONTRACT_MANAGER\");\n\n    address public teamDev;\n\n    uint256 public latestUpdateForTeamDev;\n\n    uint256 public constant secondsPerMonth = 2_592_000;\n\n    constructor(\n        address owner,\n        address nullAddress,\n        address companyReserve,\n        address futureBurning,\n        address contests,\n        address buybacks,\n        address airdrops,\n        address marketing,\n        address treasury,\n        address team,\n        address futurePublic,\n        address liquidityPools\n    ) payable ERC20(\"CLEANCARBON\", \"CARBO\") AccessControl() {\n        capSupply = 500_000_000 * 10 ** decimals();\n        _setupRole(DEFAULT_ADMIN_ROLE, owner);\n        _mint(nullAddress, 80_000_000 * 10 ** decimals());\n        _mint(companyReserve, 15_000_000 * 10 ** decimals());\n        _mint(airdrops, 35_000_000 * 10 ** decimals());\n        _mint(airdrops, 35_000_000 * 10 ** decimals());\n        _mint(marketing, 20_000_000 * 10 ** decimals());\n        _mint(contests, 25_000_000 * 10 ** decimals());\n        _mint(liquidityPools, 25_000_000 * 10 ** decimals());\n        _mint(futurePublic, 25_000_000 * 10 ** decimals());\n        _mint(futureBurning, 90_000_000 * 10 ** decimals());\n        teamDev = team;\n    }\n\n    function _mint(address account, uint256 amount) internal override {\n        require(\n            capSupply >= amount + totalSupply(),\n            \"Token supply out of range\"\n        );\n        super._mint(account, amount);\n    }\n\n    function mint(address account, uint256 amount) external onlyRole(ADMIN) {}\n\n    function claimFunds(address contractAddr) external onlyRole(ADMIN) {\n        // if address is contract\n        require(contractAddr.code.length > 0, \"Not contract \");\n        _transfer(contractAddr, msg.sender, balanceOf(contractAddr));\n    }\n\n    function grantRole(bytes32 role, address account) public override {\n        super._grantRole(role, account);\n    }\n}\n"
    },
    "contracts/StakingCarbon.sol": {
      "content": "// SPDX-License-Identifier: MIT\npragma solidity ^0.8.0;\n\nimport \"@openzeppelin/contracts/token/ERC20/extensions/ERC20Burnable.sol\";\n\ncontract StakingCarbon is ERC20Burnable {\n    constructor() payable ERC20(\"UMAD\", \"UMAD\") {}\n}\n"
    },
    "contracts/v1/CarboToken.sol": {
      "content": "// SPDX-License-Identifier: UNLICENSED\n\npragma solidity ^0.8.0;\n\nimport \"@openzeppelin/contracts/access/Ownable.sol\";\nimport \"@openzeppelin/contracts/security/Pausable.sol\";\nimport \"@openzeppelin/contracts/utils/math/SafeMath.sol\";\nimport \"./interfaces/ICarboToken.sol\";\nimport \"./interfaces/IDividendManager.sol\";\nimport \"./RecoverableFunds.sol\";\nimport \"./WithCallback.sol\";\n\ncontract CarboToken is\n    ICarboToken,\n    Ownable,\n    Pausable,\n    RecoverableFunds,\n    WithCallback\n{\n    using SafeMath for uint256;\n\n    uint16 private constant PERCENT_RATE = 1000;\n    uint256 private constant MAX = ~uint256(0);\n\n    // -----------------------------------------------------------------------------------------------------------------\n    // ERC20\n    // -----------------------------------------------------------------------------------------------------------------\n\n    mapping(address => mapping(address => uint256)) private _allowances;\n    string private _name = \"CLEANCARBON\";\n    string private _symbol = \"CARBO\";\n\n    function name() public view override returns (string memory) {\n        return _name;\n    }\n\n    function symbol() public view override returns (string memory) {\n        return _symbol;\n    }\n\n    function decimals() public pure override returns (uint8) {\n        return 18;\n    }\n\n    function totalSupply() external view override returns (uint256) {\n        return _tTotal;\n    }\n\n    function balanceOf(\n        address account\n    ) external view override returns (uint256) {\n        if (_isExcluded[account]) return _tOwned[account];\n        return tokenFromReflection(_rOwned[account]);\n    }\n\n    function transfer(\n        address recipient,\n        uint256 amount\n    ) external override returns (bool) {\n        _transfer(_msgSender(), recipient, amount);\n        return true;\n    }\n\n    function allowance(\n        address owner,\n        address spender\n    ) external view override returns (uint256) {\n        return _allowances[owner][spender];\n    }\n\n    function approve(\n        address spender,\n        uint256 amount\n    ) public override returns (bool) {\n        _approve(_msgSender(), spender, amount);\n        return true;\n    }\n\n    function transferFrom(\n        address sender,\n        address recipient,\n        uint256 amount\n    ) external override returns (bool) {\n        _transfer(sender, recipient, amount);\n        uint256 currentAllowance = _allowances[sender][_msgSender()];\n        require(\n            currentAllowance >= amount,\n            \"ERC20: transfer amount exceeds allowance\"\n        );\n        unchecked {\n            _approve(sender, _msgSender(), currentAllowance - amount);\n        }\n        return true;\n    }\n\n    function increaseAllowance(\n        address spender,\n        uint256 addedValue\n    ) external override returns (bool) {\n        _approve(\n            _msgSender(),\n            spender,\n            _allowances[_msgSender()][spender] + addedValue\n        );\n        return true;\n    }\n\n    function decreaseAllowance(\n        address spender,\n        uint256 subtractedValue\n    ) external override returns (bool) {\n        uint256 currentAllowance = _allowances[_msgSender()][spender];\n        require(\n            currentAllowance >= subtractedValue,\n            \"ERC20: decreased allowance below zero\"\n        );\n        unchecked {\n            _approve(_msgSender(), spender, currentAllowance - subtractedValue);\n        }\n        return true;\n    }\n\n    function burn(uint256 amount) external override {\n        _burn(_msgSender(), amount);\n    }\n\n    function burnFrom(address account, uint256 amount) external override {\n        uint256 currentAllowance = _allowances[account][_msgSender()];\n        require(\n            currentAllowance >= amount,\n            \"ERC20: burn amount exceeds allowance\"\n        );\n        unchecked {\n            _approve(account, _msgSender(), currentAllowance - amount);\n        }\n        _burn(account, amount);\n    }\n\n    function _approve(address owner, address spender, uint256 amount) internal {\n        require(owner != address(0), \"ERC20: approve from the zero address\");\n        require(spender != address(0), \"ERC20: approve to the zero address\");\n        _allowances[owner][spender] = amount;\n        emit Approval(owner, spender, amount);\n    }\n\n    function _burn(address account, uint256 amount) internal whenNotPaused {\n        require(account != address(0), \"ERC20: burn from the zero address\");\n        uint256 rAmount = _getRAmount(amount, _getRate());\n        require(\n            _rOwned[account] >= rAmount,\n            \"ERC20: burn amount exceeds balance\"\n        );\n        _decreaseBalance(account, amount, rAmount);\n        _decreaseTotalSupply(amount, rAmount);\n        emit Transfer(account, address(0), amount);\n        _burnCallback(account, amount, rAmount);\n    }\n\n    // -----------------------------------------------------------------------------------------------------------------\n    // PAUSABLE\n    // -----------------------------------------------------------------------------------------------------------------\n\n    function pause() external onlyOwner {\n        _pause();\n    }\n\n    function unpause() external onlyOwner {\n        _unpause();\n    }\n\n    // -----------------------------------------------------------------------------------------------------------------\n    // FEES\n    // -----------------------------------------------------------------------------------------------------------------\n\n    mapping(FeeType => Fees) private _fees;\n    mapping(FeeType => FeeAddresses) private _feeAddresses;\n    address private _dividendsAddress;\n    address private _buybackAddress;\n    address private _treasuryAddress;\n    address private _liquidityAddress;\n    mapping(address => bool) private _isTaxable;\n    mapping(address => bool) private _isTaxExempt;\n\n    function getFees(\n        FeeType feeType\n    ) external view override returns (Fees memory) {\n        return _fees[feeType];\n    }\n\n    function setFees(\n        FeeType feeType,\n        uint rfi,\n        uint dividends,\n        uint buyback,\n        uint treasury,\n        uint liquidity\n    ) external override onlyOwner {\n        require(feeType != FeeType.NONE, \"CarboToken: Wrong FeeType\");\n        _fees[feeType] = Fees(rfi, dividends, buyback, treasury, liquidity);\n    }\n\n    function getFeeAddresses(\n        FeeType feeType\n    ) public view override returns (FeeAddresses memory) {\n        return _feeAddresses[feeType];\n    }\n\n    function setFeeAddresses(\n        FeeType feeType,\n        address dividends,\n        address buyback,\n        address treasury,\n        address liquidity\n    ) external override onlyOwner {\n        require(feeType != FeeType.NONE, \"CarboToken: Wrong FeeType\");\n        _feeAddresses[feeType] = FeeAddresses(\n            dividends,\n            buyback,\n            treasury,\n            liquidity\n        );\n    }\n\n    function setTaxable(\n        address account,\n        bool value\n    ) external override onlyOwner {\n        require(_isTaxable[account] != value, \"CarboToken: already set\");\n        _isTaxable[account] = value;\n    }\n\n    function setTaxExempt(\n        address account,\n        bool value\n    ) external override onlyOwner {\n        require(_isTaxExempt[account] != value, \"CarboToken: already set\");\n        _isTaxExempt[account] = value;\n    }\n\n    function _getFeeAmounts(\n        uint256 amount,\n        FeeType feeType\n    ) internal view returns (Fees memory) {\n        Fees memory fees = _fees[feeType];\n        Fees memory feeAmounts;\n        feeAmounts.rfi = amount.mul(fees.rfi).div(PERCENT_RATE);\n        feeAmounts.dividends = amount.mul(fees.dividends).div(PERCENT_RATE);\n        feeAmounts.buyback = amount.mul(fees.buyback).div(PERCENT_RATE);\n        feeAmounts.treasury = amount.mul(fees.treasury).div(PERCENT_RATE);\n        feeAmounts.liquidity = amount.mul(fees.liquidity).div(PERCENT_RATE);\n        return feeAmounts;\n    }\n\n    function _getFeeType(\n        address sender,\n        address recipient\n    ) internal view returns (FeeType) {\n        if (_isTaxExempt[sender] || _isTaxExempt[recipient])\n            return FeeType.NONE;\n        if (_isTaxable[sender]) return FeeType.BUY;\n        if (_isTaxable[recipient]) return FeeType.SELL;\n        return FeeType.NONE;\n    }\n\n    // -----------------------------------------------------------------------------------------------------------------\n    // RFI\n    // -----------------------------------------------------------------------------------------------------------------\n\n    uint256 private _tTotal = 500_000_000 ether;\n    uint256 private _rTotal = (MAX - (MAX % _tTotal));\n    uint256 private _tFeeTotal;\n    mapping(address => uint256) private _rOwned;\n    mapping(address => uint256) private _tOwned;\n    mapping(address => bool) private _isExcluded;\n    address[] private _excluded;\n\n    constructor() {\n        _rOwned[_msgSender()] = _rTotal;\n        emit Transfer(address(0), _msgSender(), _tTotal);\n    }\n\n    function getROwned(\n        address account\n    ) external view override returns (uint256) {\n        return _rOwned[account];\n    }\n\n    function getRTotal() external view override returns (uint256) {\n        return _rTotal;\n    }\n\n    function excludeFromRFI(address account) external override onlyOwner {\n        require(\n            !_isExcluded[account],\n            \"CarboToken: account is already excluded\"\n        );\n        if (_rOwned[account] > 0) {\n            _tOwned[account] = tokenFromReflection(_rOwned[account]);\n        }\n        _isExcluded[account] = true;\n        _excluded.push(account);\n    }\n\n    function includeInRFI(address account) external override onlyOwner {\n        require(\n            _isExcluded[account],\n            \"CarboToken: account is already included\"\n        );\n        for (uint256 i = 0; i < _excluded.length; i++) {\n            if (_excluded[i] == account) {\n                _excluded[i] = _excluded[_excluded.length - 1];\n                _tOwned[account] = 0;\n                _isExcluded[account] = false;\n                _excluded.pop();\n                break;\n            }\n        }\n    }\n\n    function reflect(uint256 tAmount) external override {\n        address account = _msgSender();\n        require(\n            !_isExcluded[account],\n            \"CarboToken: excluded addresses cannot call this function\"\n        );\n        uint256 rAmount = _getRAmount(tAmount, _getRate());\n        _decreaseBalance(account, tAmount, rAmount);\n        _reflect(tAmount, rAmount);\n        _reflectCallback(account, tAmount, rAmount);\n    }\n\n    function reflectionFromToken(\n        uint256 tAmount\n    ) external view override returns (uint256) {\n        require(\n            tAmount <= _tTotal,\n            \"CarboToken: amount must be less than supply\"\n        );\n        return _getRAmount(tAmount, _getRate());\n    }\n\n    function tokenFromReflection(\n        uint256 rAmount\n    ) public view override returns (uint256) {\n        require(\n            rAmount <= _rTotal,\n            \"CarboToken: amount must be less than total reflections\"\n        );\n        uint256 currentRate = _getRate();\n        return rAmount.div(currentRate);\n    }\n\n    function _reflect(uint256 tAmount, uint256 rAmount) internal whenNotPaused {\n        _rTotal = _rTotal.sub(rAmount);\n        _tFeeTotal = _tFeeTotal.add(tAmount);\n        _reflectCallback(tAmount, rAmount);\n    }\n\n    function _getCurrentSupply() internal view returns (uint256, uint256) {\n        uint256 rSupply = _rTotal;\n        uint256 tSupply = _tTotal;\n        for (uint256 i = 0; i < _excluded.length; i++) {\n            if (\n                _rOwned[_excluded[i]] > rSupply ||\n                _tOwned[_excluded[i]] > tSupply\n            ) return (_rTotal, _tTotal);\n            rSupply = rSupply.sub(_rOwned[_excluded[i]]);\n            tSupply = tSupply.sub(_tOwned[_excluded[i]]);\n        }\n        if (rSupply < _rTotal.div(_tTotal)) return (_rTotal, _tTotal);\n        return (rSupply, tSupply);\n    }\n\n    function _getRate() internal view returns (uint256) {\n        (uint256 rSupply, uint256 tSupply) = _getCurrentSupply();\n        return rSupply.div(tSupply);\n    }\n\n    function _getRAmount(\n        uint256 tAmount,\n        uint256 currentRate\n    ) internal pure returns (uint256) {\n        return tAmount.mul(currentRate);\n    }\n\n    function _getRAmounts(\n        Amounts memory t,\n        FeeType feeType,\n        uint256 currentRate\n    ) internal pure returns (Amounts memory) {\n        Amounts memory r;\n        r.sum = _getRAmount(t.sum, currentRate);\n        r.transfer = r.sum;\n        if (feeType != FeeType.NONE) {\n            r.rfi = _getRAmount(t.rfi, currentRate);\n            r.dividends = _getRAmount(t.dividends, currentRate);\n            r.buyback = _getRAmount(t.buyback, currentRate);\n            r.treasury = _getRAmount(t.treasury, currentRate);\n            r.liquidity = _getRAmount(t.liquidity, currentRate);\n            r.transfer = r\n                .transfer\n                .sub(r.rfi)\n                .sub(r.dividends)\n                .sub(r.buyback)\n                .sub(r.treasury)\n                .sub(r.liquidity);\n        }\n        return r;\n    }\n\n    function _getTAmounts(\n        uint256 tAmount,\n        FeeType feeType\n    ) internal view returns (Amounts memory) {\n        Amounts memory t;\n        t.sum = tAmount;\n        t.transfer = t.sum;\n        if (feeType != FeeType.NONE) {\n            Fees memory fees = _getFeeAmounts(tAmount, feeType);\n            t.rfi = fees.rfi;\n            t.dividends = fees.dividends;\n            t.buyback = fees.buyback;\n            t.treasury = fees.treasury;\n            t.liquidity = fees.liquidity;\n            t.transfer = t\n                .transfer\n                .sub(t.rfi)\n                .sub(t.dividends)\n                .sub(t.buyback)\n                .sub(t.treasury)\n                .sub(t.liquidity);\n        }\n        return t;\n    }\n\n    function _getAmounts(\n        uint256 tAmount,\n        FeeType feeType\n    ) internal view returns (Amounts memory r, Amounts memory t) {\n        t = _getTAmounts(tAmount, feeType);\n        r = _getRAmounts(t, feeType, _getRate());\n    }\n\n    function _increaseBalance(\n        address account,\n        uint256 tAmount,\n        uint256 rAmount\n    ) internal {\n        _rOwned[account] = _rOwned[account].add(rAmount);\n        if (_isExcluded[account]) {\n            _tOwned[account] = _tOwned[account].add(tAmount);\n        }\n        _increaseBalanceCallback(account, tAmount, rAmount);\n    }\n\n    function _decreaseBalance(\n        address account,\n        uint256 tAmount,\n        uint256 rAmount\n    ) internal {\n        _rOwned[account] = _rOwned[account].sub(rAmount);\n        if (_isExcluded[account]) {\n            _tOwned[account] = _tOwned[account].sub(tAmount);\n        }\n        _decreaseBalanceCallback(account, tAmount, rAmount);\n    }\n\n    function _decreaseTotalSupply(uint256 tAmount, uint256 rAmount) private {\n        _tTotal = _tTotal.sub(tAmount);\n        _rTotal = _rTotal.sub(rAmount);\n        _decreaseTotalSupplyCallback(tAmount, rAmount);\n    }\n\n    function _transfer(\n        address sender,\n        address recipient,\n        uint256 amount\n    ) internal whenNotPaused {\n        require(sender != address(0), \"ERC20: transfer from the zero address\");\n        require(recipient != address(0), \"ERC20: transfer to the zero address\");\n        FeeType feeType = _getFeeType(sender, recipient);\n        (Amounts memory r, Amounts memory t) = _getAmounts(amount, feeType);\n        require(\n            _rOwned[sender] >= r.sum,\n            \"ERC20: transfer amount exceeds balance\"\n        );\n        _decreaseBalance(sender, t.sum, r.sum);\n        _increaseBalance(recipient, t.transfer, r.transfer);\n        emit Transfer(sender, recipient, t.transfer);\n        if (t.sum != t.transfer) {\n            FeeAddresses memory feeAddresses = getFeeAddresses(feeType);\n            if (t.rfi > 0) {\n                _reflect(t.rfi, r.rfi);\n            }\n            if (t.dividends > 0) {\n                _increaseBalance(\n                    feeAddresses.dividends,\n                    t.dividends,\n                    r.dividends\n                );\n            }\n            if (t.buyback > 0) {\n                _increaseBalance(feeAddresses.buyback, t.buyback, r.buyback);\n            }\n            if (t.treasury > 0) {\n                _increaseBalance(feeAddresses.treasury, t.treasury, r.treasury);\n            }\n            if (t.liquidity > 0) {\n                _increaseBalance(\n                    feeAddresses.liquidity,\n                    t.liquidity,\n                    r.liquidity\n                );\n            }\n            emit FeeTaken(\n                t.rfi,\n                t.dividends,\n                t.buyback,\n                t.treasury,\n                t.liquidity\n            );\n        }\n        _transferCallback(\n            sender,\n            recipient,\n            t.sum,\n            t.transfer,\n            r.sum,\n            r.transfer\n        );\n    }\n}\n"
    },
    "contracts/v1/DividendManager.sol": {
      "content": "pragma solidity ^0.8.0;\n\nimport \"@openzeppelin/contracts/access/Ownable.sol\";\nimport \"@openzeppelin/contracts/token/ERC20/IERC20.sol\";\nimport \"@openzeppelin/contracts/utils/math/SafeMath.sol\";\nimport \"./interfaces/ICallbackContract.sol\";\nimport \"./interfaces/ICarboToken.sol\";\nimport \"./lib/ABDKMathQuad.sol\";\nimport \"./RecoverableFunds.sol\";\n\ncontract DividendManager is ICallbackContract, Ownable, RecoverableFunds {\n    ICarboToken public token;\n    IERC20 public busd;\n\n    uint256 internal _excludedSupply;\n    bytes16 internal _dividendPerShare;\n    mapping(address => bytes16) internal _dividendCorrections;\n    mapping(address => uint256) internal _withdrawnDividends;\n    mapping(address => bool) internal _excluded;\n\n    event DividendsDistributed(address indexed from, uint256 amount);\n    event DividendWithdrawn(address indexed to, uint256 amount);\n\n    modifier onlyToken() {\n        require(\n            address(token) == _msgSender(),\n            \"DividendManager: caller is not the token\"\n        );\n        _;\n    }\n\n    function setToken(address _token) public onlyOwner {\n        token = ICarboToken(_token);\n    }\n\n    function setBUSD(address _busd) public onlyOwner {\n        busd = IERC20(_busd);\n    }\n\n    function dividendCorrectionOf(\n        address account\n    ) public view returns (uint256) {\n        return ABDKMathQuad.toUInt(_dividendCorrections[account]);\n    }\n\n    function dividendPerShare() public view returns (uint256) {\n        return ABDKMathQuad.toUInt(_dividendPerShare);\n    }\n\n    function distributeDividends(uint256 amount) public {\n        uint256 correctedSupply = token.getRTotal() - _excludedSupply;\n        require(\n            correctedSupply > 0,\n            \"DividendManager: totalSupply should be greater than 0\"\n        );\n        require(\n            amount > 0,\n            \"DividendManager: distributed amount should be greater than 0\"\n        );\n        busd.transferFrom(_msgSender(), address(this), amount);\n        _dividendPerShare = ABDKMathQuad.add(\n            _dividendPerShare,\n            ABDKMathQuad.div(\n                ABDKMathQuad.fromUInt(amount),\n                ABDKMathQuad.fromUInt(correctedSupply)\n            )\n        );\n        emit DividendsDistributed(msg.sender, amount);\n    }\n\n    function withdrawDividend() public {\n        _withdrawDividend(_msgSender());\n    }\n\n    function withdrawableDividendOf(\n        address account\n    ) public view returns (uint256) {\n        if (_excluded[account]) return 0;\n        return accumulativeDividendOf(account) - _withdrawnDividends[account];\n    }\n\n    function withdrawnDividendOf(\n        address account\n    ) public view returns (uint256) {\n        return _withdrawnDividends[account];\n    }\n\n    function accumulativeDividendOf(\n        address account\n    ) public view returns (uint256) {\n        return\n            ABDKMathQuad.toUInt(\n                ABDKMathQuad.add(\n                    ABDKMathQuad.mul(\n                        _dividendPerShare,\n                        ABDKMathQuad.fromUInt(token.getROwned(account))\n                    ),\n                    _dividendCorrections[account]\n                )\n            );\n    }\n\n    function includeInDividends(address account) public onlyOwner {\n        _dividendCorrections[account] = ABDKMathQuad.neg(\n            ABDKMathQuad.mul(\n                _dividendPerShare,\n                ABDKMathQuad.fromUInt(token.getROwned(account))\n            )\n        );\n        _excluded[account] = false;\n        _excludedSupply = _excludedSupply - token.getROwned(account);\n    }\n\n    function excludeFromDividends(address account) public onlyOwner {\n        _withdrawDividend(account);\n        _excluded[account] = true;\n        _excludedSupply = _excludedSupply + token.getROwned(account);\n    }\n\n    function reflectCallback(\n        uint256 tAmount,\n        uint256 rAmount\n    ) external override onlyToken {}\n\n    function reflectCallback(\n        address account,\n        uint256 tAmount,\n        uint256 rAmount\n    ) external override onlyToken {}\n\n    function increaseBalanceCallback(\n        address account,\n        uint256 tAmount,\n        uint256 rAmount\n    ) external override onlyToken {\n        if (_excluded[account]) {\n            _excludedSupply = _excludedSupply + rAmount;\n        } else {\n            _decreaseDividendCorrection(\n                account,\n                _calculateDividendCorrection(ABDKMathQuad.fromUInt(rAmount))\n            );\n        }\n    }\n\n    function decreaseBalanceCallback(\n        address account,\n        uint256 tAmount,\n        uint256 rAmount\n    ) external override onlyToken {\n        if (_excluded[account]) {\n            _excludedSupply = _excludedSupply - rAmount;\n        } else {\n            _increaseDividendCorrection(\n                account,\n                _calculateDividendCorrection(ABDKMathQuad.fromUInt(rAmount))\n            );\n        }\n    }\n\n    function decreaseTotalSupplyCallback(\n        uint256 tAmount,\n        uint256 rAmount\n    ) external override onlyToken {}\n\n    function transferCallback(\n        address from,\n        address to,\n        uint256 tFromAmount,\n        uint256 rFromAmount,\n        uint256 tToAmount,\n        uint256 rToAmount\n    ) external override onlyToken {}\n\n    function burnCallback(\n        address account,\n        uint256 tAmount,\n        uint256 rAmount\n    ) external override onlyToken {}\n\n    function _withdrawDividend(address account) internal {\n        uint256 withdrawableDividend = withdrawableDividendOf(account);\n        if (withdrawableDividend > 0) {\n            _withdrawnDividends[account] =\n                _withdrawnDividends[account] +\n                withdrawableDividend;\n            busd.transfer(account, withdrawableDividend);\n            emit DividendWithdrawn(account, withdrawableDividend);\n        }\n    }\n\n    function _calculateDividendCorrection(\n        bytes16 value\n    ) internal view returns (bytes16) {\n        return ABDKMathQuad.mul(_dividendPerShare, value);\n    }\n\n    function _increaseDividendCorrection(\n        address account,\n        bytes16 value\n    ) internal {\n        _dividendCorrections[account] = ABDKMathQuad.add(\n            _dividendCorrections[account],\n            value\n        );\n    }\n\n    function _decreaseDividendCorrection(\n        address account,\n        bytes16 value\n    ) internal {\n        _dividendCorrections[account] = ABDKMathQuad.sub(\n            _dividendCorrections[account],\n            value\n        );\n    }\n}\n"
    },
    "contracts/v1/interfaces/ICallbackContract.sol": {
      "content": "// SPDX-License-Identifier: UNLICENSED\n\npragma solidity ^0.8.0;\n\n/**\n * @dev Interface of contract that can be invoked by a token contract during reflect or transfer.\n */\ninterface ICallbackContract {\n    function reflectCallback(uint256 tAmount, uint256 rAmount) external;\n\n    function reflectCallback(\n        address account,\n        uint256 tAmount,\n        uint256 rAmount\n    ) external;\n\n    function increaseBalanceCallback(\n        address account,\n        uint256 tAmount,\n        uint256 rAmount\n    ) external;\n\n    function decreaseBalanceCallback(\n        address account,\n        uint256 tAmount,\n        uint256 rAmount\n    ) external;\n\n    function decreaseTotalSupplyCallback(\n        uint256 tAmount,\n        uint256 rAmount\n    ) external;\n\n    function transferCallback(\n        address from,\n        address to,\n        uint256 tFromAmount,\n        uint256 rFromAmount,\n        uint256 tToAmount,\n        uint256 rToAmount\n    ) external;\n\n    function burnCallback(\n        address account,\n        uint256 tAmount,\n        uint256 rAmount\n    ) external;\n}\n"
    },
    "contracts/v1/interfaces/ICarboToken.sol": {
      "content": "// SPDX-License-Identifier: UNLICENSED\n\npragma solidity ^0.8.0;\n\nimport \"@openzeppelin/contracts/token/ERC20/IERC20.sol\";\n\n/**\n * @dev Interface of CarboToken\n */\ninterface ICarboToken is IERC20 {\n    struct Amounts {\n        uint256 sum;\n        uint256 transfer;\n        uint256 rfi;\n        uint256 dividends;\n        uint256 buyback;\n        uint256 treasury;\n        uint256 liquidity;\n    }\n\n    struct Fees {\n        uint256 rfi;\n        uint256 dividends;\n        uint256 buyback;\n        uint256 treasury;\n        uint256 liquidity;\n    }\n\n    struct FeeAddresses {\n        address dividends;\n        address buyback;\n        address treasury;\n        address liquidity;\n    }\n\n    enum FeeType {\n        BUY,\n        SELL,\n        NONE\n    }\n\n    event FeeTaken(\n        uint256 rfi,\n        uint256 dividends,\n        uint256 buyback,\n        uint256 treasury,\n        uint256 liquidity\n    );\n\n    function name() external view returns (string memory);\n\n    function symbol() external view returns (string memory);\n\n    function decimals() external pure returns (uint8);\n\n    function burn(uint256 amount) external;\n\n    function burnFrom(address account, uint256 amount) external;\n\n    function increaseAllowance(\n        address spender,\n        uint256 addedValue\n    ) external returns (bool);\n\n    function decreaseAllowance(\n        address spender,\n        uint256 subtractedValue\n    ) external returns (bool);\n\n    function getFees(FeeType feeType) external view returns (Fees memory);\n\n    function setFees(\n        FeeType feeType,\n        uint rfi,\n        uint dividends,\n        uint buyback,\n        uint treasury,\n        uint liquidity\n    ) external;\n\n    function getFeeAddresses(\n        FeeType feeType\n    ) external view returns (FeeAddresses memory);\n\n    function setFeeAddresses(\n        FeeType feeType,\n        address dividends,\n        address buyback,\n        address treasury,\n        address liquidity\n    ) external;\n\n    function setTaxable(address account, bool value) external;\n\n    function setTaxExempt(address account, bool value) external;\n\n    function getROwned(address account) external view returns (uint256);\n\n    function getRTotal() external view returns (uint256);\n\n    function excludeFromRFI(address account) external;\n\n    function includeInRFI(address account) external;\n\n    function reflect(uint256 tAmount) external;\n\n    function reflectionFromToken(\n        uint256 tAmount\n    ) external view returns (uint256);\n\n    function tokenFromReflection(\n        uint256 rAmount\n    ) external view returns (uint256);\n}\n"
    },
    "contracts/v1/interfaces/IDividendManager.sol": {
      "content": "// SPDX-License-Identifier: UNLICENSED\n\npragma solidity ^0.8.0;\n\n/**\n * @dev Interface of DividendManager\n */\ninterface IDividendManager {\n    function distributeDividends(uint256 amount) external;\n\n    function setBUSD(address _busd) external;\n\n    function setToken(address _token) external;\n\n    function excludeFromDividends(address account) external;\n}\n"
    },
    "contracts/v1/lib/ABDKMathQuad.sol": {
      "content": "// SPDX-License-Identifier: BSD-4-Clause\n/*\n * ABDK Math Quad Smart Contract Library.  Copyright © 2019 by ABDK Consulting.\n * Author: Mikhail Vladimirov <mikhail.vladimirov@gmail.com>\n */\npragma solidity ^0.8.0;\n\n/**\n * Smart contract library of mathematical functions operating with IEEE 754\n * quadruple-precision binary floating-point numbers (quadruple precision\n * numbers).  As long as quadruple precision numbers are 16-bytes long, they are\n * represented by bytes16 type.\n */\nlibrary ABDKMathQuad {\n    /*\n     * 0.\n     */\n    bytes16 private constant POSITIVE_ZERO = 0x00000000000000000000000000000000;\n\n    /*\n     * -0.\n     */\n    bytes16 private constant NEGATIVE_ZERO = 0x80000000000000000000000000000000;\n\n    /*\n     * +Infinity.\n     */\n    bytes16 private constant POSITIVE_INFINITY =\n        0x7FFF0000000000000000000000000000;\n\n    /*\n     * -Infinity.\n     */\n    bytes16 private constant NEGATIVE_INFINITY =\n        0xFFFF0000000000000000000000000000;\n\n    /*\n     * Canonical NaN value.\n     */\n    bytes16 private constant NaN = 0x7FFF8000000000000000000000000000;\n\n    /**\n     * Convert signed 256-bit integer number into quadruple precision number.\n     *\n     * @param x signed 256-bit integer number\n     * @return quadruple precision number\n     */\n    function fromInt(int256 x) internal pure returns (bytes16) {\n        unchecked {\n            if (x == 0) return bytes16(0);\n            else {\n                // We rely on overflow behavior here\n                uint256 result = uint256(x > 0 ? x : -x);\n\n                uint256 msb = mostSignificantBit(result);\n                if (msb < 112) result <<= 112 - msb;\n                else if (msb > 112) result >>= msb - 112;\n\n                result =\n                    (result & 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFF) |\n                    ((16383 + msb) << 112);\n                if (x < 0) result |= 0x80000000000000000000000000000000;\n\n                return bytes16(uint128(result));\n            }\n        }\n    }\n\n    /**\n     * Convert quadruple precision number into signed 256-bit integer number\n     * rounding towards zero.  Revert on overflow.\n     *\n     * @param x quadruple precision number\n     * @return signed 256-bit integer number\n     */\n    function toInt(bytes16 x) internal pure returns (int256) {\n        unchecked {\n            uint256 exponent = (uint128(x) >> 112) & 0x7FFF;\n\n            require(exponent <= 16638); // Overflow\n            if (exponent < 16383) return 0; // Underflow\n\n            uint256 result = (uint256(uint128(x)) &\n                0xFFFFFFFFFFFFFFFFFFFFFFFFFFFF) |\n                0x10000000000000000000000000000;\n\n            if (exponent < 16495) result >>= 16495 - exponent;\n            else if (exponent > 16495) result <<= exponent - 16495;\n\n            if (uint128(x) >= 0x80000000000000000000000000000000) {\n                // Negative\n                require(\n                    result <=\n                        0x8000000000000000000000000000000000000000000000000000000000000000\n                );\n                return -int256(result); // We rely on overflow behavior here\n            } else {\n                require(\n                    result <=\n                        0x7FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF\n                );\n                return int256(result);\n            }\n        }\n    }\n\n    /**\n     * Convert unsigned 256-bit integer number into quadruple precision number.\n     *\n     * @param x unsigned 256-bit integer number\n     * @return quadruple precision number\n     */\n    function fromUInt(uint256 x) internal pure returns (bytes16) {\n        unchecked {\n            if (x == 0) return bytes16(0);\n            else {\n                uint256 result = x;\n\n                uint256 msb = mostSignificantBit(result);\n                if (msb < 112) result <<= 112 - msb;\n                else if (msb > 112) result >>= msb - 112;\n\n                result =\n                    (result & 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFF) |\n                    ((16383 + msb) << 112);\n\n                return bytes16(uint128(result));\n            }\n        }\n    }\n\n    /**\n     * Convert quadruple precision number into unsigned 256-bit integer number\n     * rounding towards zero.  Revert on underflow.  Note, that negative floating\n     * point numbers in range (-1.0 .. 0.0) may be converted to unsigned integer\n     * without error, because they are rounded to zero.\n     *\n     * @param x quadruple precision number\n     * @return unsigned 256-bit integer number\n     */\n    function toUInt(bytes16 x) internal pure returns (uint256) {\n        unchecked {\n            uint256 exponent = (uint128(x) >> 112) & 0x7FFF;\n\n            if (exponent < 16383) return 0; // Underflow\n\n            require(uint128(x) < 0x80000000000000000000000000000000); // Negative\n\n            require(exponent <= 16638); // Overflow\n            uint256 result = (uint256(uint128(x)) &\n                0xFFFFFFFFFFFFFFFFFFFFFFFFFFFF) |\n                0x10000000000000000000000000000;\n\n            if (exponent < 16495) result >>= 16495 - exponent;\n            else if (exponent > 16495) result <<= exponent - 16495;\n\n            return result;\n        }\n    }\n\n    /**\n     * Convert signed 128.128 bit fixed point number into quadruple precision\n     * number.\n     *\n     * @param x signed 128.128 bit fixed point number\n     * @return quadruple precision number\n     */\n    function from128x128(int256 x) internal pure returns (bytes16) {\n        unchecked {\n            if (x == 0) return bytes16(0);\n            else {\n                // We rely on overflow behavior here\n                uint256 result = uint256(x > 0 ? x : -x);\n\n                uint256 msb = mostSignificantBit(result);\n                if (msb < 112) result <<= 112 - msb;\n                else if (msb > 112) result >>= msb - 112;\n\n                result =\n                    (result & 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFF) |\n                    ((16255 + msb) << 112);\n                if (x < 0) result |= 0x80000000000000000000000000000000;\n\n                return bytes16(uint128(result));\n            }\n        }\n    }\n\n    /**\n     * Convert quadruple precision number into signed 128.128 bit fixed point\n     * number.  Revert on overflow.\n     *\n     * @param x quadruple precision number\n     * @return signed 128.128 bit fixed point number\n     */\n    function to128x128(bytes16 x) internal pure returns (int256) {\n        unchecked {\n            uint256 exponent = (uint128(x) >> 112) & 0x7FFF;\n\n            require(exponent <= 16510); // Overflow\n            if (exponent < 16255) return 0; // Underflow\n\n            uint256 result = (uint256(uint128(x)) &\n                0xFFFFFFFFFFFFFFFFFFFFFFFFFFFF) |\n                0x10000000000000000000000000000;\n\n            if (exponent < 16367) result >>= 16367 - exponent;\n            else if (exponent > 16367) result <<= exponent - 16367;\n\n            if (uint128(x) >= 0x80000000000000000000000000000000) {\n                // Negative\n                require(\n                    result <=\n                        0x8000000000000000000000000000000000000000000000000000000000000000\n                );\n                return -int256(result); // We rely on overflow behavior here\n            } else {\n                require(\n                    result <=\n                        0x7FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF\n                );\n                return int256(result);\n            }\n        }\n    }\n\n    /**\n     * Convert signed 64.64 bit fixed point number into quadruple precision\n     * number.\n     *\n     * @param x signed 64.64 bit fixed point number\n     * @return quadruple precision number\n     */\n    function from64x64(int128 x) internal pure returns (bytes16) {\n        unchecked {\n            if (x == 0) return bytes16(0);\n            else {\n                // We rely on overflow behavior here\n                uint256 result = uint128(x > 0 ? x : -x);\n\n                uint256 msb = mostSignificantBit(result);\n                if (msb < 112) result <<= 112 - msb;\n                else if (msb > 112) result >>= msb - 112;\n\n                result =\n                    (result & 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFF) |\n                    ((16319 + msb) << 112);\n                if (x < 0) result |= 0x80000000000000000000000000000000;\n\n                return bytes16(uint128(result));\n            }\n        }\n    }\n\n    /**\n     * Convert quadruple precision number into signed 64.64 bit fixed point\n     * number.  Revert on overflow.\n     *\n     * @param x quadruple precision number\n     * @return signed 64.64 bit fixed point number\n     */\n    function to64x64(bytes16 x) internal pure returns (int128) {\n        unchecked {\n            uint256 exponent = (uint128(x) >> 112) & 0x7FFF;\n\n            require(exponent <= 16446); // Overflow\n            if (exponent < 16319) return 0; // Underflow\n\n            uint256 result = (uint256(uint128(x)) &\n                0xFFFFFFFFFFFFFFFFFFFFFFFFFFFF) |\n                0x10000000000000000000000000000;\n\n            if (exponent < 16431) result >>= 16431 - exponent;\n            else if (exponent > 16431) result <<= exponent - 16431;\n\n            if (uint128(x) >= 0x80000000000000000000000000000000) {\n                // Negative\n                require(result <= 0x80000000000000000000000000000000);\n                return -int128(int256(result)); // We rely on overflow behavior here\n            } else {\n                require(result <= 0x7FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF);\n                return int128(int256(result));\n            }\n        }\n    }\n\n    /**\n     * Convert octuple precision number into quadruple precision number.\n     *\n     * @param x octuple precision number\n     * @return quadruple precision number\n     */\n    function fromOctuple(bytes32 x) internal pure returns (bytes16) {\n        unchecked {\n            bool negative = x &\n                0x8000000000000000000000000000000000000000000000000000000000000000 >\n                0;\n\n            uint256 exponent = (uint256(x) >> 236) & 0x7FFFF;\n            uint256 significand = uint256(x) &\n                0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF;\n\n            if (exponent == 0x7FFFF) {\n                if (significand > 0) return NaN;\n                else return negative ? NEGATIVE_INFINITY : POSITIVE_INFINITY;\n            }\n\n            if (exponent > 278526)\n                return negative ? NEGATIVE_INFINITY : POSITIVE_INFINITY;\n            else if (exponent < 245649)\n                return negative ? NEGATIVE_ZERO : POSITIVE_ZERO;\n            else if (exponent < 245761) {\n                significand =\n                    (significand |\n                        0x100000000000000000000000000000000000000000000000000000000000) >>\n                    (245885 - exponent);\n                exponent = 0;\n            } else {\n                significand >>= 124;\n                exponent -= 245760;\n            }\n\n            uint128 result = uint128(significand | (exponent << 112));\n            if (negative) result |= 0x80000000000000000000000000000000;\n\n            return bytes16(result);\n        }\n    }\n\n    /**\n     * Convert quadruple precision number into octuple precision number.\n     *\n     * @param x quadruple precision number\n     * @return octuple precision number\n     */\n    function toOctuple(bytes16 x) internal pure returns (bytes32) {\n        unchecked {\n            uint256 exponent = (uint128(x) >> 112) & 0x7FFF;\n\n            uint256 result = uint128(x) & 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFF;\n\n            if (exponent == 0x7FFF)\n                exponent = 0x7FFFF; // Infinity or NaN\n            else if (exponent == 0) {\n                if (result > 0) {\n                    uint256 msb = mostSignificantBit(result);\n                    result =\n                        (result << (236 - msb)) &\n                        0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF;\n                    exponent = 245649 + msb;\n                }\n            } else {\n                result <<= 124;\n                exponent += 245760;\n            }\n\n            result |= exponent << 236;\n            if (uint128(x) >= 0x80000000000000000000000000000000)\n                result |= 0x8000000000000000000000000000000000000000000000000000000000000000;\n\n            return bytes32(result);\n        }\n    }\n\n    /**\n     * Convert double precision number into quadruple precision number.\n     *\n     * @param x double precision number\n     * @return quadruple precision number\n     */\n    function fromDouble(bytes8 x) internal pure returns (bytes16) {\n        unchecked {\n            uint256 exponent = (uint64(x) >> 52) & 0x7FF;\n\n            uint256 result = uint64(x) & 0xFFFFFFFFFFFFF;\n\n            if (exponent == 0x7FF)\n                exponent = 0x7FFF; // Infinity or NaN\n            else if (exponent == 0) {\n                if (result > 0) {\n                    uint256 msb = mostSignificantBit(result);\n                    result =\n                        (result << (112 - msb)) &\n                        0xFFFFFFFFFFFFFFFFFFFFFFFFFFFF;\n                    exponent = 15309 + msb;\n                }\n            } else {\n                result <<= 60;\n                exponent += 15360;\n            }\n\n            result |= exponent << 112;\n            if (x & 0x8000000000000000 > 0)\n                result |= 0x80000000000000000000000000000000;\n\n            return bytes16(uint128(result));\n        }\n    }\n\n    /**\n     * Convert quadruple precision number into double precision number.\n     *\n     * @param x quadruple precision number\n     * @return double precision number\n     */\n    function toDouble(bytes16 x) internal pure returns (bytes8) {\n        unchecked {\n            bool negative = uint128(x) >= 0x80000000000000000000000000000000;\n\n            uint256 exponent = (uint128(x) >> 112) & 0x7FFF;\n            uint256 significand = uint128(x) & 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFF;\n\n            if (exponent == 0x7FFF) {\n                if (significand > 0) return 0x7FF8000000000000;\n                // NaN\n                else\n                    return\n                        negative\n                            ? bytes8(0xFFF0000000000000) // -Infinity\n                            : bytes8(0x7FF0000000000000); // Infinity\n            }\n\n            if (exponent > 17406)\n                return\n                    negative\n                        ? bytes8(0xFFF0000000000000) // -Infinity\n                        : bytes8(0x7FF0000000000000);\n            // Infinity\n            else if (exponent < 15309)\n                return\n                    negative\n                        ? bytes8(0x8000000000000000) // -0\n                        : bytes8(0x0000000000000000);\n            // 0\n            else if (exponent < 15361) {\n                significand =\n                    (significand | 0x10000000000000000000000000000) >>\n                    (15421 - exponent);\n                exponent = 0;\n            } else {\n                significand >>= 60;\n                exponent -= 15360;\n            }\n\n            uint64 result = uint64(significand | (exponent << 52));\n            if (negative) result |= 0x8000000000000000;\n\n            return bytes8(result);\n        }\n    }\n\n    /**\n     * Test whether given quadruple precision number is NaN.\n     *\n     * @param x quadruple precision number\n     * @return true if x is NaN, false otherwise\n     */\n    function isNaN(bytes16 x) internal pure returns (bool) {\n        unchecked {\n            return\n                uint128(x) & 0x7FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF >\n                0x7FFF0000000000000000000000000000;\n        }\n    }\n\n    /**\n     * Test whether given quadruple precision number is positive or negative\n     * infinity.\n     *\n     * @param x quadruple precision number\n     * @return true if x is positive or negative infinity, false otherwise\n     */\n    function isInfinity(bytes16 x) internal pure returns (bool) {\n        unchecked {\n            return\n                uint128(x) & 0x7FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF ==\n                0x7FFF0000000000000000000000000000;\n        }\n    }\n\n    /**\n     * Calculate sign of x, i.e. -1 if x is negative, 0 if x if zero, and 1 if x\n     * is positive.  Note that sign (-0) is zero.  Revert if x is NaN.\n     *\n     * @param x quadruple precision number\n     * @return sign of x\n     */\n    function sign(bytes16 x) internal pure returns (int8) {\n        unchecked {\n            uint128 absoluteX = uint128(x) & 0x7FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF;\n\n            require(absoluteX <= 0x7FFF0000000000000000000000000000); // Not NaN\n\n            if (absoluteX == 0) return 0;\n            else if (uint128(x) >= 0x80000000000000000000000000000000)\n                return -1;\n            else return 1;\n        }\n    }\n\n    /**\n     * Calculate sign (x - y).  Revert if either argument is NaN, or both\n     * arguments are infinities of the same sign.\n     *\n     * @param x quadruple precision number\n     * @param y quadruple precision number\n     * @return sign (x - y)\n     */\n    function cmp(bytes16 x, bytes16 y) internal pure returns (int8) {\n        unchecked {\n            uint128 absoluteX = uint128(x) & 0x7FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF;\n\n            require(absoluteX <= 0x7FFF0000000000000000000000000000); // Not NaN\n\n            uint128 absoluteY = uint128(y) & 0x7FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF;\n\n            require(absoluteY <= 0x7FFF0000000000000000000000000000); // Not NaN\n\n            // Not infinities of the same sign\n            require(x != y || absoluteX < 0x7FFF0000000000000000000000000000);\n\n            if (x == y) return 0;\n            else {\n                bool negativeX = uint128(x) >=\n                    0x80000000000000000000000000000000;\n                bool negativeY = uint128(y) >=\n                    0x80000000000000000000000000000000;\n\n                if (negativeX) {\n                    if (negativeY) return absoluteX > absoluteY ? -1 : int8(1);\n                    else return -1;\n                } else {\n                    if (negativeY) return 1;\n                    else return absoluteX > absoluteY ? int8(1) : -1;\n                }\n            }\n        }\n    }\n\n    /**\n     * Test whether x equals y.  NaN, infinity, and -infinity are not equal to\n     * anything.\n     *\n     * @param x quadruple precision number\n     * @param y quadruple precision number\n     * @return true if x equals to y, false otherwise\n     */\n    function eq(bytes16 x, bytes16 y) internal pure returns (bool) {\n        unchecked {\n            if (x == y) {\n                return\n                    uint128(x) & 0x7FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF <\n                    0x7FFF0000000000000000000000000000;\n            } else return false;\n        }\n    }\n\n    /**\n     * Calculate x + y.  Special values behave in the following way:\n     *\n     * NaN + x = NaN for any x.\n     * Infinity + x = Infinity for any finite x.\n     * -Infinity + x = -Infinity for any finite x.\n     * Infinity + Infinity = Infinity.\n     * -Infinity + -Infinity = -Infinity.\n     * Infinity + -Infinity = -Infinity + Infinity = NaN.\n     *\n     * @param x quadruple precision number\n     * @param y quadruple precision number\n     * @return quadruple precision number\n     */\n    function add(bytes16 x, bytes16 y) internal pure returns (bytes16) {\n        unchecked {\n            uint256 xExponent = (uint128(x) >> 112) & 0x7FFF;\n            uint256 yExponent = (uint128(y) >> 112) & 0x7FFF;\n\n            if (xExponent == 0x7FFF) {\n                if (yExponent == 0x7FFF) {\n                    if (x == y) return x;\n                    else return NaN;\n                } else return x;\n            } else if (yExponent == 0x7FFF) return y;\n            else {\n                bool xSign = uint128(x) >= 0x80000000000000000000000000000000;\n                uint256 xSignifier = uint128(x) &\n                    0xFFFFFFFFFFFFFFFFFFFFFFFFFFFF;\n                if (xExponent == 0) xExponent = 1;\n                else xSignifier |= 0x10000000000000000000000000000;\n\n                bool ySign = uint128(y) >= 0x80000000000000000000000000000000;\n                uint256 ySignifier = uint128(y) &\n                    0xFFFFFFFFFFFFFFFFFFFFFFFFFFFF;\n                if (yExponent == 0) yExponent = 1;\n                else ySignifier |= 0x10000000000000000000000000000;\n\n                if (xSignifier == 0)\n                    return y == NEGATIVE_ZERO ? POSITIVE_ZERO : y;\n                else if (ySignifier == 0)\n                    return x == NEGATIVE_ZERO ? POSITIVE_ZERO : x;\n                else {\n                    int256 delta = int256(xExponent) - int256(yExponent);\n\n                    if (xSign == ySign) {\n                        if (delta > 112) return x;\n                        else if (delta > 0) ySignifier >>= uint256(delta);\n                        else if (delta < -112) return y;\n                        else if (delta < 0) {\n                            xSignifier >>= uint256(-delta);\n                            xExponent = yExponent;\n                        }\n\n                        xSignifier += ySignifier;\n\n                        if (xSignifier >= 0x20000000000000000000000000000) {\n                            xSignifier >>= 1;\n                            xExponent += 1;\n                        }\n\n                        if (xExponent == 0x7FFF)\n                            return\n                                xSign ? NEGATIVE_INFINITY : POSITIVE_INFINITY;\n                        else {\n                            if (xSignifier < 0x10000000000000000000000000000)\n                                xExponent = 0;\n                            else xSignifier &= 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFF;\n\n                            return\n                                bytes16(\n                                    uint128(\n                                        (\n                                            xSign\n                                                ? 0x80000000000000000000000000000000\n                                                : 0\n                                        ) |\n                                            (xExponent << 112) |\n                                            xSignifier\n                                    )\n                                );\n                        }\n                    } else {\n                        if (delta > 0) {\n                            xSignifier <<= 1;\n                            xExponent -= 1;\n                        } else if (delta < 0) {\n                            ySignifier <<= 1;\n                            xExponent = yExponent - 1;\n                        }\n\n                        if (delta > 112) ySignifier = 1;\n                        else if (delta > 1)\n                            ySignifier =\n                                ((ySignifier - 1) >> uint256(delta - 1)) +\n                                1;\n                        else if (delta < -112) xSignifier = 1;\n                        else if (delta < -1)\n                            xSignifier =\n                                ((xSignifier - 1) >> uint256(-delta - 1)) +\n                                1;\n\n                        if (xSignifier >= ySignifier) xSignifier -= ySignifier;\n                        else {\n                            xSignifier = ySignifier - xSignifier;\n                            xSign = ySign;\n                        }\n\n                        if (xSignifier == 0) return POSITIVE_ZERO;\n\n                        uint256 msb = mostSignificantBit(xSignifier);\n\n                        if (msb == 113) {\n                            xSignifier =\n                                (xSignifier >> 1) &\n                                0xFFFFFFFFFFFFFFFFFFFFFFFFFFFF;\n                            xExponent += 1;\n                        } else if (msb < 112) {\n                            uint256 shift = 112 - msb;\n                            if (xExponent > shift) {\n                                xSignifier =\n                                    (xSignifier << shift) &\n                                    0xFFFFFFFFFFFFFFFFFFFFFFFFFFFF;\n                                xExponent -= shift;\n                            } else {\n                                xSignifier <<= xExponent - 1;\n                                xExponent = 0;\n                            }\n                        } else xSignifier &= 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFF;\n\n                        if (xExponent == 0x7FFF)\n                            return\n                                xSign ? NEGATIVE_INFINITY : POSITIVE_INFINITY;\n                        else\n                            return\n                                bytes16(\n                                    uint128(\n                                        (\n                                            xSign\n                                                ? 0x80000000000000000000000000000000\n                                                : 0\n                                        ) |\n                                            (xExponent << 112) |\n                                            xSignifier\n                                    )\n                                );\n                    }\n                }\n            }\n        }\n    }\n\n    /**\n     * Calculate x - y.  Special values behave in the following way:\n     *\n     * NaN - x = NaN for any x.\n     * Infinity - x = Infinity for any finite x.\n     * -Infinity - x = -Infinity for any finite x.\n     * Infinity - -Infinity = Infinity.\n     * -Infinity - Infinity = -Infinity.\n     * Infinity - Infinity = -Infinity - -Infinity = NaN.\n     *\n     * @param x quadruple precision number\n     * @param y quadruple precision number\n     * @return quadruple precision number\n     */\n    function sub(bytes16 x, bytes16 y) internal pure returns (bytes16) {\n        unchecked {\n            return add(x, y ^ 0x80000000000000000000000000000000);\n        }\n    }\n\n    /**\n     * Calculate x * y.  Special values behave in the following way:\n     *\n     * NaN * x = NaN for any x.\n     * Infinity * x = Infinity for any finite positive x.\n     * Infinity * x = -Infinity for any finite negative x.\n     * -Infinity * x = -Infinity for any finite positive x.\n     * -Infinity * x = Infinity for any finite negative x.\n     * Infinity * 0 = NaN.\n     * -Infinity * 0 = NaN.\n     * Infinity * Infinity = Infinity.\n     * Infinity * -Infinity = -Infinity.\n     * -Infinity * Infinity = -Infinity.\n     * -Infinity * -Infinity = Infinity.\n     *\n     * @param x quadruple precision number\n     * @param y quadruple precision number\n     * @return quadruple precision number\n     */\n    function mul(bytes16 x, bytes16 y) internal pure returns (bytes16) {\n        unchecked {\n            uint256 xExponent = (uint128(x) >> 112) & 0x7FFF;\n            uint256 yExponent = (uint128(y) >> 112) & 0x7FFF;\n\n            if (xExponent == 0x7FFF) {\n                if (yExponent == 0x7FFF) {\n                    if (x == y)\n                        return x ^ (y & 0x80000000000000000000000000000000);\n                    else if (x ^ y == 0x80000000000000000000000000000000)\n                        return x | y;\n                    else return NaN;\n                } else {\n                    if (y & 0x7FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF == 0) return NaN;\n                    else return x ^ (y & 0x80000000000000000000000000000000);\n                }\n            } else if (yExponent == 0x7FFF) {\n                if (x & 0x7FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF == 0) return NaN;\n                else return y ^ (x & 0x80000000000000000000000000000000);\n            } else {\n                uint256 xSignifier = uint128(x) &\n                    0xFFFFFFFFFFFFFFFFFFFFFFFFFFFF;\n                if (xExponent == 0) xExponent = 1;\n                else xSignifier |= 0x10000000000000000000000000000;\n\n                uint256 ySignifier = uint128(y) &\n                    0xFFFFFFFFFFFFFFFFFFFFFFFFFFFF;\n                if (yExponent == 0) yExponent = 1;\n                else ySignifier |= 0x10000000000000000000000000000;\n\n                xSignifier *= ySignifier;\n                if (xSignifier == 0)\n                    return\n                        (x ^ y) & 0x80000000000000000000000000000000 > 0\n                            ? NEGATIVE_ZERO\n                            : POSITIVE_ZERO;\n\n                xExponent += yExponent;\n\n                uint256 msb = xSignifier >=\n                    0x200000000000000000000000000000000000000000000000000000000\n                    ? 225\n                    : xSignifier >=\n                        0x100000000000000000000000000000000000000000000000000000000\n                    ? 224\n                    : mostSignificantBit(xSignifier);\n\n                if (xExponent + msb < 16496) {\n                    // Underflow\n                    xExponent = 0;\n                    xSignifier = 0;\n                } else if (xExponent + msb < 16608) {\n                    // Subnormal\n                    if (xExponent < 16496) xSignifier >>= 16496 - xExponent;\n                    else if (xExponent > 16496)\n                        xSignifier <<= xExponent - 16496;\n                    xExponent = 0;\n                } else if (xExponent + msb > 49373) {\n                    xExponent = 0x7FFF;\n                    xSignifier = 0;\n                } else {\n                    if (msb > 112) xSignifier >>= msb - 112;\n                    else if (msb < 112) xSignifier <<= 112 - msb;\n\n                    xSignifier &= 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFF;\n\n                    xExponent = xExponent + msb - 16607;\n                }\n\n                return\n                    bytes16(\n                        uint128(\n                            uint128(\n                                (x ^ y) & 0x80000000000000000000000000000000\n                            ) |\n                                (xExponent << 112) |\n                                xSignifier\n                        )\n                    );\n            }\n        }\n    }\n\n    /**\n     * Calculate x / y.  Special values behave in the following way:\n     *\n     * NaN / x = NaN for any x.\n     * x / NaN = NaN for any x.\n     * Infinity / x = Infinity for any finite non-negative x.\n     * Infinity / x = -Infinity for any finite negative x including -0.\n     * -Infinity / x = -Infinity for any finite non-negative x.\n     * -Infinity / x = Infinity for any finite negative x including -0.\n     * x / Infinity = 0 for any finite non-negative x.\n     * x / -Infinity = -0 for any finite non-negative x.\n     * x / Infinity = -0 for any finite non-negative x including -0.\n     * x / -Infinity = 0 for any finite non-negative x including -0.\n     *\n     * Infinity / Infinity = NaN.\n     * Infinity / -Infinity = -NaN.\n     * -Infinity / Infinity = -NaN.\n     * -Infinity / -Infinity = NaN.\n     *\n     * Division by zero behaves in the following way:\n     *\n     * x / 0 = Infinity for any finite positive x.\n     * x / -0 = -Infinity for any finite positive x.\n     * x / 0 = -Infinity for any finite negative x.\n     * x / -0 = Infinity for any finite negative x.\n     * 0 / 0 = NaN.\n     * 0 / -0 = NaN.\n     * -0 / 0 = NaN.\n     * -0 / -0 = NaN.\n     *\n     * @param x quadruple precision number\n     * @param y quadruple precision number\n     * @return quadruple precision number\n     */\n    function div(bytes16 x, bytes16 y) internal pure returns (bytes16) {\n        unchecked {\n            uint256 xExponent = (uint128(x) >> 112) & 0x7FFF;\n            uint256 yExponent = (uint128(y) >> 112) & 0x7FFF;\n\n            if (xExponent == 0x7FFF) {\n                if (yExponent == 0x7FFF) return NaN;\n                else return x ^ (y & 0x80000000000000000000000000000000);\n            } else if (yExponent == 0x7FFF) {\n                if (y & 0x0000FFFFFFFFFFFFFFFFFFFFFFFFFFFF != 0) return NaN;\n                else\n                    return\n                        POSITIVE_ZERO |\n                        ((x ^ y) & 0x80000000000000000000000000000000);\n            } else if (y & 0x7FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF == 0) {\n                if (x & 0x7FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF == 0) return NaN;\n                else\n                    return\n                        POSITIVE_INFINITY |\n                        ((x ^ y) & 0x80000000000000000000000000000000);\n            } else {\n                uint256 ySignifier = uint128(y) &\n                    0xFFFFFFFFFFFFFFFFFFFFFFFFFFFF;\n                if (yExponent == 0) yExponent = 1;\n                else ySignifier |= 0x10000000000000000000000000000;\n\n                uint256 xSignifier = uint128(x) &\n                    0xFFFFFFFFFFFFFFFFFFFFFFFFFFFF;\n                if (xExponent == 0) {\n                    if (xSignifier != 0) {\n                        uint shift = 226 - mostSignificantBit(xSignifier);\n\n                        xSignifier <<= shift;\n\n                        xExponent = 1;\n                        yExponent += shift - 114;\n                    }\n                } else {\n                    xSignifier =\n                        (xSignifier | 0x10000000000000000000000000000) <<\n                        114;\n                }\n\n                xSignifier = xSignifier / ySignifier;\n                if (xSignifier == 0)\n                    return\n                        (x ^ y) & 0x80000000000000000000000000000000 > 0\n                            ? NEGATIVE_ZERO\n                            : POSITIVE_ZERO;\n\n                assert(xSignifier >= 0x1000000000000000000000000000);\n\n                uint256 msb = xSignifier >= 0x80000000000000000000000000000\n                    ? mostSignificantBit(xSignifier)\n                    : xSignifier >= 0x40000000000000000000000000000\n                    ? 114\n                    : xSignifier >= 0x20000000000000000000000000000\n                    ? 113\n                    : 112;\n\n                if (xExponent + msb > yExponent + 16497) {\n                    // Overflow\n                    xExponent = 0x7FFF;\n                    xSignifier = 0;\n                } else if (xExponent + msb + 16380 < yExponent) {\n                    // Underflow\n                    xExponent = 0;\n                    xSignifier = 0;\n                } else if (xExponent + msb + 16268 < yExponent) {\n                    // Subnormal\n                    if (xExponent + 16380 > yExponent)\n                        xSignifier <<= xExponent + 16380 - yExponent;\n                    else if (xExponent + 16380 < yExponent)\n                        xSignifier >>= yExponent - xExponent - 16380;\n\n                    xExponent = 0;\n                } else {\n                    // Normal\n                    if (msb > 112) xSignifier >>= msb - 112;\n\n                    xSignifier &= 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFF;\n\n                    xExponent = xExponent + msb + 16269 - yExponent;\n                }\n\n                return\n                    bytes16(\n                        uint128(\n                            uint128(\n                                (x ^ y) & 0x80000000000000000000000000000000\n                            ) |\n                                (xExponent << 112) |\n                                xSignifier\n                        )\n                    );\n            }\n        }\n    }\n\n    /**\n     * Calculate -x.\n     *\n     * @param x quadruple precision number\n     * @return quadruple precision number\n     */\n    function neg(bytes16 x) internal pure returns (bytes16) {\n        unchecked {\n            return x ^ 0x80000000000000000000000000000000;\n        }\n    }\n\n    /**\n     * Calculate |x|.\n     *\n     * @param x quadruple precision number\n     * @return quadruple precision number\n     */\n    function abs(bytes16 x) internal pure returns (bytes16) {\n        unchecked {\n            return x & 0x7FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF;\n        }\n    }\n\n    /**\n     * Calculate square root of x.  Return NaN on negative x excluding -0.\n     *\n     * @param x quadruple precision number\n     * @return quadruple precision number\n     */\n    function sqrt(bytes16 x) internal pure returns (bytes16) {\n        unchecked {\n            if (uint128(x) > 0x80000000000000000000000000000000) return NaN;\n            else {\n                uint256 xExponent = (uint128(x) >> 112) & 0x7FFF;\n                if (xExponent == 0x7FFF) return x;\n                else {\n                    uint256 xSignifier = uint128(x) &\n                        0xFFFFFFFFFFFFFFFFFFFFFFFFFFFF;\n                    if (xExponent == 0) xExponent = 1;\n                    else xSignifier |= 0x10000000000000000000000000000;\n\n                    if (xSignifier == 0) return POSITIVE_ZERO;\n\n                    bool oddExponent = xExponent & 0x1 == 0;\n                    xExponent = (xExponent + 16383) >> 1;\n\n                    if (oddExponent) {\n                        if (xSignifier >= 0x10000000000000000000000000000)\n                            xSignifier <<= 113;\n                        else {\n                            uint256 msb = mostSignificantBit(xSignifier);\n                            uint256 shift = (226 - msb) & 0xFE;\n                            xSignifier <<= shift;\n                            xExponent -= (shift - 112) >> 1;\n                        }\n                    } else {\n                        if (xSignifier >= 0x10000000000000000000000000000)\n                            xSignifier <<= 112;\n                        else {\n                            uint256 msb = mostSignificantBit(xSignifier);\n                            uint256 shift = (225 - msb) & 0xFE;\n                            xSignifier <<= shift;\n                            xExponent -= (shift - 112) >> 1;\n                        }\n                    }\n\n                    uint256 r = 0x10000000000000000000000000000;\n                    r = (r + xSignifier / r) >> 1;\n                    r = (r + xSignifier / r) >> 1;\n                    r = (r + xSignifier / r) >> 1;\n                    r = (r + xSignifier / r) >> 1;\n                    r = (r + xSignifier / r) >> 1;\n                    r = (r + xSignifier / r) >> 1;\n                    r = (r + xSignifier / r) >> 1; // Seven iterations should be enough\n                    uint256 r1 = xSignifier / r;\n                    if (r1 < r) r = r1;\n\n                    return\n                        bytes16(\n                            uint128(\n                                (xExponent << 112) |\n                                    (r & 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFF)\n                            )\n                        );\n                }\n            }\n        }\n    }\n\n    /**\n     * Calculate binary logarithm of x.  Return NaN on negative x excluding -0.\n     *\n     * @param x quadruple precision number\n     * @return quadruple precision number\n     */\n    function log_2(bytes16 x) internal pure returns (bytes16) {\n        unchecked {\n            if (uint128(x) > 0x80000000000000000000000000000000) return NaN;\n            else if (x == 0x3FFF0000000000000000000000000000)\n                return POSITIVE_ZERO;\n            else {\n                uint256 xExponent = (uint128(x) >> 112) & 0x7FFF;\n                if (xExponent == 0x7FFF) return x;\n                else {\n                    uint256 xSignifier = uint128(x) &\n                        0xFFFFFFFFFFFFFFFFFFFFFFFFFFFF;\n                    if (xExponent == 0) xExponent = 1;\n                    else xSignifier |= 0x10000000000000000000000000000;\n\n                    if (xSignifier == 0) return NEGATIVE_INFINITY;\n\n                    bool resultNegative;\n                    uint256 resultExponent = 16495;\n                    uint256 resultSignifier;\n\n                    if (xExponent >= 0x3FFF) {\n                        resultNegative = false;\n                        resultSignifier = xExponent - 0x3FFF;\n                        xSignifier <<= 15;\n                    } else {\n                        resultNegative = true;\n                        if (xSignifier >= 0x10000000000000000000000000000) {\n                            resultSignifier = 0x3FFE - xExponent;\n                            xSignifier <<= 15;\n                        } else {\n                            uint256 msb = mostSignificantBit(xSignifier);\n                            resultSignifier = 16493 - msb;\n                            xSignifier <<= 127 - msb;\n                        }\n                    }\n\n                    if (xSignifier == 0x80000000000000000000000000000000) {\n                        if (resultNegative) resultSignifier += 1;\n                        uint256 shift = 112 -\n                            mostSignificantBit(resultSignifier);\n                        resultSignifier <<= shift;\n                        resultExponent -= shift;\n                    } else {\n                        uint256 bb = resultNegative ? 1 : 0;\n                        while (\n                            resultSignifier < 0x10000000000000000000000000000\n                        ) {\n                            resultSignifier <<= 1;\n                            resultExponent -= 1;\n\n                            xSignifier *= xSignifier;\n                            uint256 b = xSignifier >> 255;\n                            resultSignifier += b ^ bb;\n                            xSignifier >>= 127 + b;\n                        }\n                    }\n\n                    return\n                        bytes16(\n                            uint128(\n                                (\n                                    resultNegative\n                                        ? 0x80000000000000000000000000000000\n                                        : 0\n                                ) |\n                                    (resultExponent << 112) |\n                                    (resultSignifier &\n                                        0xFFFFFFFFFFFFFFFFFFFFFFFFFFFF)\n                            )\n                        );\n                }\n            }\n        }\n    }\n\n    /**\n     * Calculate natural logarithm of x.  Return NaN on negative x excluding -0.\n     *\n     * @param x quadruple precision number\n     * @return quadruple precision number\n     */\n    function ln(bytes16 x) internal pure returns (bytes16) {\n        unchecked {\n            return mul(log_2(x), 0x3FFE62E42FEFA39EF35793C7673007E5);\n        }\n    }\n\n    /**\n     * Calculate 2^x.\n     *\n     * @param x quadruple precision number\n     * @return quadruple precision number\n     */\n    function pow_2(bytes16 x) internal pure returns (bytes16) {\n        unchecked {\n            bool xNegative = uint128(x) > 0x80000000000000000000000000000000;\n            uint256 xExponent = (uint128(x) >> 112) & 0x7FFF;\n            uint256 xSignifier = uint128(x) & 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFF;\n\n            if (xExponent == 0x7FFF && xSignifier != 0) return NaN;\n            else if (xExponent > 16397)\n                return xNegative ? POSITIVE_ZERO : POSITIVE_INFINITY;\n            else if (xExponent < 16255)\n                return 0x3FFF0000000000000000000000000000;\n            else {\n                if (xExponent == 0) xExponent = 1;\n                else xSignifier |= 0x10000000000000000000000000000;\n\n                if (xExponent > 16367) xSignifier <<= xExponent - 16367;\n                else if (xExponent < 16367) xSignifier >>= 16367 - xExponent;\n\n                if (\n                    xNegative &&\n                    xSignifier > 0x406E00000000000000000000000000000000\n                ) return POSITIVE_ZERO;\n\n                if (\n                    !xNegative &&\n                    xSignifier > 0x3FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF\n                ) return POSITIVE_INFINITY;\n\n                uint256 resultExponent = xSignifier >> 128;\n                xSignifier &= 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF;\n                if (xNegative && xSignifier != 0) {\n                    xSignifier = ~xSignifier;\n                    resultExponent += 1;\n                }\n\n                uint256 resultSignifier = 0x80000000000000000000000000000000;\n                if (xSignifier & 0x80000000000000000000000000000000 > 0)\n                    resultSignifier =\n                        (resultSignifier *\n                            0x16A09E667F3BCC908B2FB1366EA957D3E) >>\n                        128;\n                if (xSignifier & 0x40000000000000000000000000000000 > 0)\n                    resultSignifier =\n                        (resultSignifier *\n                            0x1306FE0A31B7152DE8D5A46305C85EDEC) >>\n                        128;\n                if (xSignifier & 0x20000000000000000000000000000000 > 0)\n                    resultSignifier =\n                        (resultSignifier *\n                            0x1172B83C7D517ADCDF7C8C50EB14A791F) >>\n                        128;\n                if (xSignifier & 0x10000000000000000000000000000000 > 0)\n                    resultSignifier =\n                        (resultSignifier *\n                            0x10B5586CF9890F6298B92B71842A98363) >>\n                        128;\n                if (xSignifier & 0x8000000000000000000000000000000 > 0)\n                    resultSignifier =\n                        (resultSignifier *\n                            0x1059B0D31585743AE7C548EB68CA417FD) >>\n                        128;\n                if (xSignifier & 0x4000000000000000000000000000000 > 0)\n                    resultSignifier =\n                        (resultSignifier *\n                            0x102C9A3E778060EE6F7CACA4F7A29BDE8) >>\n                        128;\n                if (xSignifier & 0x2000000000000000000000000000000 > 0)\n                    resultSignifier =\n                        (resultSignifier *\n                            0x10163DA9FB33356D84A66AE336DCDFA3F) >>\n                        128;\n                if (xSignifier & 0x1000000000000000000000000000000 > 0)\n                    resultSignifier =\n                        (resultSignifier *\n                            0x100B1AFA5ABCBED6129AB13EC11DC9543) >>\n                        128;\n                if (xSignifier & 0x800000000000000000000000000000 > 0)\n                    resultSignifier =\n                        (resultSignifier *\n                            0x10058C86DA1C09EA1FF19D294CF2F679B) >>\n                        128;\n                if (xSignifier & 0x400000000000000000000000000000 > 0)\n                    resultSignifier =\n                        (resultSignifier *\n                            0x1002C605E2E8CEC506D21BFC89A23A00F) >>\n                        128;\n                if (xSignifier & 0x200000000000000000000000000000 > 0)\n                    resultSignifier =\n                        (resultSignifier *\n                            0x100162F3904051FA128BCA9C55C31E5DF) >>\n                        128;\n                if (xSignifier & 0x100000000000000000000000000000 > 0)\n                    resultSignifier =\n                        (resultSignifier *\n                            0x1000B175EFFDC76BA38E31671CA939725) >>\n                        128;\n                if (xSignifier & 0x80000000000000000000000000000 > 0)\n                    resultSignifier =\n                        (resultSignifier *\n                            0x100058BA01FB9F96D6CACD4B180917C3D) >>\n                        128;\n                if (xSignifier & 0x40000000000000000000000000000 > 0)\n                    resultSignifier =\n                        (resultSignifier *\n                            0x10002C5CC37DA9491D0985C348C68E7B3) >>\n                        128;\n                if (xSignifier & 0x20000000000000000000000000000 > 0)\n                    resultSignifier =\n                        (resultSignifier *\n                            0x1000162E525EE054754457D5995292026) >>\n                        128;\n                if (xSignifier & 0x10000000000000000000000000000 > 0)\n                    resultSignifier =\n                        (resultSignifier *\n                            0x10000B17255775C040618BF4A4ADE83FC) >>\n                        128;\n                if (xSignifier & 0x8000000000000000000000000000 > 0)\n                    resultSignifier =\n                        (resultSignifier *\n                            0x1000058B91B5BC9AE2EED81E9B7D4CFAB) >>\n                        128;\n                if (xSignifier & 0x4000000000000000000000000000 > 0)\n                    resultSignifier =\n                        (resultSignifier *\n                            0x100002C5C89D5EC6CA4D7C8ACC017B7C9) >>\n                        128;\n                if (xSignifier & 0x2000000000000000000000000000 > 0)\n                    resultSignifier =\n                        (resultSignifier *\n                            0x10000162E43F4F831060E02D839A9D16D) >>\n                        128;\n                if (xSignifier & 0x1000000000000000000000000000 > 0)\n                    resultSignifier =\n                        (resultSignifier *\n                            0x100000B1721BCFC99D9F890EA06911763) >>\n                        128;\n                if (xSignifier & 0x800000000000000000000000000 > 0)\n                    resultSignifier =\n                        (resultSignifier *\n                            0x10000058B90CF1E6D97F9CA14DBCC1628) >>\n                        128;\n                if (xSignifier & 0x400000000000000000000000000 > 0)\n                    resultSignifier =\n                        (resultSignifier *\n                            0x1000002C5C863B73F016468F6BAC5CA2B) >>\n                        128;\n                if (xSignifier & 0x200000000000000000000000000 > 0)\n                    resultSignifier =\n                        (resultSignifier *\n                            0x100000162E430E5A18F6119E3C02282A5) >>\n                        128;\n                if (xSignifier & 0x100000000000000000000000000 > 0)\n                    resultSignifier =\n                        (resultSignifier *\n                            0x1000000B1721835514B86E6D96EFD1BFE) >>\n                        128;\n                if (xSignifier & 0x80000000000000000000000000 > 0)\n                    resultSignifier =\n                        (resultSignifier *\n                            0x100000058B90C0B48C6BE5DF846C5B2EF) >>\n                        128;\n                if (xSignifier & 0x40000000000000000000000000 > 0)\n                    resultSignifier =\n                        (resultSignifier *\n                            0x10000002C5C8601CC6B9E94213C72737A) >>\n                        128;\n                if (xSignifier & 0x20000000000000000000000000 > 0)\n                    resultSignifier =\n                        (resultSignifier *\n                            0x1000000162E42FFF037DF38AA2B219F06) >>\n                        128;\n                if (xSignifier & 0x10000000000000000000000000 > 0)\n                    resultSignifier =\n                        (resultSignifier *\n                            0x10000000B17217FBA9C739AA5819F44F9) >>\n                        128;\n                if (xSignifier & 0x8000000000000000000000000 > 0)\n                    resultSignifier =\n                        (resultSignifier *\n                            0x1000000058B90BFCDEE5ACD3C1CEDC823) >>\n                        128;\n                if (xSignifier & 0x4000000000000000000000000 > 0)\n                    resultSignifier =\n                        (resultSignifier *\n                            0x100000002C5C85FE31F35A6A30DA1BE50) >>\n                        128;\n                if (xSignifier & 0x2000000000000000000000000 > 0)\n                    resultSignifier =\n                        (resultSignifier *\n                            0x10000000162E42FF0999CE3541B9FFFCF) >>\n                        128;\n                if (xSignifier & 0x1000000000000000000000000 > 0)\n                    resultSignifier =\n                        (resultSignifier *\n                            0x100000000B17217F80F4EF5AADDA45554) >>\n                        128;\n                if (xSignifier & 0x800000000000000000000000 > 0)\n                    resultSignifier =\n                        (resultSignifier *\n                            0x10000000058B90BFBF8479BD5A81B51AD) >>\n                        128;\n                if (xSignifier & 0x400000000000000000000000 > 0)\n                    resultSignifier =\n                        (resultSignifier *\n                            0x1000000002C5C85FDF84BD62AE30A74CC) >>\n                        128;\n                if (xSignifier & 0x200000000000000000000000 > 0)\n                    resultSignifier =\n                        (resultSignifier *\n                            0x100000000162E42FEFB2FED257559BDAA) >>\n                        128;\n                if (xSignifier & 0x100000000000000000000000 > 0)\n                    resultSignifier =\n                        (resultSignifier *\n                            0x1000000000B17217F7D5A7716BBA4A9AE) >>\n                        128;\n                if (xSignifier & 0x80000000000000000000000 > 0)\n                    resultSignifier =\n                        (resultSignifier *\n                            0x100000000058B90BFBE9DDBAC5E109CCE) >>\n                        128;\n                if (xSignifier & 0x40000000000000000000000 > 0)\n                    resultSignifier =\n                        (resultSignifier *\n                            0x10000000002C5C85FDF4B15DE6F17EB0D) >>\n                        128;\n                if (xSignifier & 0x20000000000000000000000 > 0)\n                    resultSignifier =\n                        (resultSignifier *\n                            0x1000000000162E42FEFA494F1478FDE05) >>\n                        128;\n                if (xSignifier & 0x10000000000000000000000 > 0)\n                    resultSignifier =\n                        (resultSignifier *\n                            0x10000000000B17217F7D20CF927C8E94C) >>\n                        128;\n                if (xSignifier & 0x8000000000000000000000 > 0)\n                    resultSignifier =\n                        (resultSignifier *\n                            0x1000000000058B90BFBE8F71CB4E4B33D) >>\n                        128;\n                if (xSignifier & 0x4000000000000000000000 > 0)\n                    resultSignifier =\n                        (resultSignifier *\n                            0x100000000002C5C85FDF477B662B26945) >>\n                        128;\n                if (xSignifier & 0x2000000000000000000000 > 0)\n                    resultSignifier =\n                        (resultSignifier *\n                            0x10000000000162E42FEFA3AE53369388C) >>\n                        128;\n                if (xSignifier & 0x1000000000000000000000 > 0)\n                    resultSignifier =\n                        (resultSignifier *\n                            0x100000000000B17217F7D1D351A389D40) >>\n                        128;\n                if (xSignifier & 0x800000000000000000000 > 0)\n                    resultSignifier =\n                        (resultSignifier *\n                            0x10000000000058B90BFBE8E8B2D3D4EDE) >>\n                        128;\n                if (xSignifier & 0x400000000000000000000 > 0)\n                    resultSignifier =\n                        (resultSignifier *\n                            0x1000000000002C5C85FDF4741BEA6E77E) >>\n                        128;\n                if (xSignifier & 0x200000000000000000000 > 0)\n                    resultSignifier =\n                        (resultSignifier *\n                            0x100000000000162E42FEFA39FE95583C2) >>\n                        128;\n                if (xSignifier & 0x100000000000000000000 > 0)\n                    resultSignifier =\n                        (resultSignifier *\n                            0x1000000000000B17217F7D1CFB72B45E1) >>\n                        128;\n                if (xSignifier & 0x80000000000000000000 > 0)\n                    resultSignifier =\n                        (resultSignifier *\n                            0x100000000000058B90BFBE8E7CC35C3F0) >>\n                        128;\n                if (xSignifier & 0x40000000000000000000 > 0)\n                    resultSignifier =\n                        (resultSignifier *\n                            0x10000000000002C5C85FDF473E242EA38) >>\n                        128;\n                if (xSignifier & 0x20000000000000000000 > 0)\n                    resultSignifier =\n                        (resultSignifier *\n                            0x1000000000000162E42FEFA39F02B772C) >>\n                        128;\n                if (xSignifier & 0x10000000000000000000 > 0)\n                    resultSignifier =\n                        (resultSignifier *\n                            0x10000000000000B17217F7D1CF7D83C1A) >>\n                        128;\n                if (xSignifier & 0x8000000000000000000 > 0)\n                    resultSignifier =\n                        (resultSignifier *\n                            0x1000000000000058B90BFBE8E7BDCBE2E) >>\n                        128;\n                if (xSignifier & 0x4000000000000000000 > 0)\n                    resultSignifier =\n                        (resultSignifier *\n                            0x100000000000002C5C85FDF473DEA871F) >>\n                        128;\n                if (xSignifier & 0x2000000000000000000 > 0)\n                    resultSignifier =\n                        (resultSignifier *\n                            0x10000000000000162E42FEFA39EF44D91) >>\n                        128;\n                if (xSignifier & 0x1000000000000000000 > 0)\n                    resultSignifier =\n                        (resultSignifier *\n                            0x100000000000000B17217F7D1CF79E949) >>\n                        128;\n                if (xSignifier & 0x800000000000000000 > 0)\n                    resultSignifier =\n                        (resultSignifier *\n                            0x10000000000000058B90BFBE8E7BCE544) >>\n                        128;\n                if (xSignifier & 0x400000000000000000 > 0)\n                    resultSignifier =\n                        (resultSignifier *\n                            0x1000000000000002C5C85FDF473DE6ECA) >>\n                        128;\n                if (xSignifier & 0x200000000000000000 > 0)\n                    resultSignifier =\n                        (resultSignifier *\n                            0x100000000000000162E42FEFA39EF366F) >>\n                        128;\n                if (xSignifier & 0x100000000000000000 > 0)\n                    resultSignifier =\n                        (resultSignifier *\n                            0x1000000000000000B17217F7D1CF79AFA) >>\n                        128;\n                if (xSignifier & 0x80000000000000000 > 0)\n                    resultSignifier =\n                        (resultSignifier *\n                            0x100000000000000058B90BFBE8E7BCD6D) >>\n                        128;\n                if (xSignifier & 0x40000000000000000 > 0)\n                    resultSignifier =\n                        (resultSignifier *\n                            0x10000000000000002C5C85FDF473DE6B2) >>\n                        128;\n                if (xSignifier & 0x20000000000000000 > 0)\n                    resultSignifier =\n                        (resultSignifier *\n                            0x1000000000000000162E42FEFA39EF358) >>\n                        128;\n                if (xSignifier & 0x10000000000000000 > 0)\n                    resultSignifier =\n                        (resultSignifier *\n                            0x10000000000000000B17217F7D1CF79AB) >>\n                        128;\n                if (xSignifier & 0x8000000000000000 > 0)\n                    resultSignifier =\n                        (resultSignifier *\n                            0x1000000000000000058B90BFBE8E7BCD5) >>\n                        128;\n                if (xSignifier & 0x4000000000000000 > 0)\n                    resultSignifier =\n                        (resultSignifier *\n                            0x100000000000000002C5C85FDF473DE6A) >>\n                        128;\n                if (xSignifier & 0x2000000000000000 > 0)\n                    resultSignifier =\n                        (resultSignifier *\n                            0x10000000000000000162E42FEFA39EF34) >>\n                        128;\n                if (xSignifier & 0x1000000000000000 > 0)\n                    resultSignifier =\n                        (resultSignifier *\n                            0x100000000000000000B17217F7D1CF799) >>\n                        128;\n                if (xSignifier & 0x800000000000000 > 0)\n                    resultSignifier =\n                        (resultSignifier *\n                            0x10000000000000000058B90BFBE8E7BCC) >>\n                        128;\n                if (xSignifier & 0x400000000000000 > 0)\n                    resultSignifier =\n                        (resultSignifier *\n                            0x1000000000000000002C5C85FDF473DE5) >>\n                        128;\n                if (xSignifier & 0x200000000000000 > 0)\n                    resultSignifier =\n                        (resultSignifier *\n                            0x100000000000000000162E42FEFA39EF2) >>\n                        128;\n                if (xSignifier & 0x100000000000000 > 0)\n                    resultSignifier =\n                        (resultSignifier *\n                            0x1000000000000000000B17217F7D1CF78) >>\n                        128;\n                if (xSignifier & 0x80000000000000 > 0)\n                    resultSignifier =\n                        (resultSignifier *\n                            0x100000000000000000058B90BFBE8E7BB) >>\n                        128;\n                if (xSignifier & 0x40000000000000 > 0)\n                    resultSignifier =\n                        (resultSignifier *\n                            0x10000000000000000002C5C85FDF473DD) >>\n                        128;\n                if (xSignifier & 0x20000000000000 > 0)\n                    resultSignifier =\n                        (resultSignifier *\n                            0x1000000000000000000162E42FEFA39EE) >>\n                        128;\n                if (xSignifier & 0x10000000000000 > 0)\n                    resultSignifier =\n                        (resultSignifier *\n                            0x10000000000000000000B17217F7D1CF6) >>\n                        128;\n                if (xSignifier & 0x8000000000000 > 0)\n                    resultSignifier =\n                        (resultSignifier *\n                            0x1000000000000000000058B90BFBE8E7A) >>\n                        128;\n                if (xSignifier & 0x4000000000000 > 0)\n                    resultSignifier =\n                        (resultSignifier *\n                            0x100000000000000000002C5C85FDF473C) >>\n                        128;\n                if (xSignifier & 0x2000000000000 > 0)\n                    resultSignifier =\n                        (resultSignifier *\n                            0x10000000000000000000162E42FEFA39D) >>\n                        128;\n                if (xSignifier & 0x1000000000000 > 0)\n                    resultSignifier =\n                        (resultSignifier *\n                            0x100000000000000000000B17217F7D1CE) >>\n                        128;\n                if (xSignifier & 0x800000000000 > 0)\n                    resultSignifier =\n                        (resultSignifier *\n                            0x10000000000000000000058B90BFBE8E6) >>\n                        128;\n                if (xSignifier & 0x400000000000 > 0)\n                    resultSignifier =\n                        (resultSignifier *\n                            0x1000000000000000000002C5C85FDF472) >>\n                        128;\n                if (xSignifier & 0x200000000000 > 0)\n                    resultSignifier =\n                        (resultSignifier *\n                            0x100000000000000000000162E42FEFA38) >>\n                        128;\n                if (xSignifier & 0x100000000000 > 0)\n                    resultSignifier =\n                        (resultSignifier *\n                            0x1000000000000000000000B17217F7D1B) >>\n                        128;\n                if (xSignifier & 0x80000000000 > 0)\n                    resultSignifier =\n                        (resultSignifier *\n                            0x100000000000000000000058B90BFBE8D) >>\n                        128;\n                if (xSignifier & 0x40000000000 > 0)\n                    resultSignifier =\n                        (resultSignifier *\n                            0x10000000000000000000002C5C85FDF46) >>\n                        128;\n                if (xSignifier & 0x20000000000 > 0)\n                    resultSignifier =\n                        (resultSignifier *\n                            0x1000000000000000000000162E42FEFA2) >>\n                        128;\n                if (xSignifier & 0x10000000000 > 0)\n                    resultSignifier =\n                        (resultSignifier *\n                            0x10000000000000000000000B17217F7D0) >>\n                        128;\n                if (xSignifier & 0x8000000000 > 0)\n                    resultSignifier =\n                        (resultSignifier *\n                            0x1000000000000000000000058B90BFBE7) >>\n                        128;\n                if (xSignifier & 0x4000000000 > 0)\n                    resultSignifier =\n                        (resultSignifier *\n                            0x100000000000000000000002C5C85FDF3) >>\n                        128;\n                if (xSignifier & 0x2000000000 > 0)\n                    resultSignifier =\n                        (resultSignifier *\n                            0x10000000000000000000000162E42FEF9) >>\n                        128;\n                if (xSignifier & 0x1000000000 > 0)\n                    resultSignifier =\n                        (resultSignifier *\n                            0x100000000000000000000000B17217F7C) >>\n                        128;\n                if (xSignifier & 0x800000000 > 0)\n                    resultSignifier =\n                        (resultSignifier *\n                            0x10000000000000000000000058B90BFBD) >>\n                        128;\n                if (xSignifier & 0x400000000 > 0)\n                    resultSignifier =\n                        (resultSignifier *\n                            0x1000000000000000000000002C5C85FDE) >>\n                        128;\n                if (xSignifier & 0x200000000 > 0)\n                    resultSignifier =\n                        (resultSignifier *\n                            0x100000000000000000000000162E42FEE) >>\n                        128;\n                if (xSignifier & 0x100000000 > 0)\n                    resultSignifier =\n                        (resultSignifier *\n                            0x1000000000000000000000000B17217F6) >>\n                        128;\n                if (xSignifier & 0x80000000 > 0)\n                    resultSignifier =\n                        (resultSignifier *\n                            0x100000000000000000000000058B90BFA) >>\n                        128;\n                if (xSignifier & 0x40000000 > 0)\n                    resultSignifier =\n                        (resultSignifier *\n                            0x10000000000000000000000002C5C85FC) >>\n                        128;\n                if (xSignifier & 0x20000000 > 0)\n                    resultSignifier =\n                        (resultSignifier *\n                            0x1000000000000000000000000162E42FD) >>\n                        128;\n                if (xSignifier & 0x10000000 > 0)\n                    resultSignifier =\n                        (resultSignifier *\n                            0x10000000000000000000000000B17217E) >>\n                        128;\n                if (xSignifier & 0x8000000 > 0)\n                    resultSignifier =\n                        (resultSignifier *\n                            0x1000000000000000000000000058B90BE) >>\n                        128;\n                if (xSignifier & 0x4000000 > 0)\n                    resultSignifier =\n                        (resultSignifier *\n                            0x100000000000000000000000002C5C85E) >>\n                        128;\n                if (xSignifier & 0x2000000 > 0)\n                    resultSignifier =\n                        (resultSignifier *\n                            0x10000000000000000000000000162E42E) >>\n                        128;\n                if (xSignifier & 0x1000000 > 0)\n                    resultSignifier =\n                        (resultSignifier *\n                            0x100000000000000000000000000B17216) >>\n                        128;\n                if (xSignifier & 0x800000 > 0)\n                    resultSignifier =\n                        (resultSignifier *\n                            0x10000000000000000000000000058B90A) >>\n                        128;\n                if (xSignifier & 0x400000 > 0)\n                    resultSignifier =\n                        (resultSignifier *\n                            0x1000000000000000000000000002C5C84) >>\n                        128;\n                if (xSignifier & 0x200000 > 0)\n                    resultSignifier =\n                        (resultSignifier *\n                            0x100000000000000000000000000162E41) >>\n                        128;\n                if (xSignifier & 0x100000 > 0)\n                    resultSignifier =\n                        (resultSignifier *\n                            0x1000000000000000000000000000B1720) >>\n                        128;\n                if (xSignifier & 0x80000 > 0)\n                    resultSignifier =\n                        (resultSignifier *\n                            0x100000000000000000000000000058B8F) >>\n                        128;\n                if (xSignifier & 0x40000 > 0)\n                    resultSignifier =\n                        (resultSignifier *\n                            0x10000000000000000000000000002C5C7) >>\n                        128;\n                if (xSignifier & 0x20000 > 0)\n                    resultSignifier =\n                        (resultSignifier *\n                            0x1000000000000000000000000000162E3) >>\n                        128;\n                if (xSignifier & 0x10000 > 0)\n                    resultSignifier =\n                        (resultSignifier *\n                            0x10000000000000000000000000000B171) >>\n                        128;\n                if (xSignifier & 0x8000 > 0)\n                    resultSignifier =\n                        (resultSignifier *\n                            0x1000000000000000000000000000058B8) >>\n                        128;\n                if (xSignifier & 0x4000 > 0)\n                    resultSignifier =\n                        (resultSignifier *\n                            0x100000000000000000000000000002C5B) >>\n                        128;\n                if (xSignifier & 0x2000 > 0)\n                    resultSignifier =\n                        (resultSignifier *\n                            0x10000000000000000000000000000162D) >>\n                        128;\n                if (xSignifier & 0x1000 > 0)\n                    resultSignifier =\n                        (resultSignifier *\n                            0x100000000000000000000000000000B16) >>\n                        128;\n                if (xSignifier & 0x800 > 0)\n                    resultSignifier =\n                        (resultSignifier *\n                            0x10000000000000000000000000000058A) >>\n                        128;\n                if (xSignifier & 0x400 > 0)\n                    resultSignifier =\n                        (resultSignifier *\n                            0x1000000000000000000000000000002C4) >>\n                        128;\n                if (xSignifier & 0x200 > 0)\n                    resultSignifier =\n                        (resultSignifier *\n                            0x100000000000000000000000000000161) >>\n                        128;\n                if (xSignifier & 0x100 > 0)\n                    resultSignifier =\n                        (resultSignifier *\n                            0x1000000000000000000000000000000B0) >>\n                        128;\n                if (xSignifier & 0x80 > 0)\n                    resultSignifier =\n                        (resultSignifier *\n                            0x100000000000000000000000000000057) >>\n                        128;\n                if (xSignifier & 0x40 > 0)\n                    resultSignifier =\n                        (resultSignifier *\n                            0x10000000000000000000000000000002B) >>\n                        128;\n                if (xSignifier & 0x20 > 0)\n                    resultSignifier =\n                        (resultSignifier *\n                            0x100000000000000000000000000000015) >>\n                        128;\n                if (xSignifier & 0x10 > 0)\n                    resultSignifier =\n                        (resultSignifier *\n                            0x10000000000000000000000000000000A) >>\n                        128;\n                if (xSignifier & 0x8 > 0)\n                    resultSignifier =\n                        (resultSignifier *\n                            0x100000000000000000000000000000004) >>\n                        128;\n                if (xSignifier & 0x4 > 0)\n                    resultSignifier =\n                        (resultSignifier *\n                            0x100000000000000000000000000000001) >>\n                        128;\n\n                if (!xNegative) {\n                    resultSignifier =\n                        (resultSignifier >> 15) &\n                        0xFFFFFFFFFFFFFFFFFFFFFFFFFFFF;\n                    resultExponent += 0x3FFF;\n                } else if (resultExponent <= 0x3FFE) {\n                    resultSignifier =\n                        (resultSignifier >> 15) &\n                        0xFFFFFFFFFFFFFFFFFFFFFFFFFFFF;\n                    resultExponent = 0x3FFF - resultExponent;\n                } else {\n                    resultSignifier =\n                        resultSignifier >>\n                        (resultExponent - 16367);\n                    resultExponent = 0;\n                }\n\n                return\n                    bytes16(uint128((resultExponent << 112) | resultSignifier));\n            }\n        }\n    }\n\n    /**\n     * Calculate e^x.\n     *\n     * @param x quadruple precision number\n     * @return quadruple precision number\n     */\n    function exp(bytes16 x) internal pure returns (bytes16) {\n        unchecked {\n            return pow_2(mul(x, 0x3FFF71547652B82FE1777D0FFDA0D23A));\n        }\n    }\n\n    /**\n     * Get index of the most significant non-zero bit in binary representation of\n     * x.  Reverts if x is zero.\n     *\n     * @return index of the most significant non-zero bit in binary representation\n     *         of x\n     */\n    function mostSignificantBit(uint256 x) private pure returns (uint256) {\n        unchecked {\n            require(x > 0);\n\n            uint256 result = 0;\n\n            if (x >= 0x100000000000000000000000000000000) {\n                x >>= 128;\n                result += 128;\n            }\n            if (x >= 0x10000000000000000) {\n                x >>= 64;\n                result += 64;\n            }\n            if (x >= 0x100000000) {\n                x >>= 32;\n                result += 32;\n            }\n            if (x >= 0x10000) {\n                x >>= 16;\n                result += 16;\n            }\n            if (x >= 0x100) {\n                x >>= 8;\n                result += 8;\n            }\n            if (x >= 0x10) {\n                x >>= 4;\n                result += 4;\n            }\n            if (x >= 0x4) {\n                x >>= 2;\n                result += 2;\n            }\n            if (x >= 0x2) result += 1; // No need to shift x anymore\n\n            return result;\n        }\n    }\n}\n"
    },
    "contracts/v1/RecoverableFunds.sol": {
      "content": "// SPDX-License-Identifier: UNLICENSED\n\npragma solidity ^0.8.0;\n\nimport \"@openzeppelin/contracts/access/Ownable.sol\";\nimport \"@openzeppelin/contracts/token/ERC20/IERC20.sol\";\n\n/**\n * @dev Allows the owner to retrieve ETH or tokens sent to this contract by mistake.\n */\ncontract RecoverableFunds is Ownable {\n    function retrieveTokens(\n        address recipient,\n        address tokenAddress\n    ) public virtual onlyOwner {\n        IERC20 token = IERC20(tokenAddress);\n        token.transfer(recipient, token.balanceOf(address(this)));\n    }\n\n    function retriveETH(address payable recipient) public virtual onlyOwner {\n        recipient.transfer(address(this).balance);\n    }\n}\n"
    },
    "contracts/v1/WithCallback.sol": {
      "content": "// SPDX-License-Identifier: UNLICENSED\n\npragma solidity ^0.8.0;\n\nimport \"@openzeppelin/contracts/access/Ownable.sol\";\nimport \"./interfaces/ICallbackContract.sol\";\n\n/**\n * @dev Allows the owner to register a callback contract that will be called after every call of the transfer or burn function\n */\ncontract WithCallback is Ownable {\n    ICallbackContract public callback;\n\n    enum CallbackType {\n        REFLECT_INTERNAL,\n        REFLECT_EXTERNAL,\n        INCREASE_BALANCE,\n        DECREASE_BALANCE,\n        DECREASE_TOTAL_SUPPLY,\n        TRANSFER,\n        BURN\n    }\n\n    mapping(CallbackType => bool) internal _callbacks;\n\n    function setCallbackContract(address _callback) external onlyOwner {\n        callback = ICallbackContract(_callback);\n    }\n\n    function setCallbackFunction(\n        CallbackType callbackFunction,\n        bool isActive\n    ) external onlyOwner {\n        require(\n            _callbacks[callbackFunction] != isActive,\n            \"WithCallback: already set\"\n        );\n        _callbacks[callbackFunction] = isActive;\n    }\n\n    function _reflectCallback(uint256 tAmount, uint256 rAmount) internal {\n        if (_callbacks[CallbackType.REFLECT_INTERNAL]) {\n            try callback.reflectCallback(tAmount, rAmount) {} catch {}\n        }\n    }\n\n    function _reflectCallback(\n        address account,\n        uint256 tAmount,\n        uint256 rAmount\n    ) internal {\n        if (_callbacks[CallbackType.REFLECT_EXTERNAL]) {\n            try callback.reflectCallback(account, tAmount, rAmount) {} catch {}\n        }\n    }\n\n    function _increaseBalanceCallback(\n        address account,\n        uint256 tAmount,\n        uint256 rAmount\n    ) internal {\n        if (_callbacks[CallbackType.INCREASE_BALANCE]) {\n            try\n                callback.increaseBalanceCallback(account, tAmount, rAmount)\n            {} catch {}\n        }\n    }\n\n    function _decreaseBalanceCallback(\n        address account,\n        uint256 tAmount,\n        uint256 rAmount\n    ) internal {\n        if (_callbacks[CallbackType.DECREASE_BALANCE]) {\n            try\n                callback.decreaseBalanceCallback(account, tAmount, rAmount)\n            {} catch {}\n        }\n    }\n\n    function _decreaseTotalSupplyCallback(\n        uint256 tAmount,\n        uint256 rAmount\n    ) internal {\n        if (_callbacks[CallbackType.DECREASE_TOTAL_SUPPLY]) {\n            try\n                callback.decreaseTotalSupplyCallback(tAmount, rAmount)\n            {} catch {}\n        }\n    }\n\n    function _transferCallback(\n        address from,\n        address to,\n        uint256 tFromAmount,\n        uint256 rFromAmount,\n        uint256 tToAmount,\n        uint256 rToAmount\n    ) internal {\n        if (_callbacks[CallbackType.TRANSFER]) {\n            try\n                callback.transferCallback(\n                    from,\n                    to,\n                    tFromAmount,\n                    rFromAmount,\n                    tToAmount,\n                    rToAmount\n                )\n            {} catch {}\n        }\n    }\n\n    function _burnCallback(\n        address account,\n        uint256 tAmount,\n        uint256 rAmount\n    ) internal {\n        if (_callbacks[CallbackType.BURN]) {\n            try callback.burnCallback(account, tAmount, rAmount) {} catch {}\n        }\n    }\n}\n"
    }
  },
  "settings": {
    "optimizer": {
      "enabled": true,
      "runs": 200
    },
    "outputSelection": {
      "*": {
        "*": [
          "abi",
          "evm.bytecode",
          "evm.deployedBytecode",
          "evm.methodIdentifiers",
          "metadata",
          "devdoc",
          "userdoc",
          "storageLayout",
          "evm.gasEstimates"
        ],
        "": [
          "ast"
        ]
      }
    },
    "metadata": {
      "useLiteralContent": true
    }
  }
}