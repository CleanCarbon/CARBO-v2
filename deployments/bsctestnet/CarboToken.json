{
  "address": "0x7156412dF929c3cdB82cCbf22716F7b1c84fB31A",
  "abi": [
    {
      "inputs": [],
      "stateMutability": "nonpayable",
      "type": "constructor"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "owner",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "spender",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "value",
          "type": "uint256"
        }
      ],
      "name": "Approval",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "rfi",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "dividends",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "buyback",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "treasury",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "liquidity",
          "type": "uint256"
        }
      ],
      "name": "FeeTaken",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "previousOwner",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "newOwner",
          "type": "address"
        }
      ],
      "name": "OwnershipTransferred",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "address",
          "name": "account",
          "type": "address"
        }
      ],
      "name": "Paused",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "from",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "to",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "value",
          "type": "uint256"
        }
      ],
      "name": "Transfer",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "address",
          "name": "account",
          "type": "address"
        }
      ],
      "name": "Unpaused",
      "type": "event"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "owner",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "spender",
          "type": "address"
        }
      ],
      "name": "allowance",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "spender",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        }
      ],
      "name": "approve",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "account",
          "type": "address"
        }
      ],
      "name": "balanceOf",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        }
      ],
      "name": "burn",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "account",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        }
      ],
      "name": "burnFrom",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "callback",
      "outputs": [
        {
          "internalType": "contract ICallbackContract",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "decimals",
      "outputs": [
        {
          "internalType": "uint8",
          "name": "",
          "type": "uint8"
        }
      ],
      "stateMutability": "pure",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "spender",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "subtractedValue",
          "type": "uint256"
        }
      ],
      "name": "decreaseAllowance",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "account",
          "type": "address"
        }
      ],
      "name": "excludeFromRFI",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "enum ICarboToken.FeeType",
          "name": "feeType",
          "type": "uint8"
        }
      ],
      "name": "getFeeAddresses",
      "outputs": [
        {
          "components": [
            {
              "internalType": "address",
              "name": "dividends",
              "type": "address"
            },
            {
              "internalType": "address",
              "name": "buyback",
              "type": "address"
            },
            {
              "internalType": "address",
              "name": "treasury",
              "type": "address"
            },
            {
              "internalType": "address",
              "name": "liquidity",
              "type": "address"
            }
          ],
          "internalType": "struct ICarboToken.FeeAddresses",
          "name": "",
          "type": "tuple"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "enum ICarboToken.FeeType",
          "name": "feeType",
          "type": "uint8"
        }
      ],
      "name": "getFees",
      "outputs": [
        {
          "components": [
            {
              "internalType": "uint256",
              "name": "rfi",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "dividends",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "buyback",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "treasury",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "liquidity",
              "type": "uint256"
            }
          ],
          "internalType": "struct ICarboToken.Fees",
          "name": "",
          "type": "tuple"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "account",
          "type": "address"
        }
      ],
      "name": "getROwned",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "getRTotal",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "account",
          "type": "address"
        }
      ],
      "name": "includeInRFI",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "spender",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "addedValue",
          "type": "uint256"
        }
      ],
      "name": "increaseAllowance",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "name",
      "outputs": [
        {
          "internalType": "string",
          "name": "",
          "type": "string"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "owner",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "pause",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "paused",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "tAmount",
          "type": "uint256"
        }
      ],
      "name": "reflect",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "tAmount",
          "type": "uint256"
        }
      ],
      "name": "reflectionFromToken",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "renounceOwnership",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "recipient",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "tokenAddress",
          "type": "address"
        }
      ],
      "name": "retrieveTokens",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address payable",
          "name": "recipient",
          "type": "address"
        }
      ],
      "name": "retriveETH",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_callback",
          "type": "address"
        }
      ],
      "name": "setCallbackContract",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "enum WithCallback.CallbackType",
          "name": "callbackFunction",
          "type": "uint8"
        },
        {
          "internalType": "bool",
          "name": "isActive",
          "type": "bool"
        }
      ],
      "name": "setCallbackFunction",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "enum ICarboToken.FeeType",
          "name": "feeType",
          "type": "uint8"
        },
        {
          "internalType": "address",
          "name": "dividends",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "buyback",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "treasury",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "liquidity",
          "type": "address"
        }
      ],
      "name": "setFeeAddresses",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "enum ICarboToken.FeeType",
          "name": "feeType",
          "type": "uint8"
        },
        {
          "internalType": "uint256",
          "name": "rfi",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "dividends",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "buyback",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "treasury",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "liquidity",
          "type": "uint256"
        }
      ],
      "name": "setFees",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "account",
          "type": "address"
        },
        {
          "internalType": "bool",
          "name": "value",
          "type": "bool"
        }
      ],
      "name": "setTaxExempt",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "account",
          "type": "address"
        },
        {
          "internalType": "bool",
          "name": "value",
          "type": "bool"
        }
      ],
      "name": "setTaxable",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "symbol",
      "outputs": [
        {
          "internalType": "string",
          "name": "",
          "type": "string"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "rAmount",
          "type": "uint256"
        }
      ],
      "name": "tokenFromReflection",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "totalSupply",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "recipient",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        }
      ],
      "name": "transfer",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "sender",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "recipient",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        }
      ],
      "name": "transferFrom",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "newOwner",
          "type": "address"
        }
      ],
      "name": "transferOwnership",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "unpause",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    }
  ],
  "transactionHash": "0x0219786956f0e13e9e111c133c82af75ef7a3da76873e7f3105d9565fcd82e82",
  "receipt": {
    "to": null,
    "from": "0xc3a20F9D15cfD2224038EcCC8186C216366c4BFd",
    "contractAddress": "0x7156412dF929c3cdB82cCbf22716F7b1c84fB31A",
    "transactionIndex": 0,
    "gasUsed": "2632560",
    "logsBloom": "0x
    "blockHash": "0x56f04340dd503fa2c07eba920e3edc3ca4b76d7f8bf4eeb1c811f9c6fe426f66",
    "transactionHash": "0x0219786956f0e13e9e111c133c82af75ef7a3da76873e7f3105d9565fcd82e82",
    "logs": [
      {
        "transactionIndex": 0,
        "blockNumber": 27428209,
        "transactionHash": "0x0219786956f0e13e9e111c133c82af75ef7a3da76873e7f3105d9565fcd82e82",
        "address": "0x7156412dF929c3cdB82cCbf22716F7b1c84fB31A",
        "topics": [
          "0x8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e0",
          "0x0000000000000000000000000000000000000000000000000000000000000000",
          "0x000000000000000000000000c3a20f9d15cfd2224038eccc8186c216366c4bfd"
        ],
        "data": "0x",
        "logIndex": 0,
        "blockHash": "0x56f04340dd503fa2c07eba920e3edc3ca4b76d7f8bf4eeb1c811f9c6fe426f66"
      },
      {
        "transactionIndex": 0,
        "blockNumber": 27428209,
        "transactionHash": "0x0219786956f0e13e9e111c133c82af75ef7a3da76873e7f3105d9565fcd82e82",
        "address": "0x7156412dF929c3cdB82cCbf22716F7b1c84fB31A",
        "topics": [
          "0xddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef",
          "0x0000000000000000000000000000000000000000000000000000000000000000",
          "0x000000000000000000000000c3a20f9d15cfd2224038eccc8186c216366c4bfd"
        ],
        "data": "0x0000000000000000000000000000000000000000019d971e4fe8401e74000000",
        "logIndex": 1,
        "blockHash": "0x56f04340dd503fa2c07eba920e3edc3ca4b76d7f8bf4eeb1c811f9c6fe426f66"
      }
    ],
    "blockNumber": 27428209,
    "cumulativeGasUsed": "2632560",
    "status": 1,
    "byzantium": true
  },
  "args": [],
  "solcInputHash": "02e4a29bfd2480dae87c85e2856a38fe",
  "metadata": "{\"compiler\":{\"version\":\"0.8.10+commit.fc410830\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Approval\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"rfi\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"dividends\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"buyback\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"treasury\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"liquidity\",\"type\":\"uint256\"}],\"name\":\"FeeTaken\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"Paused\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Transfer\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"Unpaused\",\"type\":\"event\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"}],\"name\":\"allowance\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"approve\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"balanceOf\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"burn\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"burnFrom\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"callback\",\"outputs\":[{\"internalType\":\"contract ICallbackContract\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"decimals\",\"outputs\":[{\"internalType\":\"uint8\",\"name\":\"\",\"type\":\"uint8\"}],\"stateMutability\":\"pure\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"subtractedValue\",\"type\":\"uint256\"}],\"name\":\"decreaseAllowance\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"excludeFromRFI\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"enum ICarboToken.FeeType\",\"name\":\"feeType\",\"type\":\"uint8\"}],\"name\":\"getFeeAddresses\",\"outputs\":[{\"components\":[{\"internalType\":\"address\",\"name\":\"dividends\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"buyback\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"treasury\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"liquidity\",\"type\":\"address\"}],\"internalType\":\"struct ICarboToken.FeeAddresses\",\"name\":\"\",\"type\":\"tuple\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"enum ICarboToken.FeeType\",\"name\":\"feeType\",\"type\":\"uint8\"}],\"name\":\"getFees\",\"outputs\":[{\"components\":[{\"internalType\":\"uint256\",\"name\":\"rfi\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"dividends\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"buyback\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"treasury\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"liquidity\",\"type\":\"uint256\"}],\"internalType\":\"struct ICarboToken.Fees\",\"name\":\"\",\"type\":\"tuple\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"getROwned\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getRTotal\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"includeInRFI\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"addedValue\",\"type\":\"uint256\"}],\"name\":\"increaseAllowance\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"name\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"pause\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"paused\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"tAmount\",\"type\":\"uint256\"}],\"name\":\"reflect\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"tAmount\",\"type\":\"uint256\"}],\"name\":\"reflectionFromToken\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"renounceOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"recipient\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"tokenAddress\",\"type\":\"address\"}],\"name\":\"retrieveTokens\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address payable\",\"name\":\"recipient\",\"type\":\"address\"}],\"name\":\"retriveETH\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_callback\",\"type\":\"address\"}],\"name\":\"setCallbackContract\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"enum WithCallback.CallbackType\",\"name\":\"callbackFunction\",\"type\":\"uint8\"},{\"internalType\":\"bool\",\"name\":\"isActive\",\"type\":\"bool\"}],\"name\":\"setCallbackFunction\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"enum ICarboToken.FeeType\",\"name\":\"feeType\",\"type\":\"uint8\"},{\"internalType\":\"address\",\"name\":\"dividends\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"buyback\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"treasury\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"liquidity\",\"type\":\"address\"}],\"name\":\"setFeeAddresses\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"enum ICarboToken.FeeType\",\"name\":\"feeType\",\"type\":\"uint8\"},{\"internalType\":\"uint256\",\"name\":\"rfi\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"dividends\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"buyback\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"treasury\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"liquidity\",\"type\":\"uint256\"}],\"name\":\"setFees\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"},{\"internalType\":\"bool\",\"name\":\"value\",\"type\":\"bool\"}],\"name\":\"setTaxExempt\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"},{\"internalType\":\"bool\",\"name\":\"value\",\"type\":\"bool\"}],\"name\":\"setTaxable\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"symbol\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"rAmount\",\"type\":\"uint256\"}],\"name\":\"tokenFromReflection\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalSupply\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"recipient\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"transfer\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"sender\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"recipient\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"transferFrom\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"unpause\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}],\"devdoc\":{\"kind\":\"dev\",\"methods\":{\"allowance(address,address)\":{\"details\":\"Returns the remaining number of tokens that `spender` will be allowed to spend on behalf of `owner` through {transferFrom}. This is zero by default. This value changes when {approve} or {transferFrom} are called.\"},\"approve(address,uint256)\":{\"details\":\"Sets `amount` as the allowance of `spender` over the caller's tokens. Returns a boolean value indicating whether the operation succeeded. IMPORTANT: Beware that changing an allowance with this method brings the risk that someone may use both the old and the new allowance by unfortunate transaction ordering. One possible solution to mitigate this race condition is to first reduce the spender's allowance to 0 and set the desired value afterwards: https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729 Emits an {Approval} event.\"},\"balanceOf(address)\":{\"details\":\"Returns the amount of tokens owned by `account`.\"},\"owner()\":{\"details\":\"Returns the address of the current owner.\"},\"paused()\":{\"details\":\"Returns true if the contract is paused, and false otherwise.\"},\"renounceOwnership()\":{\"details\":\"Leaves the contract without owner. It will not be possible to call `onlyOwner` functions anymore. Can only be called by the current owner. NOTE: Renouncing ownership will leave the contract without an owner, thereby removing any functionality that is only available to the owner.\"},\"totalSupply()\":{\"details\":\"Returns the amount of tokens in existence.\"},\"transferOwnership(address)\":{\"details\":\"Transfers ownership of the contract to a new account (`newOwner`). Can only be called by the current owner.\"}},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{},\"version\":1}},\"settings\":{\"compilationTarget\":{\"contracts/v1/CarboToken.sol\":\"CarboToken\"},\"evmVersion\":\"london\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":true,\"runs\":200},\"remappings\":[]},\"sources\":{\"@openzeppelin/contracts/access/Ownable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.7.0) (access/Ownable.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../utils/Context.sol\\\";\\n\\n/**\\n * @dev Contract module which provides a basic access control mechanism, where\\n * there is an account (an owner) that can be granted exclusive access to\\n * specific functions.\\n *\\n * By default, the owner account will be the one that deploys the contract. This\\n * can later be changed with {transferOwnership}.\\n *\\n * This module is used through inheritance. It will make available the modifier\\n * `onlyOwner`, which can be applied to your functions to restrict their use to\\n * the owner.\\n */\\nabstract contract Ownable is Context {\\n    address private _owner;\\n\\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\\n\\n    /**\\n     * @dev Initializes the contract setting the deployer as the initial owner.\\n     */\\n    constructor() {\\n        _transferOwnership(_msgSender());\\n    }\\n\\n    /**\\n     * @dev Throws if called by any account other than the owner.\\n     */\\n    modifier onlyOwner() {\\n        _checkOwner();\\n        _;\\n    }\\n\\n    /**\\n     * @dev Returns the address of the current owner.\\n     */\\n    function owner() public view virtual returns (address) {\\n        return _owner;\\n    }\\n\\n    /**\\n     * @dev Throws if the sender is not the owner.\\n     */\\n    function _checkOwner() internal view virtual {\\n        require(owner() == _msgSender(), \\\"Ownable: caller is not the owner\\\");\\n    }\\n\\n    /**\\n     * @dev Leaves the contract without owner. It will not be possible to call\\n     * `onlyOwner` functions anymore. Can only be called by the current owner.\\n     *\\n     * NOTE: Renouncing ownership will leave the contract without an owner,\\n     * thereby removing any functionality that is only available to the owner.\\n     */\\n    function renounceOwnership() public virtual onlyOwner {\\n        _transferOwnership(address(0));\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Can only be called by the current owner.\\n     */\\n    function transferOwnership(address newOwner) public virtual onlyOwner {\\n        require(newOwner != address(0), \\\"Ownable: new owner is the zero address\\\");\\n        _transferOwnership(newOwner);\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Internal function without access restriction.\\n     */\\n    function _transferOwnership(address newOwner) internal virtual {\\n        address oldOwner = _owner;\\n        _owner = newOwner;\\n        emit OwnershipTransferred(oldOwner, newOwner);\\n    }\\n}\\n\",\"keccak256\":\"0xa94b34880e3c1b0b931662cb1c09e5dfa6662f31cba80e07c5ee71cd135c9673\",\"license\":\"MIT\"},\"@openzeppelin/contracts/security/Pausable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.7.0) (security/Pausable.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../utils/Context.sol\\\";\\n\\n/**\\n * @dev Contract module which allows children to implement an emergency stop\\n * mechanism that can be triggered by an authorized account.\\n *\\n * This module is used through inheritance. It will make available the\\n * modifiers `whenNotPaused` and `whenPaused`, which can be applied to\\n * the functions of your contract. Note that they will not be pausable by\\n * simply including this module, only once the modifiers are put in place.\\n */\\nabstract contract Pausable is Context {\\n    /**\\n     * @dev Emitted when the pause is triggered by `account`.\\n     */\\n    event Paused(address account);\\n\\n    /**\\n     * @dev Emitted when the pause is lifted by `account`.\\n     */\\n    event Unpaused(address account);\\n\\n    bool private _paused;\\n\\n    /**\\n     * @dev Initializes the contract in unpaused state.\\n     */\\n    constructor() {\\n        _paused = false;\\n    }\\n\\n    /**\\n     * @dev Modifier to make a function callable only when the contract is not paused.\\n     *\\n     * Requirements:\\n     *\\n     * - The contract must not be paused.\\n     */\\n    modifier whenNotPaused() {\\n        _requireNotPaused();\\n        _;\\n    }\\n\\n    /**\\n     * @dev Modifier to make a function callable only when the contract is paused.\\n     *\\n     * Requirements:\\n     *\\n     * - The contract must be paused.\\n     */\\n    modifier whenPaused() {\\n        _requirePaused();\\n        _;\\n    }\\n\\n    /**\\n     * @dev Returns true if the contract is paused, and false otherwise.\\n     */\\n    function paused() public view virtual returns (bool) {\\n        return _paused;\\n    }\\n\\n    /**\\n     * @dev Throws if the contract is paused.\\n     */\\n    function _requireNotPaused() internal view virtual {\\n        require(!paused(), \\\"Pausable: paused\\\");\\n    }\\n\\n    /**\\n     * @dev Throws if the contract is not paused.\\n     */\\n    function _requirePaused() internal view virtual {\\n        require(paused(), \\\"Pausable: not paused\\\");\\n    }\\n\\n    /**\\n     * @dev Triggers stopped state.\\n     *\\n     * Requirements:\\n     *\\n     * - The contract must not be paused.\\n     */\\n    function _pause() internal virtual whenNotPaused {\\n        _paused = true;\\n        emit Paused(_msgSender());\\n    }\\n\\n    /**\\n     * @dev Returns to normal state.\\n     *\\n     * Requirements:\\n     *\\n     * - The contract must be paused.\\n     */\\n    function _unpause() internal virtual whenPaused {\\n        _paused = false;\\n        emit Unpaused(_msgSender());\\n    }\\n}\\n\",\"keccak256\":\"0x0849d93b16c9940beb286a7864ed02724b248b93e0d80ef6355af5ef15c64773\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC20/IERC20.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.6.0) (token/ERC20/IERC20.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC20 standard as defined in the EIP.\\n */\\ninterface IERC20 {\\n    /**\\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\\n     * another (`to`).\\n     *\\n     * Note that `value` may be zero.\\n     */\\n    event Transfer(address indexed from, address indexed to, uint256 value);\\n\\n    /**\\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\\n     * a call to {approve}. `value` is the new allowance.\\n     */\\n    event Approval(address indexed owner, address indexed spender, uint256 value);\\n\\n    /**\\n     * @dev Returns the amount of tokens in existence.\\n     */\\n    function totalSupply() external view returns (uint256);\\n\\n    /**\\n     * @dev Returns the amount of tokens owned by `account`.\\n     */\\n    function balanceOf(address account) external view returns (uint256);\\n\\n    /**\\n     * @dev Moves `amount` tokens from the caller's account to `to`.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transfer(address to, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Returns the remaining number of tokens that `spender` will be\\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\\n     * zero by default.\\n     *\\n     * This value changes when {approve} or {transferFrom} are called.\\n     */\\n    function allowance(address owner, address spender) external view returns (uint256);\\n\\n    /**\\n     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\\n     * that someone may use both the old and the new allowance by unfortunate\\n     * transaction ordering. One possible solution to mitigate this race\\n     * condition is to first reduce the spender's allowance to 0 and set the\\n     * desired value afterwards:\\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\\n     *\\n     * Emits an {Approval} event.\\n     */\\n    function approve(address spender, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Moves `amount` tokens from `from` to `to` using the\\n     * allowance mechanism. `amount` is then deducted from the caller's\\n     * allowance.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transferFrom(\\n        address from,\\n        address to,\\n        uint256 amount\\n    ) external returns (bool);\\n}\\n\",\"keccak256\":\"0x9750c6b834f7b43000631af5cc30001c5f547b3ceb3635488f140f60e897ea6b\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/Context.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/Context.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Provides information about the current execution context, including the\\n * sender of the transaction and its data. While these are generally available\\n * via msg.sender and msg.data, they should not be accessed in such a direct\\n * manner, since when dealing with meta-transactions the account sending and\\n * paying for execution may not be the actual sender (as far as an application\\n * is concerned).\\n *\\n * This contract is only required for intermediate, library-like contracts.\\n */\\nabstract contract Context {\\n    function _msgSender() internal view virtual returns (address) {\\n        return msg.sender;\\n    }\\n\\n    function _msgData() internal view virtual returns (bytes calldata) {\\n        return msg.data;\\n    }\\n}\\n\",\"keccak256\":\"0xe2e337e6dde9ef6b680e07338c493ebea1b5fd09b43424112868e9cc1706bca7\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/math/SafeMath.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.6.0) (utils/math/SafeMath.sol)\\n\\npragma solidity ^0.8.0;\\n\\n// CAUTION\\n// This version of SafeMath should only be used with Solidity 0.8 or later,\\n// because it relies on the compiler's built in overflow checks.\\n\\n/**\\n * @dev Wrappers over Solidity's arithmetic operations.\\n *\\n * NOTE: `SafeMath` is generally not needed starting with Solidity 0.8, since the compiler\\n * now has built in overflow checking.\\n */\\nlibrary SafeMath {\\n    /**\\n     * @dev Returns the addition of two unsigned integers, with an overflow flag.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function tryAdd(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        unchecked {\\n            uint256 c = a + b;\\n            if (c < a) return (false, 0);\\n            return (true, c);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the subtraction of two unsigned integers, with an overflow flag.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function trySub(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        unchecked {\\n            if (b > a) return (false, 0);\\n            return (true, a - b);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the multiplication of two unsigned integers, with an overflow flag.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function tryMul(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        unchecked {\\n            // Gas optimization: this is cheaper than requiring 'a' not being zero, but the\\n            // benefit is lost if 'b' is also tested.\\n            // See: https://github.com/OpenZeppelin/openzeppelin-contracts/pull/522\\n            if (a == 0) return (true, 0);\\n            uint256 c = a * b;\\n            if (c / a != b) return (false, 0);\\n            return (true, c);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the division of two unsigned integers, with a division by zero flag.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function tryDiv(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        unchecked {\\n            if (b == 0) return (false, 0);\\n            return (true, a / b);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the remainder of dividing two unsigned integers, with a division by zero flag.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function tryMod(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        unchecked {\\n            if (b == 0) return (false, 0);\\n            return (true, a % b);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the addition of two unsigned integers, reverting on\\n     * overflow.\\n     *\\n     * Counterpart to Solidity's `+` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - Addition cannot overflow.\\n     */\\n    function add(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return a + b;\\n    }\\n\\n    /**\\n     * @dev Returns the subtraction of two unsigned integers, reverting on\\n     * overflow (when the result is negative).\\n     *\\n     * Counterpart to Solidity's `-` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - Subtraction cannot overflow.\\n     */\\n    function sub(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return a - b;\\n    }\\n\\n    /**\\n     * @dev Returns the multiplication of two unsigned integers, reverting on\\n     * overflow.\\n     *\\n     * Counterpart to Solidity's `*` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - Multiplication cannot overflow.\\n     */\\n    function mul(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return a * b;\\n    }\\n\\n    /**\\n     * @dev Returns the integer division of two unsigned integers, reverting on\\n     * division by zero. The result is rounded towards zero.\\n     *\\n     * Counterpart to Solidity's `/` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - The divisor cannot be zero.\\n     */\\n    function div(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return a / b;\\n    }\\n\\n    /**\\n     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\\n     * reverting when dividing by zero.\\n     *\\n     * Counterpart to Solidity's `%` operator. This function uses a `revert`\\n     * opcode (which leaves remaining gas untouched) while Solidity uses an\\n     * invalid opcode to revert (consuming all remaining gas).\\n     *\\n     * Requirements:\\n     *\\n     * - The divisor cannot be zero.\\n     */\\n    function mod(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return a % b;\\n    }\\n\\n    /**\\n     * @dev Returns the subtraction of two unsigned integers, reverting with custom message on\\n     * overflow (when the result is negative).\\n     *\\n     * CAUTION: This function is deprecated because it requires allocating memory for the error\\n     * message unnecessarily. For custom revert reasons use {trySub}.\\n     *\\n     * Counterpart to Solidity's `-` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - Subtraction cannot overflow.\\n     */\\n    function sub(\\n        uint256 a,\\n        uint256 b,\\n        string memory errorMessage\\n    ) internal pure returns (uint256) {\\n        unchecked {\\n            require(b <= a, errorMessage);\\n            return a - b;\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the integer division of two unsigned integers, reverting with custom message on\\n     * division by zero. The result is rounded towards zero.\\n     *\\n     * Counterpart to Solidity's `/` operator. Note: this function uses a\\n     * `revert` opcode (which leaves remaining gas untouched) while Solidity\\n     * uses an invalid opcode to revert (consuming all remaining gas).\\n     *\\n     * Requirements:\\n     *\\n     * - The divisor cannot be zero.\\n     */\\n    function div(\\n        uint256 a,\\n        uint256 b,\\n        string memory errorMessage\\n    ) internal pure returns (uint256) {\\n        unchecked {\\n            require(b > 0, errorMessage);\\n            return a / b;\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\\n     * reverting with custom message when dividing by zero.\\n     *\\n     * CAUTION: This function is deprecated because it requires allocating memory for the error\\n     * message unnecessarily. For custom revert reasons use {tryMod}.\\n     *\\n     * Counterpart to Solidity's `%` operator. This function uses a `revert`\\n     * opcode (which leaves remaining gas untouched) while Solidity uses an\\n     * invalid opcode to revert (consuming all remaining gas).\\n     *\\n     * Requirements:\\n     *\\n     * - The divisor cannot be zero.\\n     */\\n    function mod(\\n        uint256 a,\\n        uint256 b,\\n        string memory errorMessage\\n    ) internal pure returns (uint256) {\\n        unchecked {\\n            require(b > 0, errorMessage);\\n            return a % b;\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x0f633a0223d9a1dcccfcf38a64c9de0874dfcbfac0c6941ccf074d63a2ce0e1e\",\"license\":\"MIT\"},\"contracts/v1/CarboToken.sol\":{\"content\":\"// SPDX-License-Identifier: UNLICENSED\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"@openzeppelin/contracts/access/Ownable.sol\\\";\\nimport \\\"@openzeppelin/contracts/security/Pausable.sol\\\";\\nimport \\\"@openzeppelin/contracts/utils/math/SafeMath.sol\\\";\\nimport \\\"./interfaces/ICarboToken.sol\\\";\\nimport \\\"./interfaces/IDividendManager.sol\\\";\\nimport \\\"./RecoverableFunds.sol\\\";\\nimport \\\"./WithCallback.sol\\\";\\n\\ncontract CarboToken is\\n    ICarboToken,\\n    Ownable,\\n    Pausable,\\n    RecoverableFunds,\\n    WithCallback\\n{\\n    using SafeMath for uint256;\\n\\n    uint16 private constant PERCENT_RATE = 1000;\\n    uint256 private constant MAX = ~uint256(0);\\n\\n    // -----------------------------------------------------------------------------------------------------------------\\n    // ERC20\\n    // -----------------------------------------------------------------------------------------------------------------\\n\\n    mapping(address => mapping(address => uint256)) private _allowances;\\n    string private _name = \\\"CLEANCARBON\\\";\\n    string private _symbol = \\\"CARBO\\\";\\n\\n    function name() public view override returns (string memory) {\\n        return _name;\\n    }\\n\\n    function symbol() public view override returns (string memory) {\\n        return _symbol;\\n    }\\n\\n    function decimals() public pure override returns (uint8) {\\n        return 18;\\n    }\\n\\n    function totalSupply() external view override returns (uint256) {\\n        return _tTotal;\\n    }\\n\\n    function balanceOf(\\n        address account\\n    ) external view override returns (uint256) {\\n        if (_isExcluded[account]) return _tOwned[account];\\n        return tokenFromReflection(_rOwned[account]);\\n    }\\n\\n    function transfer(\\n        address recipient,\\n        uint256 amount\\n    ) external override returns (bool) {\\n        _transfer(_msgSender(), recipient, amount);\\n        return true;\\n    }\\n\\n    function allowance(\\n        address owner,\\n        address spender\\n    ) external view override returns (uint256) {\\n        return _allowances[owner][spender];\\n    }\\n\\n    function approve(\\n        address spender,\\n        uint256 amount\\n    ) public override returns (bool) {\\n        _approve(_msgSender(), spender, amount);\\n        return true;\\n    }\\n\\n    function transferFrom(\\n        address sender,\\n        address recipient,\\n        uint256 amount\\n    ) external override returns (bool) {\\n        _transfer(sender, recipient, amount);\\n        uint256 currentAllowance = _allowances[sender][_msgSender()];\\n        require(\\n            currentAllowance >= amount,\\n            \\\"ERC20: transfer amount exceeds allowance\\\"\\n        );\\n        unchecked {\\n            _approve(sender, _msgSender(), currentAllowance - amount);\\n        }\\n        return true;\\n    }\\n\\n    function increaseAllowance(\\n        address spender,\\n        uint256 addedValue\\n    ) external override returns (bool) {\\n        _approve(\\n            _msgSender(),\\n            spender,\\n            _allowances[_msgSender()][spender] + addedValue\\n        );\\n        return true;\\n    }\\n\\n    function decreaseAllowance(\\n        address spender,\\n        uint256 subtractedValue\\n    ) external override returns (bool) {\\n        uint256 currentAllowance = _allowances[_msgSender()][spender];\\n        require(\\n            currentAllowance >= subtractedValue,\\n            \\\"ERC20: decreased allowance below zero\\\"\\n        );\\n        unchecked {\\n            _approve(_msgSender(), spender, currentAllowance - subtractedValue);\\n        }\\n        return true;\\n    }\\n\\n    function burn(uint256 amount) external override {\\n        _burn(_msgSender(), amount);\\n    }\\n\\n    function burnFrom(address account, uint256 amount) external override {\\n        uint256 currentAllowance = _allowances[account][_msgSender()];\\n        require(\\n            currentAllowance >= amount,\\n            \\\"ERC20: burn amount exceeds allowance\\\"\\n        );\\n        unchecked {\\n            _approve(account, _msgSender(), currentAllowance - amount);\\n        }\\n        _burn(account, amount);\\n    }\\n\\n    function _approve(address owner, address spender, uint256 amount) internal {\\n        require(owner != address(0), \\\"ERC20: approve from the zero address\\\");\\n        require(spender != address(0), \\\"ERC20: approve to the zero address\\\");\\n        _allowances[owner][spender] = amount;\\n        emit Approval(owner, spender, amount);\\n    }\\n\\n    function _burn(address account, uint256 amount) internal whenNotPaused {\\n        require(account != address(0), \\\"ERC20: burn from the zero address\\\");\\n        uint256 rAmount = _getRAmount(amount, _getRate());\\n        require(\\n            _rOwned[account] >= rAmount,\\n            \\\"ERC20: burn amount exceeds balance\\\"\\n        );\\n        _decreaseBalance(account, amount, rAmount);\\n        _decreaseTotalSupply(amount, rAmount);\\n        emit Transfer(account, address(0), amount);\\n        _burnCallback(account, amount, rAmount);\\n    }\\n\\n    // -----------------------------------------------------------------------------------------------------------------\\n    // PAUSABLE\\n    // -----------------------------------------------------------------------------------------------------------------\\n\\n    function pause() external onlyOwner {\\n        _pause();\\n    }\\n\\n    function unpause() external onlyOwner {\\n        _unpause();\\n    }\\n\\n    // -----------------------------------------------------------------------------------------------------------------\\n    // FEES\\n    // -----------------------------------------------------------------------------------------------------------------\\n\\n    mapping(FeeType => Fees) private _fees;\\n    mapping(FeeType => FeeAddresses) private _feeAddresses;\\n    address private _dividendsAddress;\\n    address private _buybackAddress;\\n    address private _treasuryAddress;\\n    address private _liquidityAddress;\\n    mapping(address => bool) private _isTaxable;\\n    mapping(address => bool) private _isTaxExempt;\\n\\n    function getFees(\\n        FeeType feeType\\n    ) external view override returns (Fees memory) {\\n        return _fees[feeType];\\n    }\\n\\n    function setFees(\\n        FeeType feeType,\\n        uint rfi,\\n        uint dividends,\\n        uint buyback,\\n        uint treasury,\\n        uint liquidity\\n    ) external override onlyOwner {\\n        require(feeType != FeeType.NONE, \\\"CarboToken: Wrong FeeType\\\");\\n        _fees[feeType] = Fees(rfi, dividends, buyback, treasury, liquidity);\\n    }\\n\\n    function getFeeAddresses(\\n        FeeType feeType\\n    ) public view override returns (FeeAddresses memory) {\\n        return _feeAddresses[feeType];\\n    }\\n\\n    function setFeeAddresses(\\n        FeeType feeType,\\n        address dividends,\\n        address buyback,\\n        address treasury,\\n        address liquidity\\n    ) external override onlyOwner {\\n        require(feeType != FeeType.NONE, \\\"CarboToken: Wrong FeeType\\\");\\n        _feeAddresses[feeType] = FeeAddresses(\\n            dividends,\\n            buyback,\\n            treasury,\\n            liquidity\\n        );\\n    }\\n\\n    function setTaxable(\\n        address account,\\n        bool value\\n    ) external override onlyOwner {\\n        require(_isTaxable[account] != value, \\\"CarboToken: already set\\\");\\n        _isTaxable[account] = value;\\n    }\\n\\n    function setTaxExempt(\\n        address account,\\n        bool value\\n    ) external override onlyOwner {\\n        require(_isTaxExempt[account] != value, \\\"CarboToken: already set\\\");\\n        _isTaxExempt[account] = value;\\n    }\\n\\n    function _getFeeAmounts(\\n        uint256 amount,\\n        FeeType feeType\\n    ) internal view returns (Fees memory) {\\n        Fees memory fees = _fees[feeType];\\n        Fees memory feeAmounts;\\n        feeAmounts.rfi = amount.mul(fees.rfi).div(PERCENT_RATE);\\n        feeAmounts.dividends = amount.mul(fees.dividends).div(PERCENT_RATE);\\n        feeAmounts.buyback = amount.mul(fees.buyback).div(PERCENT_RATE);\\n        feeAmounts.treasury = amount.mul(fees.treasury).div(PERCENT_RATE);\\n        feeAmounts.liquidity = amount.mul(fees.liquidity).div(PERCENT_RATE);\\n        return feeAmounts;\\n    }\\n\\n    function _getFeeType(\\n        address sender,\\n        address recipient\\n    ) internal view returns (FeeType) {\\n        if (_isTaxExempt[sender] || _isTaxExempt[recipient])\\n            return FeeType.NONE;\\n        if (_isTaxable[sender]) return FeeType.BUY;\\n        if (_isTaxable[recipient]) return FeeType.SELL;\\n        return FeeType.NONE;\\n    }\\n\\n    // -----------------------------------------------------------------------------------------------------------------\\n    // RFI\\n    // -----------------------------------------------------------------------------------------------------------------\\n\\n    uint256 private _tTotal = 500_000_000 ether;\\n    uint256 private _rTotal = (MAX - (MAX % _tTotal));\\n    uint256 private _tFeeTotal;\\n    mapping(address => uint256) private _rOwned;\\n    mapping(address => uint256) private _tOwned;\\n    mapping(address => bool) private _isExcluded;\\n    address[] private _excluded;\\n\\n    constructor() {\\n        _rOwned[_msgSender()] = _rTotal;\\n        emit Transfer(address(0), _msgSender(), _tTotal);\\n    }\\n\\n    function getROwned(\\n        address account\\n    ) external view override returns (uint256) {\\n        return _rOwned[account];\\n    }\\n\\n    function getRTotal() external view override returns (uint256) {\\n        return _rTotal;\\n    }\\n\\n    function excludeFromRFI(address account) external override onlyOwner {\\n        require(\\n            !_isExcluded[account],\\n            \\\"CarboToken: account is already excluded\\\"\\n        );\\n        if (_rOwned[account] > 0) {\\n            _tOwned[account] = tokenFromReflection(_rOwned[account]);\\n        }\\n        _isExcluded[account] = true;\\n        _excluded.push(account);\\n    }\\n\\n    function includeInRFI(address account) external override onlyOwner {\\n        require(\\n            _isExcluded[account],\\n            \\\"CarboToken: account is already included\\\"\\n        );\\n        for (uint256 i = 0; i < _excluded.length; i++) {\\n            if (_excluded[i] == account) {\\n                _excluded[i] = _excluded[_excluded.length - 1];\\n                _tOwned[account] = 0;\\n                _isExcluded[account] = false;\\n                _excluded.pop();\\n                break;\\n            }\\n        }\\n    }\\n\\n    function reflect(uint256 tAmount) external override {\\n        address account = _msgSender();\\n        require(\\n            !_isExcluded[account],\\n            \\\"CarboToken: excluded addresses cannot call this function\\\"\\n        );\\n        uint256 rAmount = _getRAmount(tAmount, _getRate());\\n        _decreaseBalance(account, tAmount, rAmount);\\n        _reflect(tAmount, rAmount);\\n        _reflectCallback(account, tAmount, rAmount);\\n    }\\n\\n    function reflectionFromToken(\\n        uint256 tAmount\\n    ) external view override returns (uint256) {\\n        require(\\n            tAmount <= _tTotal,\\n            \\\"CarboToken: amount must be less than supply\\\"\\n        );\\n        return _getRAmount(tAmount, _getRate());\\n    }\\n\\n    function tokenFromReflection(\\n        uint256 rAmount\\n    ) public view override returns (uint256) {\\n        require(\\n            rAmount <= _rTotal,\\n            \\\"CarboToken: amount must be less than total reflections\\\"\\n        );\\n        uint256 currentRate = _getRate();\\n        return rAmount.div(currentRate);\\n    }\\n\\n    function _reflect(uint256 tAmount, uint256 rAmount) internal whenNotPaused {\\n        _rTotal = _rTotal.sub(rAmount);\\n        _tFeeTotal = _tFeeTotal.add(tAmount);\\n        _reflectCallback(tAmount, rAmount);\\n    }\\n\\n    function _getCurrentSupply() internal view returns (uint256, uint256) {\\n        uint256 rSupply = _rTotal;\\n        uint256 tSupply = _tTotal;\\n        for (uint256 i = 0; i < _excluded.length; i++) {\\n            if (\\n                _rOwned[_excluded[i]] > rSupply ||\\n                _tOwned[_excluded[i]] > tSupply\\n            ) return (_rTotal, _tTotal);\\n            rSupply = rSupply.sub(_rOwned[_excluded[i]]);\\n            tSupply = tSupply.sub(_tOwned[_excluded[i]]);\\n        }\\n        if (rSupply < _rTotal.div(_tTotal)) return (_rTotal, _tTotal);\\n        return (rSupply, tSupply);\\n    }\\n\\n    function _getRate() internal view returns (uint256) {\\n        (uint256 rSupply, uint256 tSupply) = _getCurrentSupply();\\n        return rSupply.div(tSupply);\\n    }\\n\\n    function _getRAmount(\\n        uint256 tAmount,\\n        uint256 currentRate\\n    ) internal pure returns (uint256) {\\n        return tAmount.mul(currentRate);\\n    }\\n\\n    function _getRAmounts(\\n        Amounts memory t,\\n        FeeType feeType,\\n        uint256 currentRate\\n    ) internal pure returns (Amounts memory) {\\n        Amounts memory r;\\n        r.sum = _getRAmount(t.sum, currentRate);\\n        r.transfer = r.sum;\\n        if (feeType != FeeType.NONE) {\\n            r.rfi = _getRAmount(t.rfi, currentRate);\\n            r.dividends = _getRAmount(t.dividends, currentRate);\\n            r.buyback = _getRAmount(t.buyback, currentRate);\\n            r.treasury = _getRAmount(t.treasury, currentRate);\\n            r.liquidity = _getRAmount(t.liquidity, currentRate);\\n            r.transfer = r\\n                .transfer\\n                .sub(r.rfi)\\n                .sub(r.dividends)\\n                .sub(r.buyback)\\n                .sub(r.treasury)\\n                .sub(r.liquidity);\\n        }\\n        return r;\\n    }\\n\\n    function _getTAmounts(\\n        uint256 tAmount,\\n        FeeType feeType\\n    ) internal view returns (Amounts memory) {\\n        Amounts memory t;\\n        t.sum = tAmount;\\n        t.transfer = t.sum;\\n        if (feeType != FeeType.NONE) {\\n            Fees memory fees = _getFeeAmounts(tAmount, feeType);\\n            t.rfi = fees.rfi;\\n            t.dividends = fees.dividends;\\n            t.buyback = fees.buyback;\\n            t.treasury = fees.treasury;\\n            t.liquidity = fees.liquidity;\\n            t.transfer = t\\n                .transfer\\n                .sub(t.rfi)\\n                .sub(t.dividends)\\n                .sub(t.buyback)\\n                .sub(t.treasury)\\n                .sub(t.liquidity);\\n        }\\n        return t;\\n    }\\n\\n    function _getAmounts(\\n        uint256 tAmount,\\n        FeeType feeType\\n    ) internal view returns (Amounts memory r, Amounts memory t) {\\n        t = _getTAmounts(tAmount, feeType);\\n        r = _getRAmounts(t, feeType, _getRate());\\n    }\\n\\n    function _increaseBalance(\\n        address account,\\n        uint256 tAmount,\\n        uint256 rAmount\\n    ) internal {\\n        _rOwned[account] = _rOwned[account].add(rAmount);\\n        if (_isExcluded[account]) {\\n            _tOwned[account] = _tOwned[account].add(tAmount);\\n        }\\n        _increaseBalanceCallback(account, tAmount, rAmount);\\n    }\\n\\n    function _decreaseBalance(\\n        address account,\\n        uint256 tAmount,\\n        uint256 rAmount\\n    ) internal {\\n        _rOwned[account] = _rOwned[account].sub(rAmount);\\n        if (_isExcluded[account]) {\\n            _tOwned[account] = _tOwned[account].sub(tAmount);\\n        }\\n        _decreaseBalanceCallback(account, tAmount, rAmount);\\n    }\\n\\n    function _decreaseTotalSupply(uint256 tAmount, uint256 rAmount) private {\\n        _tTotal = _tTotal.sub(tAmount);\\n        _rTotal = _rTotal.sub(rAmount);\\n        _decreaseTotalSupplyCallback(tAmount, rAmount);\\n    }\\n\\n    function _transfer(\\n        address sender,\\n        address recipient,\\n        uint256 amount\\n    ) internal whenNotPaused {\\n        require(sender != address(0), \\\"ERC20: transfer from the zero address\\\");\\n        require(recipient != address(0), \\\"ERC20: transfer to the zero address\\\");\\n        FeeType feeType = _getFeeType(sender, recipient);\\n        (Amounts memory r, Amounts memory t) = _getAmounts(amount, feeType);\\n        require(\\n            _rOwned[sender] >= r.sum,\\n            \\\"ERC20: transfer amount exceeds balance\\\"\\n        );\\n        _decreaseBalance(sender, t.sum, r.sum);\\n        _increaseBalance(recipient, t.transfer, r.transfer);\\n        emit Transfer(sender, recipient, t.transfer);\\n        if (t.sum != t.transfer) {\\n            FeeAddresses memory feeAddresses = getFeeAddresses(feeType);\\n            if (t.rfi > 0) {\\n                _reflect(t.rfi, r.rfi);\\n            }\\n            if (t.dividends > 0) {\\n                _increaseBalance(\\n                    feeAddresses.dividends,\\n                    t.dividends,\\n                    r.dividends\\n                );\\n            }\\n            if (t.buyback > 0) {\\n                _increaseBalance(feeAddresses.buyback, t.buyback, r.buyback);\\n            }\\n            if (t.treasury > 0) {\\n                _increaseBalance(feeAddresses.treasury, t.treasury, r.treasury);\\n            }\\n            if (t.liquidity > 0) {\\n                _increaseBalance(\\n                    feeAddresses.liquidity,\\n                    t.liquidity,\\n                    r.liquidity\\n                );\\n            }\\n            emit FeeTaken(\\n                t.rfi,\\n                t.dividends,\\n                t.buyback,\\n                t.treasury,\\n                t.liquidity\\n            );\\n        }\\n        _transferCallback(\\n            sender,\\n            recipient,\\n            t.sum,\\n            t.transfer,\\n            r.sum,\\n            r.transfer\\n        );\\n    }\\n}\\n\",\"keccak256\":\"0x15a1076c6e97a1b07a241df832891e8cb63248236b5f32984bd5d74b4108da9b\",\"license\":\"UNLICENSED\"},\"contracts/v1/RecoverableFunds.sol\":{\"content\":\"// SPDX-License-Identifier: UNLICENSED\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"@openzeppelin/contracts/access/Ownable.sol\\\";\\nimport \\\"@openzeppelin/contracts/token/ERC20/IERC20.sol\\\";\\n\\n/**\\n * @dev Allows the owner to retrieve ETH or tokens sent to this contract by mistake.\\n */\\ncontract RecoverableFunds is Ownable {\\n    function retrieveTokens(\\n        address recipient,\\n        address tokenAddress\\n    ) public virtual onlyOwner {\\n        IERC20 token = IERC20(tokenAddress);\\n        token.transfer(recipient, token.balanceOf(address(this)));\\n    }\\n\\n    function retriveETH(address payable recipient) public virtual onlyOwner {\\n        recipient.transfer(address(this).balance);\\n    }\\n}\\n\",\"keccak256\":\"0xab5230575ddd5e0b5d8242e99c224a7c334ca1bd2df5893861c226789f508758\",\"license\":\"UNLICENSED\"},\"contracts/v1/WithCallback.sol\":{\"content\":\"// SPDX-License-Identifier: UNLICENSED\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"@openzeppelin/contracts/access/Ownable.sol\\\";\\nimport \\\"./interfaces/ICallbackContract.sol\\\";\\n\\n/**\\n * @dev Allows the owner to register a callback contract that will be called after every call of the transfer or burn function\\n */\\ncontract WithCallback is Ownable {\\n    ICallbackContract public callback;\\n\\n    enum CallbackType {\\n        REFLECT_INTERNAL,\\n        REFLECT_EXTERNAL,\\n        INCREASE_BALANCE,\\n        DECREASE_BALANCE,\\n        DECREASE_TOTAL_SUPPLY,\\n        TRANSFER,\\n        BURN\\n    }\\n\\n    mapping(CallbackType => bool) internal _callbacks;\\n\\n    function setCallbackContract(address _callback) external onlyOwner {\\n        callback = ICallbackContract(_callback);\\n    }\\n\\n    function setCallbackFunction(\\n        CallbackType callbackFunction,\\n        bool isActive\\n    ) external onlyOwner {\\n        require(\\n            _callbacks[callbackFunction] != isActive,\\n            \\\"WithCallback: already set\\\"\\n        );\\n        _callbacks[callbackFunction] = isActive;\\n    }\\n\\n    function _reflectCallback(uint256 tAmount, uint256 rAmount) internal {\\n        if (_callbacks[CallbackType.REFLECT_INTERNAL]) {\\n            try callback.reflectCallback(tAmount, rAmount) {} catch {}\\n        }\\n    }\\n\\n    function _reflectCallback(\\n        address account,\\n        uint256 tAmount,\\n        uint256 rAmount\\n    ) internal {\\n        if (_callbacks[CallbackType.REFLECT_EXTERNAL]) {\\n            try callback.reflectCallback(account, tAmount, rAmount) {} catch {}\\n        }\\n    }\\n\\n    function _increaseBalanceCallback(\\n        address account,\\n        uint256 tAmount,\\n        uint256 rAmount\\n    ) internal {\\n        if (_callbacks[CallbackType.INCREASE_BALANCE]) {\\n            try\\n                callback.increaseBalanceCallback(account, tAmount, rAmount)\\n            {} catch {}\\n        }\\n    }\\n\\n    function _decreaseBalanceCallback(\\n        address account,\\n        uint256 tAmount,\\n        uint256 rAmount\\n    ) internal {\\n        if (_callbacks[CallbackType.DECREASE_BALANCE]) {\\n            try\\n                callback.decreaseBalanceCallback(account, tAmount, rAmount)\\n            {} catch {}\\n        }\\n    }\\n\\n    function _decreaseTotalSupplyCallback(\\n        uint256 tAmount,\\n        uint256 rAmount\\n    ) internal {\\n        if (_callbacks[CallbackType.DECREASE_TOTAL_SUPPLY]) {\\n            try\\n                callback.decreaseTotalSupplyCallback(tAmount, rAmount)\\n            {} catch {}\\n        }\\n    }\\n\\n    function _transferCallback(\\n        address from,\\n        address to,\\n        uint256 tFromAmount,\\n        uint256 rFromAmount,\\n        uint256 tToAmount,\\n        uint256 rToAmount\\n    ) internal {\\n        if (_callbacks[CallbackType.TRANSFER]) {\\n            try\\n                callback.transferCallback(\\n                    from,\\n                    to,\\n                    tFromAmount,\\n                    rFromAmount,\\n                    tToAmount,\\n                    rToAmount\\n                )\\n            {} catch {}\\n        }\\n    }\\n\\n    function _burnCallback(\\n        address account,\\n        uint256 tAmount,\\n        uint256 rAmount\\n    ) internal {\\n        if (_callbacks[CallbackType.BURN]) {\\n            try callback.burnCallback(account, tAmount, rAmount) {} catch {}\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0xe16404a20b293668016ab9ae355d4963b5cdd6012ef2fde4bd97532a1f99465c\",\"license\":\"UNLICENSED\"},\"contracts/v1/interfaces/ICallbackContract.sol\":{\"content\":\"// SPDX-License-Identifier: UNLICENSED\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of contract that can be invoked by a token contract during reflect or transfer.\\n */\\ninterface ICallbackContract {\\n    function reflectCallback(uint256 tAmount, uint256 rAmount) external;\\n\\n    function reflectCallback(\\n        address account,\\n        uint256 tAmount,\\n        uint256 rAmount\\n    ) external;\\n\\n    function increaseBalanceCallback(\\n        address account,\\n        uint256 tAmount,\\n        uint256 rAmount\\n    ) external;\\n\\n    function decreaseBalanceCallback(\\n        address account,\\n        uint256 tAmount,\\n        uint256 rAmount\\n    ) external;\\n\\n    function decreaseTotalSupplyCallback(\\n        uint256 tAmount,\\n        uint256 rAmount\\n    ) external;\\n\\n    function transferCallback(\\n        address from,\\n        address to,\\n        uint256 tFromAmount,\\n        uint256 rFromAmount,\\n        uint256 tToAmount,\\n        uint256 rToAmount\\n    ) external;\\n\\n    function burnCallback(\\n        address account,\\n        uint256 tAmount,\\n        uint256 rAmount\\n    ) external;\\n}\\n\",\"keccak256\":\"0x66fed5f0710030cae9de717c132d7ad7f64932252ddfd85f8359dbf05a0f7325\",\"license\":\"UNLICENSED\"},\"contracts/v1/interfaces/ICarboToken.sol\":{\"content\":\"// SPDX-License-Identifier: UNLICENSED\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"@openzeppelin/contracts/token/ERC20/IERC20.sol\\\";\\n\\n/**\\n * @dev Interface of CarboToken\\n */\\ninterface ICarboToken is IERC20 {\\n    struct Amounts {\\n        uint256 sum;\\n        uint256 transfer;\\n        uint256 rfi;\\n        uint256 dividends;\\n        uint256 buyback;\\n        uint256 treasury;\\n        uint256 liquidity;\\n    }\\n\\n    struct Fees {\\n        uint256 rfi;\\n        uint256 dividends;\\n        uint256 buyback;\\n        uint256 treasury;\\n        uint256 liquidity;\\n    }\\n\\n    struct FeeAddresses {\\n        address dividends;\\n        address buyback;\\n        address treasury;\\n        address liquidity;\\n    }\\n\\n    enum FeeType {\\n        BUY,\\n        SELL,\\n        NONE\\n    }\\n\\n    event FeeTaken(\\n        uint256 rfi,\\n        uint256 dividends,\\n        uint256 buyback,\\n        uint256 treasury,\\n        uint256 liquidity\\n    );\\n\\n    function name() external view returns (string memory);\\n\\n    function symbol() external view returns (string memory);\\n\\n    function decimals() external pure returns (uint8);\\n\\n    function burn(uint256 amount) external;\\n\\n    function burnFrom(address account, uint256 amount) external;\\n\\n    function increaseAllowance(\\n        address spender,\\n        uint256 addedValue\\n    ) external returns (bool);\\n\\n    function decreaseAllowance(\\n        address spender,\\n        uint256 subtractedValue\\n    ) external returns (bool);\\n\\n    function getFees(FeeType feeType) external view returns (Fees memory);\\n\\n    function setFees(\\n        FeeType feeType,\\n        uint rfi,\\n        uint dividends,\\n        uint buyback,\\n        uint treasury,\\n        uint liquidity\\n    ) external;\\n\\n    function getFeeAddresses(\\n        FeeType feeType\\n    ) external view returns (FeeAddresses memory);\\n\\n    function setFeeAddresses(\\n        FeeType feeType,\\n        address dividends,\\n        address buyback,\\n        address treasury,\\n        address liquidity\\n    ) external;\\n\\n    function setTaxable(address account, bool value) external;\\n\\n    function setTaxExempt(address account, bool value) external;\\n\\n    function getROwned(address account) external view returns (uint256);\\n\\n    function getRTotal() external view returns (uint256);\\n\\n    function excludeFromRFI(address account) external;\\n\\n    function includeInRFI(address account) external;\\n\\n    function reflect(uint256 tAmount) external;\\n\\n    function reflectionFromToken(\\n        uint256 tAmount\\n    ) external view returns (uint256);\\n\\n    function tokenFromReflection(\\n        uint256 rAmount\\n    ) external view returns (uint256);\\n}\\n\",\"keccak256\":\"0x83e505bf210fbb7a6eeff4d67bea30278fb3770a9b17b5451bc707f9fc001085\",\"license\":\"UNLICENSED\"},\"contracts/v1/interfaces/IDividendManager.sol\":{\"content\":\"// SPDX-License-Identifier: UNLICENSED\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of DividendManager\\n */\\ninterface IDividendManager {\\n    function distributeDividends(uint256 amount) external;\\n\\n    function setBUSD(address _busd) external;\\n\\n    function setToken(address _token) external;\\n\\n    function excludeFromDividends(address account) external;\\n}\\n\",\"keccak256\":\"0x163779d58378c88bd3162483af1c7af60ba9ebf2f3beb803bdb32594c9e06db1\",\"license\":\"UNLICENSED\"}},\"version\":1}",
  "bytecode": "0x60c0604052600b60808190526a21a622a0a721a0a92127a760a91b60a09081526200002e916004919062000156565b5060408051808201909152600580825264434152424f60d81b60209092019182526200005b918162000156565b506b019d971e4fe8401e74000000600e8190556200007c90600019620001fc565b6200008a906000196200021f565b600f553480156200009a57600080fd5b50620000a63362000106565b6000805460ff60a01b19168155600f543380835260116020908152604080852093909355600e5492519283529092917fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef910160405180910390a362000282565b600080546001600160a01b038381166001600160a01b0319831681178455604051919092169283917f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e09190a35050565b828054620001649062000245565b90600052602060002090601f016020900481019282620001885760008555620001d3565b82601f10620001a357805160ff1916838001178555620001d3565b82800160010185558215620001d3579182015b82811115620001d3578251825591602001919060010190620001b6565b50620001e1929150620001e5565b5090565b5b80821115620001e15760008155600101620001e6565b6000826200021a57634e487b7160e01b600052601260045260246000fd5b500690565b6000828210156200024057634e487b7160e01b600052601160045260246000fd5b500390565b600181811c908216806200025a57607f821691505b602082108114156200027c57634e487b7160e01b600052602260045260246000fd5b50919050565b612c2180620002926000396000f3fe608060405234801561001057600080fd5b50600436106102275760003560e01c80636341ca0b116101305780638da5cb5b116100b8578063a9059cbb1161007c578063a9059cbb1461051d578063cf7a9bd514610530578063dd62ed3e14610543578063f2fde38b1461057c578063f4cd43821461058f57600080fd5b80638da5cb5b146104465780638e3c37601461045757806395d89b41146104ac578063a457c2d7146104b4578063a6844412146104c757600080fd5b8063715018a6116100ff578063715018a6146103fd57806379cc6790146104055780637a35aaa914610418578063836cf5d41461042b5780638456cb591461043e57600080fd5b80636341ca0b146103b15780636473b1eb146103c45780636c8df549146103d757806370a08231146103ea57600080fd5b806323b872dd116101b35780633950935111610182578063395093511461035e5780633f4ba83a1461037157806342966c681461037957806354bc089f1461038c5780635c975abb1461039f57600080fd5b806323b872dd146103165780632d6c2631146103295780632d8381191461033c578063313ce5671461034f57600080fd5b8063087fae14116101fa578063087fae141461029c578063095ea7b3146102c55780631392c086146102e857806318160ddd146102fb5780631dc610401461030357600080fd5b8063053ab1821461022c57806306fdde0314610241578063075d1d611461025f578063083b273214610271575b600080fd5b61023f61023a3660046127ea565b6105a2565b005b610249610667565b6040516102569190612803565b60405180910390f35b600f545b604051908152602001610256565b600154610284906001600160a01b031681565b6040516001600160a01b039091168152602001610256565b6102636102aa36600461286d565b6001600160a01b031660009081526011602052604090205490565b6102d86102d336600461288a565b6106f9565b6040519015158152602001610256565b6102636102f63660046127ea565b610710565b600e54610263565b61023f6103113660046128c4565b610784565b6102d86103243660046128fd565b610820565b61023f61033736600461286d565b6108ca565b61026361034a3660046127ea565b610a6f565b60405160128152602001610256565b6102d861036c36600461288a565b610aff565b61023f610b3b565b61023f6103873660046127ea565b610b4d565b61023f61039a36600461286d565b610b5a565b600054600160a01b900460ff166102d8565b61023f6103bf36600461293e565b610c9b565b61023f6103d236600461286d565b610d8c565b61023f6103e53660046128c4565b610dc9565b6102636103f836600461286d565b610e65565b61023f610ec4565b61023f61041336600461288a565b610ed6565b61023f61042636600461286d565b610f6d565b61023f61043936600461296c565b610f97565b61023f611078565b6000546001600160a01b0316610284565b61046a6104653660046129a2565b611088565b6040516102569190600060a082019050825182526020830151602083015260408301516040830152606083015160608301526080830151608083015292915050565b610249611133565b6102d86104c236600461288a565b611142565b6104da6104d53660046129a2565b6111db565b604051610256919081516001600160a01b039081168252602080840151821690830152604080840151821690830152606092830151169181019190915260800190565b6102d861052b36600461288a565b61127e565b61023f61053e3660046129bd565b61128b565b61026361055136600461293e565b6001600160a01b03918216600090815260036020908152604080832093909416825291909152205490565b61023f61058a36600461286d565b611385565b61023f61059d366004612a07565b6113fb565b3360008181526013602052604090205460ff161561062d5760405162461bcd60e51b815260206004820152603860248201527f436172626f546f6b656e3a206578636c7564656420616464726573736573206360448201527f616e6e6f742063616c6c20746869732066756e6374696f6e000000000000000060648201526084015b60405180910390fd5b60006106408361063b611547565b61156a565b905061064d828483611576565b610657838261160e565b610662828483611640565b505050565b60606004805461067690612a76565b80601f01602080910402602001604051908101604052809291908181526020018280546106a290612a76565b80156106ef5780601f106106c4576101008083540402835291602001916106ef565b820191906000526020600020905b8154815290600101906020018083116106d257829003601f168201915b5050505050905090565b60006107063384846116dc565b5060015b92915050565b6000600e548211156107785760405162461bcd60e51b815260206004820152602b60248201527f436172626f546f6b656e3a20616d6f756e74206d757374206265206c6573732060448201526a7468616e20737570706c7960a81b6064820152608401610624565b61070a8261063b611547565b61078c611800565b6001600160a01b0382166000908152600d602052604090205460ff16151581151514156107f55760405162461bcd60e51b815260206004820152601760248201527610d85c989bd51bdad95b8e88185b1c9958591e481cd95d604a1b6044820152606401610624565b6001600160a01b03919091166000908152600d60205260409020805460ff1916911515919091179055565b600061082d84848461185a565b6001600160a01b0384166000908152600360209081526040808320338452909152902054828110156108b25760405162461bcd60e51b815260206004820152602860248201527f45524332303a207472616e7366657220616d6f756e74206578636565647320616044820152676c6c6f77616e636560c01b6064820152608401610624565b6108bf85338584036116dc565b506001949350505050565b6108d2611800565b6001600160a01b03811660009081526013602052604090205460ff1661094a5760405162461bcd60e51b815260206004820152602760248201527f436172626f546f6b656e3a206163636f756e7420697320616c726561647920696044820152661b98db1d59195960ca1b6064820152608401610624565b60005b601454811015610a6b57816001600160a01b03166014828154811061097457610974612ab1565b6000918252602090912001546001600160a01b03161415610a59576014805461099f90600190612add565b815481106109af576109af612ab1565b600091825260209091200154601480546001600160a01b0390921691839081106109db576109db612ab1565b600091825260208083209190910180546001600160a01b0319166001600160a01b039485161790559184168152601282526040808220829055601390925220805460ff191690556014805480610a3357610a33612af4565b600082815260209020810160001990810180546001600160a01b03191690550190555050565b80610a6381612b0a565b91505061094d565b5050565b6000600f54821115610ae25760405162461bcd60e51b815260206004820152603660248201527f436172626f546f6b656e3a20616d6f756e74206d757374206265206c657373206044820152757468616e20746f74616c207265666c656374696f6e7360501b6064820152608401610624565b6000610aec611547565b9050610af88382611b87565b9392505050565b3360008181526003602090815260408083206001600160a01b03871684529091528120549091610706918590610b36908690612b25565b6116dc565b610b43611800565b610b4b611b93565b565b610b573382611be8565b50565b610b62611800565b6001600160a01b03811660009081526013602052604090205460ff1615610bdb5760405162461bcd60e51b815260206004820152602760248201527f436172626f546f6b656e3a206163636f756e7420697320616c726561647920656044820152661e18db1d59195960ca1b6064820152608401610624565b6001600160a01b03811660009081526011602052604090205415610c35576001600160a01b038116600090815260116020526040902054610c1b90610a6f565b6001600160a01b0382166000908152601260205260409020555b6001600160a01b03166000818152601360205260408120805460ff191660019081179091556014805491820181559091527fce6d7b5282bd9a3661ae061feed1dbda4e52ab073b1f9285be6e155d9c38d4ec0180546001600160a01b0319169091179055565b610ca3611800565b6040516370a0823160e01b815230600482015281906001600160a01b0382169063a9059cbb90859083906370a0823190602401602060405180830381865afa158015610cf3573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610d179190612b3d565b6040516001600160e01b031960e085901b1681526001600160a01b03909216600483015260248201526044016020604051808303816000875af1158015610d62573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610d869190612b56565b50505050565b610d94611800565b6040516001600160a01b038216904780156108fc02916000818181858888f19350505050158015610a6b573d6000803e3d6000fd5b610dd1611800565b6001600160a01b0382166000908152600c602052604090205460ff1615158115151415610e3a5760405162461bcd60e51b815260206004820152601760248201527610d85c989bd51bdad95b8e88185b1c9958591e481cd95d604a1b6044820152606401610624565b6001600160a01b03919091166000908152600c60205260409020805460ff1916911515919091179055565b6001600160a01b03811660009081526013602052604081205460ff1615610ea257506001600160a01b031660009081526012602052604090205490565b6001600160a01b03821660009081526011602052604090205461070a90610a6f565b610ecc611800565b610b4b6000611d35565b6001600160a01b038216600090815260036020908152604080832033845290915290205481811015610f565760405162461bcd60e51b8152602060048201526024808201527f45524332303a206275726e20616d6f756e74206578636565647320616c6c6f77604482015263616e636560e01b6064820152608401610624565b610f6383338484036116dc565b6106628383611be8565b610f75611800565b600180546001600160a01b0319166001600160a01b0392909216919091179055565b610f9f611800565b80151560026000846006811115610fb857610fb8612b73565b6006811115610fc957610fc9612b73565b815260208101919091526040016000205460ff161515141561102d5760405162461bcd60e51b815260206004820152601960248201527f5769746843616c6c6261636b3a20616c726561647920736574000000000000006044820152606401610624565b806002600084600681111561104457611044612b73565b600681111561105557611055612b73565b81526020810191909152604001600020805460ff19169115159190911790555050565b611080611800565b610b4b611d85565b6110ba6040518060a0016040528060008152602001600081526020016000815260200160008152602001600081525090565b600660008360028111156110d0576110d0612b73565b60028111156110e1576110e1612b73565b81526020019081526020016000206040518060a0016040529081600082015481526020016001820154815260200160028201548152602001600382015481526020016004820154815250509050919050565b60606005805461067690612a76565b3360009081526003602090815260408083206001600160a01b0386168452909152812054828110156111c45760405162461bcd60e51b815260206004820152602560248201527f45524332303a2064656372656173656420616c6c6f77616e63652062656c6f77604482015264207a65726f60d81b6064820152608401610624565b6111d133858584036116dc565b5060019392505050565b6040805160808101825260008082526020820181905291810182905260608101919091526007600083600281111561121557611215612b73565b600281111561122657611226612b73565b81526020808201929092526040908101600020815160808101835281546001600160a01b0390811682526001830154811694820194909452600282015484169281019290925260030154909116606082015292915050565b600061070633848461185a565b611293611800565b60028660028111156112a7576112a7612b73565b14156112f15760405162461bcd60e51b8152602060048201526019602482015278436172626f546f6b656e3a2057726f6e67204665655479706560381b6044820152606401610624565b6040518060a00160405280868152602001858152602001848152602001838152602001828152506006600088600281111561132e5761132e612b73565b600281111561133f5761133f612b73565b8152602080820192909252604090810160002083518155918301516001830155820151600282015560608201516003820155608090910151600490910155505050505050565b61138d611800565b6001600160a01b0381166113f25760405162461bcd60e51b815260206004820152602660248201527f4f776e61626c653a206e6577206f776e657220697320746865207a65726f206160448201526564647265737360d01b6064820152608401610624565b610b5781611d35565b611403611800565b600285600281111561141757611417612b73565b14156114615760405162461bcd60e51b8152602060048201526019602482015278436172626f546f6b656e3a2057726f6e67204665655479706560381b6044820152606401610624565b6040518060800160405280856001600160a01b03168152602001846001600160a01b03168152602001836001600160a01b03168152602001826001600160a01b0316815250600760008760028111156114bc576114bc612b73565b60028111156114cd576114cd612b73565b81526020808201929092526040908101600020835181546001600160a01b03199081166001600160a01b039283161783559385015160018301805486169183169190911790559184015160028201805485169184169190911790556060909301516003909301805490921692169190911790555050505050565b6000806000611554611dc8565b90925090506115638282611b87565b9250505090565b6000610af88383611f4a565b6001600160a01b0383166000908152601160205260409020546115999082611f56565b6001600160a01b03841660009081526011602090815260408083209390935560139052205460ff1615611603576001600160a01b0383166000908152601260205260409020546115e99083611f56565b6001600160a01b0384166000908152601260205260409020555b610662838383611f62565b611616611fca565b600f546116239082611f56565b600f556010546116339083612017565b601055610a6b8282612023565b600160005260026020527fe90b7bceb6e7df5418fb78d8ee546e97c83a08bbccc01a0644d599ccd2a7c2e05460ff1615610662576001546040516302107dc160e31b81526001600160a01b0390911690631083ee08906116a890869086908690600401612b89565b600060405180830381600087803b1580156116c257600080fd5b505af19250505080156116d3575060015b61066257505050565b6001600160a01b03831661173e5760405162461bcd60e51b8152602060048201526024808201527f45524332303a20617070726f76652066726f6d20746865207a65726f206164646044820152637265737360e01b6064820152608401610624565b6001600160a01b03821661179f5760405162461bcd60e51b815260206004820152602260248201527f45524332303a20617070726f766520746f20746865207a65726f206164647265604482015261737360f01b6064820152608401610624565b6001600160a01b0383811660008181526003602090815260408083209487168084529482529182902085905590518481527f8c5be1e5ebec7d5bd14f71427d1e84f3dd0314c0f7b2291e5b200ac8c7c3b925910160405180910390a3505050565b6000546001600160a01b03163314610b4b5760405162461bcd60e51b815260206004820181905260248201527f4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e65726044820152606401610624565b611862611fca565b6001600160a01b0383166118c65760405162461bcd60e51b815260206004820152602560248201527f45524332303a207472616e736665722066726f6d20746865207a65726f206164604482015264647265737360d81b6064820152608401610624565b6001600160a01b0382166119285760405162461bcd60e51b815260206004820152602360248201527f45524332303a207472616e7366657220746f20746865207a65726f206164647260448201526265737360e81b6064820152608401610624565b600061193484846120bd565b90506000806119438484612164565b81516001600160a01b03891660009081526011602052604090205492945090925011156119c15760405162461bcd60e51b815260206004820152602660248201527f45524332303a207472616e7366657220616d6f756e7420657863656564732062604482015265616c616e636560d01b6064820152608401610624565b805182516119d0918891611576565b6119e3858260200151846020015161219b565b846001600160a01b0316866001600160a01b03167fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef8360200151604051611a2c91815260200190565b60405180910390a36020810151815114611b61576000611a4b846111db565b604083015190915015611a6a57611a6a8260400151846040015161160e565b606082015115611a8b57611a8b81600001518360600151856060015161219b565b608082015115611aac57611aac81602001518360800151856080015161219b565b60a082015115611acd57611acd81604001518360a001518560a0015161219b565b60c082015115611aee57611aee81606001518360c001518560c0015161219b565b7ff390f6f7846b730a86e28d011121b78c8010a3d9a94b63084de21f1afe63c7fc8260400151836060015184608001518560a001518660c00151604051611b57959493929190948552602085019390935260408401919091526060830152608082015260a00190565b60405180910390a1505b611b7f86868360000151846020015186600001518760200151612233565b505050505050565b6000610af88284612baa565b611b9b6122ec565b6000805460ff60a01b191690557f5db9ee0a495bf2e6ff9c91a7834c1ba4fdd244a5e8aa4e537bd38aeae4b073aa335b6040516001600160a01b03909116815260200160405180910390a1565b611bf0611fca565b6001600160a01b038216611c505760405162461bcd60e51b815260206004820152602160248201527f45524332303a206275726e2066726f6d20746865207a65726f206164647265736044820152607360f81b6064820152608401610624565b6000611c5e8261063b611547565b6001600160a01b038416600090815260116020526040902054909150811115611cd45760405162461bcd60e51b815260206004820152602260248201527f45524332303a206275726e20616d6f756e7420657863656564732062616c616e604482015261636560f01b6064820152608401610624565b611cdf838383611576565b611ce9828261233c565b6040518281526000906001600160a01b038516907fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef9060200160405180910390a3610662838383612366565b600080546001600160a01b038381166001600160a01b0319831681178455604051919092169283917f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e09190a35050565b611d8d611fca565b6000805460ff60a01b1916600160a01b1790557f62e78cea01bee320cd4e420270b5ea74000d11b0c9f74754ebdbfc544b05a258611bcb3390565b600f54600e546000918291825b601454811015611f1a57826011600060148481548110611df757611df7612ab1565b60009182526020808320909101546001600160a01b031683528201929092526040019020541180611e625750816012600060148481548110611e3b57611e3b612ab1565b60009182526020808320909101546001600160a01b03168352820192909252604001902054115b15611e7857600f54600e54945094505050509091565b611ebe6011600060148481548110611e9257611e92612ab1565b60009182526020808320909101546001600160a01b031683528201929092526040019020548490611f56565b9250611f066012600060148481548110611eda57611eda612ab1565b60009182526020808320909101546001600160a01b031683528201929092526040019020548390611f56565b915080611f1281612b0a565b915050611dd5565b50600e54600f54611f2a91611b87565b821015611f4157600f54600e549350935050509091565b90939092509050565b6000610af88284612bcc565b6000610af88284612add565b600360005260026020527f88601476d11616a71c5be67555bd1dff4b1cbf21533d2669b768b61518cfe1c35460ff161561066257600154604051630abc6e3360e01b81526001600160a01b0390911690630abc6e33906116a890869086908690600401612b89565b600054600160a01b900460ff1615610b4b5760405162461bcd60e51b815260206004820152601060248201526f14185d5cd8589b194e881c185d5cd95960821b6044820152606401610624565b6000610af88284612b25565b6000805260026020527fac33ff75c19e70fe83507db0d683fd3465c996598dc972688b7ace676c89077b5460ff1615610a6b5760015460405163285f806760e21b815260048101849052602481018390526001600160a01b039091169063a17e019c906044015b600060405180830381600087803b1580156120a457600080fd5b505af19250505080156120b5575060015b610a6b575050565b6001600160a01b0382166000908152600d602052604081205460ff16806120fc57506001600160a01b0382166000908152600d602052604090205460ff165b156121095750600261070a565b6001600160a01b0383166000908152600c602052604090205460ff16156121325750600061070a565b6001600160a01b0382166000908152600c602052604090205460ff161561215b5750600161070a565b50600292915050565b61216c6127ad565b6121746127ad565b61217e84846123ce565b9050612192818461218d611547565b612479565b91509250929050565b6001600160a01b0383166000908152601160205260409020546121be9082612017565b6001600160a01b03841660009081526011602090815260408083209390935560139052205460ff1615612228576001600160a01b03831660009081526012602052604090205461220e9083612017565b6001600160a01b0384166000908152601260205260409020555b610662838383612566565b600560005260026020527fb98b78633099fa36ed8b8680c4f8092689e1e04080eb9cbb077ca38a14d7e3845460ff1615611b7f5760015460405163addfb2df60e01b81526001600160a01b038881166004830152878116602483015260448201879052606482018690526084820185905260a482018490529091169063addfb2df9060c401600060405180830381600087803b1580156122d257600080fd5b505af19250505080156122e3575060015b611b7f57611b7f565b600054600160a01b900460ff16610b4b5760405162461bcd60e51b815260206004820152601460248201527314185d5cd8589b194e881b9bdd081c185d5cd95960621b6044820152606401610624565b600e546123499083611f56565b600e55600f546123599082611f56565b600f55610a6b82826125ce565b600660005260026020527f59dd4b18488d12f51eda69757a0ed42a2010c14b564330cc74a06895e60c077b5460ff1615610662576001546040516319fcd76b60e31b81526001600160a01b039091169063cfe6bb58906116a890869086908690600401612b89565b6123d66127ad565b6123de6127ad565b8381526020810184905260028360028111156123fc576123fc612b73565b14610af857600061240d858561263a565b8051604080850182905260208084015160608088018290529285015160808089018290529386015160a089018190529386015160c089018190529288015195965061246c95929461246694938593849290918391611f56565b90611f56565b6020830152509392505050565b6124816127ad565b6124896127ad565b8451612495908461156a565b808252602082015260028460028111156124b1576124b1612b73565b1461255e576124c485604001518461156a565b604082015260608501516124d8908461156a565b606082015260808501516124ec908461156a565b608082015260a0850151612500908461156a565b60a082015260c0850151612514908461156a565b8160c00181815250506125588160c001516124668360a001516124668560800151612466876060015161246689604001518a60200151611f5690919063ffffffff16565b60208201525b949350505050565b600260008190526020527f679795a0195a1b76cdebb7c51d74e058aee92919b8c3389af86ef24535e8a28c5460ff1615610662576001546040516389df074960e01b81526001600160a01b03909116906389df0749906116a890869086908690600401612b89565b600460005260026020527fee60d0579bcffd98e668647d59fec1ff86a7fb340ce572e844f234ae73a6918f5460ff1615610a6b5760015460405163490b729f60e11b815260048101849052602481018390526001600160a01b0390911690639216e53e9060440161208a565b61266c6040518060a0016040528060008152602001600081526020016000815260200160008152602001600081525090565b60006006600084600281111561268457612684612b73565b600281111561269557612695612b73565b81526020019081526020016000206040518060a00160405290816000820154815260200160018201548152602001600282015481526020016003820154815260200160048201548152505090506127146040518060a0016040528060008152602001600081526020016000815260200160008152602001600081525090565b815161272f906103e890612729908890611f4a565b90611b87565b81526020820151612749906103e890612729908890611f4a565b60208201526040820151612766906103e890612729908890611f4a565b60408201526060820151612783906103e890612729908890611f4a565b606082015260808201516127a0906103e890612729908890611f4a565b6080820152949350505050565b6040518060e00160405280600081526020016000815260200160008152602001600081526020016000815260200160008152602001600081525090565b6000602082840312156127fc57600080fd5b5035919050565b600060208083528351808285015260005b8181101561283057858101830151858201604001528201612814565b81811115612842576000604083870101525b50601f01601f1916929092016040019392505050565b6001600160a01b0381168114610b5757600080fd5b60006020828403121561287f57600080fd5b8135610af881612858565b6000806040838503121561289d57600080fd5b82356128a881612858565b946020939093013593505050565b8015158114610b5757600080fd5b600080604083850312156128d757600080fd5b82356128e281612858565b915060208301356128f2816128b6565b809150509250929050565b60008060006060848603121561291257600080fd5b833561291d81612858565b9250602084013561292d81612858565b929592945050506040919091013590565b6000806040838503121561295157600080fd5b823561295c81612858565b915060208301356128f281612858565b6000806040838503121561297f57600080fd5b8235600781106128e257600080fd5b80356003811061299d57600080fd5b919050565b6000602082840312156129b457600080fd5b610af88261298e565b60008060008060008060c087890312156129d657600080fd5b6129df8761298e565b9860208801359850604088013597606081013597506080810135965060a00135945092505050565b600080600080600060a08688031215612a1f57600080fd5b612a288661298e565b94506020860135612a3881612858565b93506040860135612a4881612858565b92506060860135612a5881612858565b91506080860135612a6881612858565b809150509295509295909350565b600181811c90821680612a8a57607f821691505b60208210811415612aab57634e487b7160e01b600052602260045260246000fd5b50919050565b634e487b7160e01b600052603260045260246000fd5b634e487b7160e01b600052601160045260246000fd5b600082821015612aef57612aef612ac7565b500390565b634e487b7160e01b600052603160045260246000fd5b6000600019821415612b1e57612b1e612ac7565b5060010190565b60008219821115612b3857612b38612ac7565b500190565b600060208284031215612b4f57600080fd5b5051919050565b600060208284031215612b6857600080fd5b8151610af8816128b6565b634e487b7160e01b600052602160045260246000fd5b6001600160a01b039390931683526020830191909152604082015260600190565b600082612bc757634e487b7160e01b600052601260045260246000fd5b500490565b6000816000190483118215151615612be657612be6612ac7565b50029056fea2646970667358221220f4f5e8bd91ac5b4f4ed45505dc41314450b15482e6ed4f152a3b28af1e162abf64736f6c634300080a0033",
  "deployedBytecode": "0x608060405234801561001057600080fd5b50600436106102275760003560e01c80636341ca0b116101305780638da5cb5b116100b8578063a9059cbb1161007c578063a9059cbb1461051d578063cf7a9bd514610530578063dd62ed3e14610543578063f2fde38b1461057c578063f4cd43821461058f57600080fd5b80638da5cb5b146104465780638e3c37601461045757806395d89b41146104ac578063a457c2d7146104b4578063a6844412146104c757600080fd5b8063715018a6116100ff578063715018a6146103fd57806379cc6790146104055780637a35aaa914610418578063836cf5d41461042b5780638456cb591461043e57600080fd5b80636341ca0b146103b15780636473b1eb146103c45780636c8df549146103d757806370a08231146103ea57600080fd5b806323b872dd116101b35780633950935111610182578063395093511461035e5780633f4ba83a1461037157806342966c681461037957806354bc089f1461038c5780635c975abb1461039f57600080fd5b806323b872dd146103165780632d6c2631146103295780632d8381191461033c578063313ce5671461034f57600080fd5b8063087fae14116101fa578063087fae141461029c578063095ea7b3146102c55780631392c086146102e857806318160ddd146102fb5780631dc610401461030357600080fd5b8063053ab1821461022c57806306fdde0314610241578063075d1d611461025f578063083b273214610271575b600080fd5b61023f61023a3660046127ea565b6105a2565b005b610249610667565b6040516102569190612803565b60405180910390f35b600f545b604051908152602001610256565b600154610284906001600160a01b031681565b6040516001600160a01b039091168152602001610256565b6102636102aa36600461286d565b6001600160a01b031660009081526011602052604090205490565b6102d86102d336600461288a565b6106f9565b6040519015158152602001610256565b6102636102f63660046127ea565b610710565b600e54610263565b61023f6103113660046128c4565b610784565b6102d86103243660046128fd565b610820565b61023f61033736600461286d565b6108ca565b61026361034a3660046127ea565b610a6f565b60405160128152602001610256565b6102d861036c36600461288a565b610aff565b61023f610b3b565b61023f6103873660046127ea565b610b4d565b61023f61039a36600461286d565b610b5a565b600054600160a01b900460ff166102d8565b61023f6103bf36600461293e565b610c9b565b61023f6103d236600461286d565b610d8c565b61023f6103e53660046128c4565b610dc9565b6102636103f836600461286d565b610e65565b61023f610ec4565b61023f61041336600461288a565b610ed6565b61023f61042636600461286d565b610f6d565b61023f61043936600461296c565b610f97565b61023f611078565b6000546001600160a01b0316610284565b61046a6104653660046129a2565b611088565b6040516102569190600060a082019050825182526020830151602083015260408301516040830152606083015160608301526080830151608083015292915050565b610249611133565b6102d86104c236600461288a565b611142565b6104da6104d53660046129a2565b6111db565b604051610256919081516001600160a01b039081168252602080840151821690830152604080840151821690830152606092830151169181019190915260800190565b6102d861052b36600461288a565b61127e565b61023f61053e3660046129bd565b61128b565b61026361055136600461293e565b6001600160a01b03918216600090815260036020908152604080832093909416825291909152205490565b61023f61058a36600461286d565b611385565b61023f61059d366004612a07565b6113fb565b3360008181526013602052604090205460ff161561062d5760405162461bcd60e51b815260206004820152603860248201527f436172626f546f6b656e3a206578636c7564656420616464726573736573206360448201527f616e6e6f742063616c6c20746869732066756e6374696f6e000000000000000060648201526084015b60405180910390fd5b60006106408361063b611547565b61156a565b905061064d828483611576565b610657838261160e565b610662828483611640565b505050565b60606004805461067690612a76565b80601f01602080910402602001604051908101604052809291908181526020018280546106a290612a76565b80156106ef5780601f106106c4576101008083540402835291602001916106ef565b820191906000526020600020905b8154815290600101906020018083116106d257829003601f168201915b5050505050905090565b60006107063384846116dc565b5060015b92915050565b6000600e548211156107785760405162461bcd60e51b815260206004820152602b60248201527f436172626f546f6b656e3a20616d6f756e74206d757374206265206c6573732060448201526a7468616e20737570706c7960a81b6064820152608401610624565b61070a8261063b611547565b61078c611800565b6001600160a01b0382166000908152600d602052604090205460ff16151581151514156107f55760405162461bcd60e51b815260206004820152601760248201527610d85c989bd51bdad95b8e88185b1c9958591e481cd95d604a1b6044820152606401610624565b6001600160a01b03919091166000908152600d60205260409020805460ff1916911515919091179055565b600061082d84848461185a565b6001600160a01b0384166000908152600360209081526040808320338452909152902054828110156108b25760405162461bcd60e51b815260206004820152602860248201527f45524332303a207472616e7366657220616d6f756e74206578636565647320616044820152676c6c6f77616e636560c01b6064820152608401610624565b6108bf85338584036116dc565b506001949350505050565b6108d2611800565b6001600160a01b03811660009081526013602052604090205460ff1661094a5760405162461bcd60e51b815260206004820152602760248201527f436172626f546f6b656e3a206163636f756e7420697320616c726561647920696044820152661b98db1d59195960ca1b6064820152608401610624565b60005b601454811015610a6b57816001600160a01b03166014828154811061097457610974612ab1565b6000918252602090912001546001600160a01b03161415610a59576014805461099f90600190612add565b815481106109af576109af612ab1565b600091825260209091200154601480546001600160a01b0390921691839081106109db576109db612ab1565b600091825260208083209190910180546001600160a01b0319166001600160a01b039485161790559184168152601282526040808220829055601390925220805460ff191690556014805480610a3357610a33612af4565b600082815260209020810160001990810180546001600160a01b03191690550190555050565b80610a6381612b0a565b91505061094d565b5050565b6000600f54821115610ae25760405162461bcd60e51b815260206004820152603660248201527f436172626f546f6b656e3a20616d6f756e74206d757374206265206c657373206044820152757468616e20746f74616c207265666c656374696f6e7360501b6064820152608401610624565b6000610aec611547565b9050610af88382611b87565b9392505050565b3360008181526003602090815260408083206001600160a01b03871684529091528120549091610706918590610b36908690612b25565b6116dc565b610b43611800565b610b4b611b93565b565b610b573382611be8565b50565b610b62611800565b6001600160a01b03811660009081526013602052604090205460ff1615610bdb5760405162461bcd60e51b815260206004820152602760248201527f436172626f546f6b656e3a206163636f756e7420697320616c726561647920656044820152661e18db1d59195960ca1b6064820152608401610624565b6001600160a01b03811660009081526011602052604090205415610c35576001600160a01b038116600090815260116020526040902054610c1b90610a6f565b6001600160a01b0382166000908152601260205260409020555b6001600160a01b03166000818152601360205260408120805460ff191660019081179091556014805491820181559091527fce6d7b5282bd9a3661ae061feed1dbda4e52ab073b1f9285be6e155d9c38d4ec0180546001600160a01b0319169091179055565b610ca3611800565b6040516370a0823160e01b815230600482015281906001600160a01b0382169063a9059cbb90859083906370a0823190602401602060405180830381865afa158015610cf3573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610d179190612b3d565b6040516001600160e01b031960e085901b1681526001600160a01b03909216600483015260248201526044016020604051808303816000875af1158015610d62573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610d869190612b56565b50505050565b610d94611800565b6040516001600160a01b038216904780156108fc02916000818181858888f19350505050158015610a6b573d6000803e3d6000fd5b610dd1611800565b6001600160a01b0382166000908152600c602052604090205460ff1615158115151415610e3a5760405162461bcd60e51b815260206004820152601760248201527610d85c989bd51bdad95b8e88185b1c9958591e481cd95d604a1b6044820152606401610624565b6001600160a01b03919091166000908152600c60205260409020805460ff1916911515919091179055565b6001600160a01b03811660009081526013602052604081205460ff1615610ea257506001600160a01b031660009081526012602052604090205490565b6001600160a01b03821660009081526011602052604090205461070a90610a6f565b610ecc611800565b610b4b6000611d35565b6001600160a01b038216600090815260036020908152604080832033845290915290205481811015610f565760405162461bcd60e51b8152602060048201526024808201527f45524332303a206275726e20616d6f756e74206578636565647320616c6c6f77604482015263616e636560e01b6064820152608401610624565b610f6383338484036116dc565b6106628383611be8565b610f75611800565b600180546001600160a01b0319166001600160a01b0392909216919091179055565b610f9f611800565b80151560026000846006811115610fb857610fb8612b73565b6006811115610fc957610fc9612b73565b815260208101919091526040016000205460ff161515141561102d5760405162461bcd60e51b815260206004820152601960248201527f5769746843616c6c6261636b3a20616c726561647920736574000000000000006044820152606401610624565b806002600084600681111561104457611044612b73565b600681111561105557611055612b73565b81526020810191909152604001600020805460ff19169115159190911790555050565b611080611800565b610b4b611d85565b6110ba6040518060a0016040528060008152602001600081526020016000815260200160008152602001600081525090565b600660008360028111156110d0576110d0612b73565b60028111156110e1576110e1612b73565b81526020019081526020016000206040518060a0016040529081600082015481526020016001820154815260200160028201548152602001600382015481526020016004820154815250509050919050565b60606005805461067690612a76565b3360009081526003602090815260408083206001600160a01b0386168452909152812054828110156111c45760405162461bcd60e51b815260206004820152602560248201527f45524332303a2064656372656173656420616c6c6f77616e63652062656c6f77604482015264207a65726f60d81b6064820152608401610624565b6111d133858584036116dc565b5060019392505050565b6040805160808101825260008082526020820181905291810182905260608101919091526007600083600281111561121557611215612b73565b600281111561122657611226612b73565b81526020808201929092526040908101600020815160808101835281546001600160a01b0390811682526001830154811694820194909452600282015484169281019290925260030154909116606082015292915050565b600061070633848461185a565b611293611800565b60028660028111156112a7576112a7612b73565b14156112f15760405162461bcd60e51b8152602060048201526019602482015278436172626f546f6b656e3a2057726f6e67204665655479706560381b6044820152606401610624565b6040518060a00160405280868152602001858152602001848152602001838152602001828152506006600088600281111561132e5761132e612b73565b600281111561133f5761133f612b73565b8152602080820192909252604090810160002083518155918301516001830155820151600282015560608201516003820155608090910151600490910155505050505050565b61138d611800565b6001600160a01b0381166113f25760405162461bcd60e51b815260206004820152602660248201527f4f776e61626c653a206e6577206f776e657220697320746865207a65726f206160448201526564647265737360d01b6064820152608401610624565b610b5781611d35565b611403611800565b600285600281111561141757611417612b73565b14156114615760405162461bcd60e51b8152602060048201526019602482015278436172626f546f6b656e3a2057726f6e67204665655479706560381b6044820152606401610624565b6040518060800160405280856001600160a01b03168152602001846001600160a01b03168152602001836001600160a01b03168152602001826001600160a01b0316815250600760008760028111156114bc576114bc612b73565b60028111156114cd576114cd612b73565b81526020808201929092526040908101600020835181546001600160a01b03199081166001600160a01b039283161783559385015160018301805486169183169190911790559184015160028201805485169184169190911790556060909301516003909301805490921692169190911790555050505050565b6000806000611554611dc8565b90925090506115638282611b87565b9250505090565b6000610af88383611f4a565b6001600160a01b0383166000908152601160205260409020546115999082611f56565b6001600160a01b03841660009081526011602090815260408083209390935560139052205460ff1615611603576001600160a01b0383166000908152601260205260409020546115e99083611f56565b6001600160a01b0384166000908152601260205260409020555b610662838383611f62565b611616611fca565b600f546116239082611f56565b600f556010546116339083612017565b601055610a6b8282612023565b600160005260026020527fe90b7bceb6e7df5418fb78d8ee546e97c83a08bbccc01a0644d599ccd2a7c2e05460ff1615610662576001546040516302107dc160e31b81526001600160a01b0390911690631083ee08906116a890869086908690600401612b89565b600060405180830381600087803b1580156116c257600080fd5b505af19250505080156116d3575060015b61066257505050565b6001600160a01b03831661173e5760405162461bcd60e51b8152602060048201526024808201527f45524332303a20617070726f76652066726f6d20746865207a65726f206164646044820152637265737360e01b6064820152608401610624565b6001600160a01b03821661179f5760405162461bcd60e51b815260206004820152602260248201527f45524332303a20617070726f766520746f20746865207a65726f206164647265604482015261737360f01b6064820152608401610624565b6001600160a01b0383811660008181526003602090815260408083209487168084529482529182902085905590518481527f8c5be1e5ebec7d5bd14f71427d1e84f3dd0314c0f7b2291e5b200ac8c7c3b925910160405180910390a3505050565b6000546001600160a01b03163314610b4b5760405162461bcd60e51b815260206004820181905260248201527f4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e65726044820152606401610624565b611862611fca565b6001600160a01b0383166118c65760405162461bcd60e51b815260206004820152602560248201527f45524332303a207472616e736665722066726f6d20746865207a65726f206164604482015264647265737360d81b6064820152608401610624565b6001600160a01b0382166119285760405162461bcd60e51b815260206004820152602360248201527f45524332303a207472616e7366657220746f20746865207a65726f206164647260448201526265737360e81b6064820152608401610624565b600061193484846120bd565b90506000806119438484612164565b81516001600160a01b03891660009081526011602052604090205492945090925011156119c15760405162461bcd60e51b815260206004820152602660248201527f45524332303a207472616e7366657220616d6f756e7420657863656564732062604482015265616c616e636560d01b6064820152608401610624565b805182516119d0918891611576565b6119e3858260200151846020015161219b565b846001600160a01b0316866001600160a01b03167fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef8360200151604051611a2c91815260200190565b60405180910390a36020810151815114611b61576000611a4b846111db565b604083015190915015611a6a57611a6a8260400151846040015161160e565b606082015115611a8b57611a8b81600001518360600151856060015161219b565b608082015115611aac57611aac81602001518360800151856080015161219b565b60a082015115611acd57611acd81604001518360a001518560a0015161219b565b60c082015115611aee57611aee81606001518360c001518560c0015161219b565b7ff390f6f7846b730a86e28d011121b78c8010a3d9a94b63084de21f1afe63c7fc8260400151836060015184608001518560a001518660c00151604051611b57959493929190948552602085019390935260408401919091526060830152608082015260a00190565b60405180910390a1505b611b7f86868360000151846020015186600001518760200151612233565b505050505050565b6000610af88284612baa565b611b9b6122ec565b6000805460ff60a01b191690557f5db9ee0a495bf2e6ff9c91a7834c1ba4fdd244a5e8aa4e537bd38aeae4b073aa335b6040516001600160a01b03909116815260200160405180910390a1565b611bf0611fca565b6001600160a01b038216611c505760405162461bcd60e51b815260206004820152602160248201527f45524332303a206275726e2066726f6d20746865207a65726f206164647265736044820152607360f81b6064820152608401610624565b6000611c5e8261063b611547565b6001600160a01b038416600090815260116020526040902054909150811115611cd45760405162461bcd60e51b815260206004820152602260248201527f45524332303a206275726e20616d6f756e7420657863656564732062616c616e604482015261636560f01b6064820152608401610624565b611cdf838383611576565b611ce9828261233c565b6040518281526000906001600160a01b038516907fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef9060200160405180910390a3610662838383612366565b600080546001600160a01b038381166001600160a01b0319831681178455604051919092169283917f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e09190a35050565b611d8d611fca565b6000805460ff60a01b1916600160a01b1790557f62e78cea01bee320cd4e420270b5ea74000d11b0c9f74754ebdbfc544b05a258611bcb3390565b600f54600e546000918291825b601454811015611f1a57826011600060148481548110611df757611df7612ab1565b60009182526020808320909101546001600160a01b031683528201929092526040019020541180611e625750816012600060148481548110611e3b57611e3b612ab1565b60009182526020808320909101546001600160a01b03168352820192909252604001902054115b15611e7857600f54600e54945094505050509091565b611ebe6011600060148481548110611e9257611e92612ab1565b60009182526020808320909101546001600160a01b031683528201929092526040019020548490611f56565b9250611f066012600060148481548110611eda57611eda612ab1565b60009182526020808320909101546001600160a01b031683528201929092526040019020548390611f56565b915080611f1281612b0a565b915050611dd5565b50600e54600f54611f2a91611b87565b821015611f4157600f54600e549350935050509091565b90939092509050565b6000610af88284612bcc565b6000610af88284612add565b600360005260026020527f88601476d11616a71c5be67555bd1dff4b1cbf21533d2669b768b61518cfe1c35460ff161561066257600154604051630abc6e3360e01b81526001600160a01b0390911690630abc6e33906116a890869086908690600401612b89565b600054600160a01b900460ff1615610b4b5760405162461bcd60e51b815260206004820152601060248201526f14185d5cd8589b194e881c185d5cd95960821b6044820152606401610624565b6000610af88284612b25565b6000805260026020527fac33ff75c19e70fe83507db0d683fd3465c996598dc972688b7ace676c89077b5460ff1615610a6b5760015460405163285f806760e21b815260048101849052602481018390526001600160a01b039091169063a17e019c906044015b600060405180830381600087803b1580156120a457600080fd5b505af19250505080156120b5575060015b610a6b575050565b6001600160a01b0382166000908152600d602052604081205460ff16806120fc57506001600160a01b0382166000908152600d602052604090205460ff165b156121095750600261070a565b6001600160a01b0383166000908152600c602052604090205460ff16156121325750600061070a565b6001600160a01b0382166000908152600c602052604090205460ff161561215b5750600161070a565b50600292915050565b61216c6127ad565b6121746127ad565b61217e84846123ce565b9050612192818461218d611547565b612479565b91509250929050565b6001600160a01b0383166000908152601160205260409020546121be9082612017565b6001600160a01b03841660009081526011602090815260408083209390935560139052205460ff1615612228576001600160a01b03831660009081526012602052604090205461220e9083612017565b6001600160a01b0384166000908152601260205260409020555b610662838383612566565b600560005260026020527fb98b78633099fa36ed8b8680c4f8092689e1e04080eb9cbb077ca38a14d7e3845460ff1615611b7f5760015460405163addfb2df60e01b81526001600160a01b038881166004830152878116602483015260448201879052606482018690526084820185905260a482018490529091169063addfb2df9060c401600060405180830381600087803b1580156122d257600080fd5b505af19250505080156122e3575060015b611b7f57611b7f565b600054600160a01b900460ff16610b4b5760405162461bcd60e51b815260206004820152601460248201527314185d5cd8589b194e881b9bdd081c185d5cd95960621b6044820152606401610624565b600e546123499083611f56565b600e55600f546123599082611f56565b600f55610a6b82826125ce565b600660005260026020527f59dd4b18488d12f51eda69757a0ed42a2010c14b564330cc74a06895e60c077b5460ff1615610662576001546040516319fcd76b60e31b81526001600160a01b039091169063cfe6bb58906116a890869086908690600401612b89565b6123d66127ad565b6123de6127ad565b8381526020810184905260028360028111156123fc576123fc612b73565b14610af857600061240d858561263a565b8051604080850182905260208084015160608088018290529285015160808089018290529386015160a089018190529386015160c089018190529288015195965061246c95929461246694938593849290918391611f56565b90611f56565b6020830152509392505050565b6124816127ad565b6124896127ad565b8451612495908461156a565b808252602082015260028460028111156124b1576124b1612b73565b1461255e576124c485604001518461156a565b604082015260608501516124d8908461156a565b606082015260808501516124ec908461156a565b608082015260a0850151612500908461156a565b60a082015260c0850151612514908461156a565b8160c00181815250506125588160c001516124668360a001516124668560800151612466876060015161246689604001518a60200151611f5690919063ffffffff16565b60208201525b949350505050565b600260008190526020527f679795a0195a1b76cdebb7c51d74e058aee92919b8c3389af86ef24535e8a28c5460ff1615610662576001546040516389df074960e01b81526001600160a01b03909116906389df0749906116a890869086908690600401612b89565b600460005260026020527fee60d0579bcffd98e668647d59fec1ff86a7fb340ce572e844f234ae73a6918f5460ff1615610a6b5760015460405163490b729f60e11b815260048101849052602481018390526001600160a01b0390911690639216e53e9060440161208a565b61266c6040518060a0016040528060008152602001600081526020016000815260200160008152602001600081525090565b60006006600084600281111561268457612684612b73565b600281111561269557612695612b73565b81526020019081526020016000206040518060a00160405290816000820154815260200160018201548152602001600282015481526020016003820154815260200160048201548152505090506127146040518060a0016040528060008152602001600081526020016000815260200160008152602001600081525090565b815161272f906103e890612729908890611f4a565b90611b87565b81526020820151612749906103e890612729908890611f4a565b60208201526040820151612766906103e890612729908890611f4a565b60408201526060820151612783906103e890612729908890611f4a565b606082015260808201516127a0906103e890612729908890611f4a565b6080820152949350505050565b6040518060e00160405280600081526020016000815260200160008152602001600081526020016000815260200160008152602001600081525090565b6000602082840312156127fc57600080fd5b5035919050565b600060208083528351808285015260005b8181101561283057858101830151858201604001528201612814565b81811115612842576000604083870101525b50601f01601f1916929092016040019392505050565b6001600160a01b0381168114610b5757600080fd5b60006020828403121561287f57600080fd5b8135610af881612858565b6000806040838503121561289d57600080fd5b82356128a881612858565b946020939093013593505050565b8015158114610b5757600080fd5b600080604083850312156128d757600080fd5b82356128e281612858565b915060208301356128f2816128b6565b809150509250929050565b60008060006060848603121561291257600080fd5b833561291d81612858565b9250602084013561292d81612858565b929592945050506040919091013590565b6000806040838503121561295157600080fd5b823561295c81612858565b915060208301356128f281612858565b6000806040838503121561297f57600080fd5b8235600781106128e257600080fd5b80356003811061299d57600080fd5b919050565b6000602082840312156129b457600080fd5b610af88261298e565b60008060008060008060c087890312156129d657600080fd5b6129df8761298e565b9860208801359850604088013597606081013597506080810135965060a00135945092505050565b600080600080600060a08688031215612a1f57600080fd5b612a288661298e565b94506020860135612a3881612858565b93506040860135612a4881612858565b92506060860135612a5881612858565b91506080860135612a6881612858565b809150509295509295909350565b600181811c90821680612a8a57607f821691505b60208210811415612aab57634e487b7160e01b600052602260045260246000fd5b50919050565b634e487b7160e01b600052603260045260246000fd5b634e487b7160e01b600052601160045260246000fd5b600082821015612aef57612aef612ac7565b500390565b634e487b7160e01b600052603160045260246000fd5b6000600019821415612b1e57612b1e612ac7565b5060010190565b60008219821115612b3857612b38612ac7565b500190565b600060208284031215612b4f57600080fd5b5051919050565b600060208284031215612b6857600080fd5b8151610af8816128b6565b634e487b7160e01b600052602160045260246000fd5b6001600160a01b039390931683526020830191909152604082015260600190565b600082612bc757634e487b7160e01b600052601260045260246000fd5b500490565b6000816000190483118215151615612be657612be6612ac7565b50029056fea2646970667358221220f4f5e8bd91ac5b4f4ed45505dc41314450b15482e6ed4f152a3b28af1e162abf64736f6c634300080a0033",
  "devdoc": {
    "kind": "dev",
    "methods": {
      "allowance(address,address)": {
        "details": "Returns the remaining number of tokens that `spender` will be allowed to spend on behalf of `owner` through {transferFrom}. This is zero by default. This value changes when {approve} or {transferFrom} are called."
      },
      "approve(address,uint256)": {
        "details": "Sets `amount` as the allowance of `spender` over the caller's tokens. Returns a boolean value indicating whether the operation succeeded. IMPORTANT: Beware that changing an allowance with this method brings the risk that someone may use both the old and the new allowance by unfortunate transaction ordering. One possible solution to mitigate this race condition is to first reduce the spender's allowance to 0 and set the desired value afterwards: https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729 Emits an {Approval} event."
      },
      "balanceOf(address)": {
        "details": "Returns the amount of tokens owned by `account`."
      },
      "owner()": {
        "details": "Returns the address of the current owner."
      },
      "paused()": {
        "details": "Returns true if the contract is paused, and false otherwise."
      },
      "renounceOwnership()": {
        "details": "Leaves the contract without owner. It will not be possible to call `onlyOwner` functions anymore. Can only be called by the current owner. NOTE: Renouncing ownership will leave the contract without an owner, thereby removing any functionality that is only available to the owner."
      },
      "totalSupply()": {
        "details": "Returns the amount of tokens in existence."
      },
      "transferOwnership(address)": {
        "details": "Transfers ownership of the contract to a new account (`newOwner`). Can only be called by the current owner."
      }
    },
    "version": 1
  },
  "userdoc": {
    "kind": "user",
    "methods": {},
    "version": 1
  },
  "storageLayout": {
    "storage": [
      {
        "astId": 396,
        "contract": "contracts/v1/CarboToken.sol:CarboToken",
        "label": "_owner",
        "offset": 0,
        "slot": "0",
        "type": "t_address"
      },
      {
        "astId": 519,
        "contract": "contracts/v1/CarboToken.sol:CarboToken",
        "label": "_paused",
        "offset": 20,
        "slot": "0",
        "type": "t_bool"
      },
      {
        "astId": 5430,
        "contract": "contracts/v1/CarboToken.sol:CarboToken",
        "label": "callback",
        "offset": 0,
        "slot": "1",
        "type": "t_contract(ICallbackContract)5745"
      },
      {
        "astId": 5443,
        "contract": "contracts/v1/CarboToken.sol:CarboToken",
        "label": "_callbacks",
        "offset": 0,
        "slot": "2",
        "type": "t_mapping(t_enum(CallbackType)5438,t_bool)"
      },
      {
        "astId": 3087,
        "contract": "contracts/v1/CarboToken.sol:CarboToken",
        "label": "_allowances",
        "offset": 0,
        "slot": "3",
        "type": "t_mapping(t_address,t_mapping(t_address,t_uint256))"
      },
      {
        "astId": 3090,
        "contract": "contracts/v1/CarboToken.sol:CarboToken",
        "label": "_name",
        "offset": 0,
        "slot": "4",
        "type": "t_string_storage"
      },
      {
        "astId": 3093,
        "contract": "contracts/v1/CarboToken.sol:CarboToken",
        "label": "_symbol",
        "offset": 0,
        "slot": "5",
        "type": "t_string_storage"
      },
      {
        "astId": 3506,
        "contract": "contracts/v1/CarboToken.sol:CarboToken",
        "label": "_fees",
        "offset": 0,
        "slot": "6",
        "type": "t_mapping(t_enum(FeeType)5790,t_struct(Fees)5777_storage)"
      },
      {
        "astId": 3512,
        "contract": "contracts/v1/CarboToken.sol:CarboToken",
        "label": "_feeAddresses",
        "offset": 0,
        "slot": "7",
        "type": "t_mapping(t_enum(FeeType)5790,t_struct(FeeAddresses)5786_storage)"
      },
      {
        "astId": 3514,
        "contract": "contracts/v1/CarboToken.sol:CarboToken",
        "label": "_dividendsAddress",
        "offset": 0,
        "slot": "8",
        "type": "t_address"
      },
      {
        "astId": 3516,
        "contract": "contracts/v1/CarboToken.sol:CarboToken",
        "label": "_buybackAddress",
        "offset": 0,
        "slot": "9",
        "type": "t_address"
      },
      {
        "astId": 3518,
        "contract": "contracts/v1/CarboToken.sol:CarboToken",
        "label": "_treasuryAddress",
        "offset": 0,
        "slot": "10",
        "type": "t_address"
      },
      {
        "astId": 3520,
        "contract": "contracts/v1/CarboToken.sol:CarboToken",
        "label": "_liquidityAddress",
        "offset": 0,
        "slot": "11",
        "type": "t_address"
      },
      {
        "astId": 3524,
        "contract": "contracts/v1/CarboToken.sol:CarboToken",
        "label": "_isTaxable",
        "offset": 0,
        "slot": "12",
        "type": "t_mapping(t_address,t_bool)"
      },
      {
        "astId": 3528,
        "contract": "contracts/v1/CarboToken.sol:CarboToken",
        "label": "_isTaxExempt",
        "offset": 0,
        "slot": "13",
        "type": "t_mapping(t_address,t_bool)"
      },
      {
        "astId": 3819,
        "contract": "contracts/v1/CarboToken.sol:CarboToken",
        "label": "_tTotal",
        "offset": 0,
        "slot": "14",
        "type": "t_uint256"
      },
      {
        "astId": 3828,
        "contract": "contracts/v1/CarboToken.sol:CarboToken",
        "label": "_rTotal",
        "offset": 0,
        "slot": "15",
        "type": "t_uint256"
      },
      {
        "astId": 3830,
        "contract": "contracts/v1/CarboToken.sol:CarboToken",
        "label": "_tFeeTotal",
        "offset": 0,
        "slot": "16",
        "type": "t_uint256"
      },
      {
        "astId": 3834,
        "contract": "contracts/v1/CarboToken.sol:CarboToken",
        "label": "_rOwned",
        "offset": 0,
        "slot": "17",
        "type": "t_mapping(t_address,t_uint256)"
      },
      {
        "astId": 3838,
        "contract": "contracts/v1/CarboToken.sol:CarboToken",
        "label": "_tOwned",
        "offset": 0,
        "slot": "18",
        "type": "t_mapping(t_address,t_uint256)"
      },
      {
        "astId": 3842,
        "contract": "contracts/v1/CarboToken.sol:CarboToken",
        "label": "_isExcluded",
        "offset": 0,
        "slot": "19",
        "type": "t_mapping(t_address,t_bool)"
      },
      {
        "astId": 3845,
        "contract": "contracts/v1/CarboToken.sol:CarboToken",
        "label": "_excluded",
        "offset": 0,
        "slot": "20",
        "type": "t_array(t_address)dyn_storage"
      }
    ],
    "types": {
      "t_address": {
        "encoding": "inplace",
        "label": "address",
        "numberOfBytes": "20"
      },
      "t_array(t_address)dyn_storage": {
        "base": "t_address",
        "encoding": "dynamic_array",
        "label": "address[]",
        "numberOfBytes": "32"
      },
      "t_bool": {
        "encoding": "inplace",
        "label": "bool",
        "numberOfBytes": "1"
      },
      "t_contract(ICallbackContract)5745": {
        "encoding": "inplace",
        "label": "contract ICallbackContract",
        "numberOfBytes": "20"
      },
      "t_enum(CallbackType)5438": {
        "encoding": "inplace",
        "label": "enum WithCallback.CallbackType",
        "numberOfBytes": "1"
      },
      "t_enum(FeeType)5790": {
        "encoding": "inplace",
        "label": "enum ICarboToken.FeeType",
        "numberOfBytes": "1"
      },
      "t_mapping(t_address,t_bool)": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => bool)",
        "numberOfBytes": "32",
        "value": "t_bool"
      },
      "t_mapping(t_address,t_mapping(t_address,t_uint256))": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => mapping(address => uint256))",
        "numberOfBytes": "32",
        "value": "t_mapping(t_address,t_uint256)"
      },
      "t_mapping(t_address,t_uint256)": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => uint256)",
        "numberOfBytes": "32",
        "value": "t_uint256"
      },
      "t_mapping(t_enum(CallbackType)5438,t_bool)": {
        "encoding": "mapping",
        "key": "t_enum(CallbackType)5438",
        "label": "mapping(enum WithCallback.CallbackType => bool)",
        "numberOfBytes": "32",
        "value": "t_bool"
      },
      "t_mapping(t_enum(FeeType)5790,t_struct(FeeAddresses)5786_storage)": {
        "encoding": "mapping",
        "key": "t_enum(FeeType)5790",
        "label": "mapping(enum ICarboToken.FeeType => struct ICarboToken.FeeAddresses)",
        "numberOfBytes": "32",
        "value": "t_struct(FeeAddresses)5786_storage"
      },
      "t_mapping(t_enum(FeeType)5790,t_struct(Fees)5777_storage)": {
        "encoding": "mapping",
        "key": "t_enum(FeeType)5790",
        "label": "mapping(enum ICarboToken.FeeType => struct ICarboToken.Fees)",
        "numberOfBytes": "32",
        "value": "t_struct(Fees)5777_storage"
      },
      "t_string_storage": {
        "encoding": "bytes",
        "label": "string",
        "numberOfBytes": "32"
      },
      "t_struct(FeeAddresses)5786_storage": {
        "encoding": "inplace",
        "label": "struct ICarboToken.FeeAddresses",
        "members": [
          {
            "astId": 5779,
            "contract": "contracts/v1/CarboToken.sol:CarboToken",
            "label": "dividends",
            "offset": 0,
            "slot": "0",
            "type": "t_address"
          },
          {
            "astId": 5781,
            "contract": "contracts/v1/CarboToken.sol:CarboToken",
            "label": "buyback",
            "offset": 0,
            "slot": "1",
            "type": "t_address"
          },
          {
            "astId": 5783,
            "contract": "contracts/v1/CarboToken.sol:CarboToken",
            "label": "treasury",
            "offset": 0,
            "slot": "2",
            "type": "t_address"
          },
          {
            "astId": 5785,
            "contract": "contracts/v1/CarboToken.sol:CarboToken",
            "label": "liquidity",
            "offset": 0,
            "slot": "3",
            "type": "t_address"
          }
        ],
        "numberOfBytes": "128"
      },
      "t_struct(Fees)5777_storage": {
        "encoding": "inplace",
        "label": "struct ICarboToken.Fees",
        "members": [
          {
            "astId": 5768,
            "contract": "contracts/v1/CarboToken.sol:CarboToken",
            "label": "rfi",
            "offset": 0,
            "slot": "0",
            "type": "t_uint256"
          },
          {
            "astId": 5770,
            "contract": "contracts/v1/CarboToken.sol:CarboToken",
            "label": "dividends",
            "offset": 0,
            "slot": "1",
            "type": "t_uint256"
          },
          {
            "astId": 5772,
            "contract": "contracts/v1/CarboToken.sol:CarboToken",
            "label": "buyback",
            "offset": 0,
            "slot": "2",
            "type": "t_uint256"
          },
          {
            "astId": 5774,
            "contract": "contracts/v1/CarboToken.sol:CarboToken",
            "label": "treasury",
            "offset": 0,
            "slot": "3",
            "type": "t_uint256"
          },
          {
            "astId": 5776,
            "contract": "contracts/v1/CarboToken.sol:CarboToken",
            "label": "liquidity",
            "offset": 0,
            "slot": "4",
            "type": "t_uint256"
          }
        ],
        "numberOfBytes": "160"
      },
      "t_uint256": {
        "encoding": "inplace",
        "label": "uint256",
        "numberOfBytes": "32"
      }
    }
  }
}